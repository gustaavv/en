<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Algorithm Problem 001: Maximum Possible Score of an Array</title>
    <url>/en/2023/09/21/Algorithm-Problem-001-Calculate-Maximum-Possible-Score-of-an-Array/</url>
    <content><![CDATA[<h1 id="Problem">Problem</h1>
<blockquote>
<p>Problem Source: NowCoder Online Test</p>
</blockquote>
<p>Given an array $nums$ indexing from $0$ and a non-negative integer $k$.</p>
<p>In one operation, you can perform the following:</p>
<ul>
<li>Choose an index $i$ not chosen before, where $i$ is in the range $[0, nums.length - 1]$.</li>
<li>Replace $nums[i]$ with any integer in the range $[nums[i] - k, nums[i] + k]$ (inclusive).</li>
</ul>
<p>After applying any times of operations, return the maximum possible score of the array $nums$.</p>
<p>The array’s <strong>score</strong> is defined as the “maximum number of repeated elements in the array”.</p>
<p>Note that you can only apply the operation <strong>once</strong> for each index.</p>
<span id="more"></span>
<h1 id="Examples">Examples</h1>
<h2 id="Example-1">Example 1</h2>
<p>Input:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="number">4</span><span class="punctuation">,</span><span class="number">6</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">]</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>Output:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>Explanation:</p>
<p>In this example, we perform the following operations:</p>
<ul>
<li>Choose index 1, replace it with 4 (range [4, 8]), nums = [4,4,1,2].</li>
<li>Choose index 3, replace it with 4 (range [0, 4]), nums = [4,4,1,4].</li>
</ul>
<p>After applying these operations, the score of array nums is 3 (subsequence composed of indices 0, 1, and 3). It can be proved that 3 is the maximum possible length we can achieve.</p>
<h2 id="Example-2">Example 2</h2>
<p>Input:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">,</span><span class="number">1</span><span class="punctuation">]</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure>
<p>Output:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>
<p>Explanation:</p>
<p>In this example, no operations are needed.</p>
<p>The score of array nums is 4 (the entire array).</p>
<h1 id="Approach">Approach</h1>
<h2 id="Rereading-the-Problem">Rereading the Problem</h2>
<p>Let’s restate the problem:</p>
<p>Given an array $nums$ and a natural number $k$.</p>
<p>For any index $i$, we can replace the element $nums[i]$ with any integer in the range $[nums[i] - k, nums[i] + k]$. An index can only be operated on once, or not at all.</p>
<p>Return the maximum possible count of repeated elements in the array $nums$ after any times of operations.</p>
<h2 id="Observation-1-Sorting">Observation 1: Sorting</h2>
<p>To maximize the number of repeated elements, we need to operate on elements that are <strong>close in value</strong> to make them equal.</p>
<p>How to find elements that are close in value? — Sorting</p>
<h2 id="Observation-2-Finding-a-Pattern">Observation 2: Finding a Pattern</h2>
<p>Assume, after sorting, we attempt to make elements in the interval $[i, j]$ equal after operations. What conditions should $i$ and $j$ satisfy?</p>
<ul>
<li>After sorting, we know that $nums[i] \le nums[i + 1] \le \cdots \le nums[j - 1] \le nums[j]$.</li>
<li>The replacement range for $nums[i]$ is $[nums[i] - k, nums[i] + k]$, and for $nums[j]$ is $[nums[j] - k, nums[j] + k]$.</li>
<li>Therefore, $nums[i] + k \ge nums[j] - k$.</li>
<li>Simplifying, we get <strong>$0 \le nums[j] - nums[i] \le 2k$</strong>.</li>
</ul>
<p>It can be seen that when $i$ is fixed, to maximize the range $j - i + 1$, we need to find a $j$ such that $nums[j] - nums[i]$ is as close to $2k$ as possible. This way, the interval range $j - i + 1$ could be the desired answer.</p>
<h2 id="Observation-3-Sliding-Window">Observation 3: Sliding Window</h2>
<p>After our analysis, this problem becomes:</p>
<ul>
<li>For a sorted array $nums$ and a natural number $k$.</li>
<li>When index $i$ is fixed, we need to find the maximum index $j$ such that $0 \le nums[j] - nums[i] \le 2k$.</li>
<li>Among all possible intervals $[i, j]$, the maximum $j - i + 1$ is the answer.</li>
</ul>
<p>Now, using the <strong>sliding window</strong> algorithm can reduce the time complexity from $O(n^2)$ (brute-force) to $O(n)$.</p>
<h1 id="Code">Code</h1>
<h2 id="Java">Java</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumScore</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line"></span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// sliding window</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &lt; n &amp;&amp; nums[j] &lt;= nums[i] + <span class="number">2</span> * k) j++;</span><br><span class="line">            ans = Math.max(ans, j - i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm Problems</category>
      </categories>
      <tags>
        <tag>Sort</tag>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Problem 002: Spiral Matrix II</title>
    <url>/en/2023/10/03/Algorithm-Problem-002-spiral-matrix-ii/</url>
    <content><![CDATA[<h1 id="Problem">Problem</h1>
<blockquote>
<p>Problem Source：<a href="https://leetcode.cn/problems/spiral-matrix-ii/">59. Spiral Matrix II</a></p>
</blockquote>
<blockquote>
<p><strong>Problem Description</strong>：</p>
<p>Given a positive integer <code>n</code>, generate an <code>n x n</code> <code>matrix</code> filled with elements from <code>1</code> to <code>n^2</code> in spiral order.</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong>
<img src="./MDImgs/Algorithm-Problem-002-spiral-matrix-ii/spiraln.jpg" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 3</span><br><span class="line">Output: [[1,2,3],[8,9,4],[7,6,5]]</span><br></pre></td></tr></table></figure>
</blockquote>
<span id="more"></span>
<blockquote>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 1</span><br><span class="line">Output: [[1]]</span><br></pre></td></tr></table></figure>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 20</code></li>
</ul>
</blockquote>
<h1 id="Approach">Approach</h1>
<p>This problem is a typical simulation problem where we need to traverse the entire matrix as described.</p>
<h2 id="Approach-1">Approach 1</h2>
<p>My approach is to divide the matrix into layers and traverse each layer one by one. For example, when $n = 3$, the matrix is:</p>
<p><img src="./MDImgs/Algorithm-Problem-002-spiral-matrix-ii/spiraln.jpg" alt="img"></p>
<p>Here, we define the first layer as <code>layer = 0</code>, which contains numbers 1 to 8. The second layer is <code>layer = 1</code>, containing the number 9.</p>
<p>While traversing each layer, write the loop codes for moving right (1, 2), moving down (3, 4), moving left (5, 6), and moving up (7, 8).</p>
<p>The key to this approach is to find the mathematical pattern for the relationship between <code>layer</code> and the length of the current row/column being traversed.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] generateMatrix(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="type">int</span>[][] ans = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">        <span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">layer</span> <span class="operator">=</span> <span class="number">0</span>; layer &lt;= n / <span class="number">2</span>; layer++) &#123;</span><br><span class="line">            <span class="comment">// Move right</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> layer; j &lt; n - layer - <span class="number">1</span>; ++j, ++counter) &#123;</span><br><span class="line">                ans[layer][j] = counter;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Move down</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> layer; i &lt; n - layer - <span class="number">1</span>; ++i, ++counter) &#123;</span><br><span class="line">                ans[i][n - layer - <span class="number">1</span>] = counter;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Move left</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> n - layer - <span class="number">1</span>; j &gt; layer; --j, ++counter) &#123;</span><br><span class="line">                ans[n - layer - <span class="number">1</span>][j] = counter;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Move up</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - layer - <span class="number">1</span>; i &gt; layer; --i, ++counter) &#123;</span><br><span class="line">                ans[i][layer] = counter;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// For square matrices with odd length, manually handle the center element</span></span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            ans[n / <span class="number">2</span>][n / <span class="number">2</span>] = counter;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Clearly, this approach is error-prone as finding the pattern is tedious.</strong></p>
<p>Some experts on LeetCode provide an alternative solution that avoids finding the pattern, such as <a href="https://leetcode.cn/problems/spiral-matrix-ii/solutions/12594/spiral-matrix-ii-mo-ni-fa-she-ding-bian-jie-qing-x/">Krahets’s solution</a>：manually control the four boundaries (up, down, left, right), and when reaching a boundary, turn to the next direction.</p>
<h2 id="Approach-2">Approach 2</h2>
<p>Since we are dealing with a matrix (a <strong>regular</strong> shape), we tend to control the traversal from a <strong>macro</strong> perspective, as in Approach 1. Macro means understanding the global picture, as seen in my approach of finding mathematical patterns and the experts’ approach of controlling the four boundaries.</p>
<p>Now, let’s approach the problem from a <strong>micro</strong> perspective: what if we stand on a <strong>huge</strong> chessboard with <strong>invisible boundaries</strong> and need to fill in these numbers, how would we do it? We can <strong>only see the numbers on the surrounding squares</strong>. At this point, the macro approach is no longer effective, so what should we do?</p>
<p><img src="./MDImgs/Algorithm-Problem-002-spiral-matrix-ii/spiraln.jpg" alt="img"></p>
<p>Suppose we stand on square 1 (facing right) and move forward, filling in the numbers along the path. When we reach square 3, we find that there is no way forward. Since we want to fill in the numbers clockwise, let’s turn right (facing down), and now the square we are facing is where we should fill in the number 4.</p>
<p>Similarly, when we reach square 8 (facing up), the squares in front have already been filled with number 1. Let’s turn right again (facing right), and now the square we are facing is where we should fill in the number 9.</p>
<p>Therefore, in the code, let’s <strong>focus only on the current coordinates of the agent</strong> and make it <strong>keep moving in one direction</strong> until it reaches a boundary or the square has already been filled with a number. When this happens, we <strong>turn right</strong>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] generateMatrix(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="type">int</span>[][] ans = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">        <span class="comment">// (dx[k], dy[k]) represents the direction to move, in the order of right, down, left, up, right ...</span></span><br><span class="line">        <span class="type">int</span>[] dx = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] dy = &#123;<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// (x, y) is the agent&#x27;s coordinates;</span></span><br><span class="line">        <span class="comment">// dir represents the current direction to move, it is the index of the dx, dy arrays</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>, y = <span class="number">0</span>, dir = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// Loop variables, and the condition for the loop to exit</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">1</span>, limit = n * n;</span><br><span class="line">        <span class="keyword">while</span> (counter &lt;= limit) &#123;</span><br><span class="line">            <span class="comment">// Current coordinates are within the boundaries, and the current square is not filled with a number</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="number">0</span> &lt;= x &amp;&amp; x &lt; n &amp;&amp; <span class="number">0</span> &lt;= y &amp;&amp; y &lt; n &amp;&amp; ans[x][y] == <span class="number">0</span>) &#123;</span><br><span class="line">                ans[x][y] = counter;</span><br><span class="line">                counter++;</span><br><span class="line">                <span class="comment">// keep moving</span></span><br><span class="line">                x += dx[dir];</span><br><span class="line">                y += dy[dir];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Step back one square</span></span><br><span class="line">            x -= dx[dir];</span><br><span class="line">            y -= dy[dir];</span><br><span class="line">            <span class="comment">// Turn right</span></span><br><span class="line">            dir = (dir + <span class="number">1</span>) % dx.length;</span><br><span class="line">            <span class="comment">// After moving forward one step, the position (x, y) is the first square to be processed in the next while loop</span></span><br><span class="line">            x += dx[dir];</span><br><span class="line">            y += dy[dir];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Reflection">Reflection</h1>
<p>I came up with Approach 2 because I recently solved a problem that required filling numbers clockwise in an isosceles right-angled triangle (with the right angle parallel to the coordinate axes).</p>
<p>For example, when <code>n = 4</code>, we need to fill in the numbers as follows:</p>
<img src="./MDImgs/Algorithm-Problem-002-spiral-matrix-ii/image-20231003171918667.png" alt="image-20231003171918667" style="zoom:67%;" />
<p>For the macro approach that finds patterns from a high-level perspective, I really didn’t bother and found it cumbersome.</p>
<p>With Approach 2, the so-called clockwise filling is essentially cycling through these directions: up, down-right, left. So, at the code level:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] dx = &#123;-<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] dy = &#123;<span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br></pre></td></tr></table></figure>
<p>A slight modification to the code for Approach 2 is all that is needed.</p>
]]></content>
      <categories>
        <category>Algorithm Problems</category>
      </categories>
      <tags>
        <tag>Simulation</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Problem 003: Diagonal Traverse II</title>
    <url>/en/2023/10/29/Algorithm-Problem-003-diagonal-traverse-ii/</url>
    <content><![CDATA[<h1 id="Problem">Problem</h1>
<blockquote>
<p>Problem Source： <a href="https://leetcode.cn/problems/diagonal-traverse-ii/">1424. Diagonal Traverse II</a></p>
</blockquote>
<blockquote>
<p><strong>Problem Description</strong>：</p>
<p>Given a 2D integer array <code>nums</code>, return <em>all elements of</em> <code>nums</code> <em>in diagonal order as shown in the below images</em>.</p>
</blockquote>
<blockquote>
<p><strong>Example 1:</strong></p>
<p><img src="./MDImgs/Algorithm-Problem-003-diagonal-traverse-ii/image-20231029115351760.png" alt="image-20231029115351760"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [[1,2,3],[4,5,6],[7,8,9]]</span><br><span class="line">Output: [1,4,2,7,5,3,8,6,9]</span><br></pre></td></tr></table></figure>
</blockquote>
<span id="more"></span>
<blockquote>
<p><strong>Example 2:</strong></p>
<p><img src="./MDImgs/Algorithm-Problem-003-diagonal-traverse-ii/image-20231029115127660.png" alt="image-20231029115127660"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [[1,2,3,4,5],[6,7],[8],[9,10,11],[12,13,14,15,16]]</span><br><span class="line">Output: [1,6,2,8,7,3,9,4,12,10,5,13,11,14,15,16]</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [[1,2,3],[4],[5,6,7],[8],[9,10,11]]</span><br><span class="line">Output: [1,4,2,5,3,8,6,9,7,10,11]</span><br></pre></td></tr></table></figure>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 105</code></li>
<li><code>1 &lt;= nums[i].length &lt;= 105</code></li>
<li><code>1 &lt;= sum(nums[i].length) &lt;= 105</code></li>
<li><code>1 &lt;= nums[i][j] &lt;= 105</code></li>
</ul>
</blockquote>
<h1 id="Approach">Approach</h1>
<p>For a natural number $k \in \mathbb{N}$, the coordinates of the elements on the $(k + 1)$-th diagonal are given by $\set{(i,j) | i + j = k}$. For example, when $k = 2$, the coordinates of the elements on the 3rd diagonal are $\set{(0,2),(1,1),(2,0)}$.</p>
<p>If <code>nums</code> were a matrix, this problem would be a simple simulation problem, just traversing it diagonally.</p>
<p>However, given that the number of rows $m \le 10^5$ and columns $n \le 10^5$, a time complexity of $O(mn)$ would be too slow. Therefore, we should not treat <code>nums</code> as a matrix for traversal to avoid accessing many empty cells.</p>
<p>Let’s observe example 1:</p>
<p><img src="./MDImgs/Algorithm-Problem-003-diagonal-traverse-ii/image-20231029115351760.png" alt="image-20231029115351760"></p>
<p>Observation1️⃣: For any $k \in \mathbb{N}$, the elements on the $(k + 1)$-th diagonal are traversed from bottom-left to top-right, i.e., $(k, 0), (k - 1,1),\cdots,(0,k)$. Therefore, if we want to obtain the elements on the $(k + 1)$-th diagonal, we should traverse each element in the corresponding rows of <code>nums</code> <strong>in reverse order</strong>.</p>
<p>Observation2️⃣: It is evident that for each row <code>nums[j]</code> in <code>nums</code>, the elements in this row belong to different diagonals, making them <strong>independent of each other</strong>.</p>
<p>Observation3️⃣: When <strong>traversing in reverse order</strong>:</p>
<ul>
<li>For the <strong>last row</strong> with elements $12,13,14,15,16$, they are the <strong>first</strong> elements on their respective diagonals, even though the diagonals that $13,14,15,16$ belong to do not have elements in the first column.</li>
<li>For the <strong>second-to-last row</strong> with elements $9,10,11$, they are the <strong>next</strong> elements to be traversed on their respective diagonals.</li>
<li>This pattern continues…</li>
</ul>
<p>Our goal is to collect all elements from <code>nums</code> diagonally. To achieve this, we can first create a list for each diagonal and add the corresponding elements to that list. Then, we traverse these lists in order to obtain the final result. If we follow this approach, we need to create a total of <code>m + n - 1</code> lists.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> nums.size();</span><br><span class="line"><span class="comment">// n is the maximum number of columns</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.stream().mapToInt(List::size).max().getAsInt();</span><br><span class="line"><span class="comment">// ans stores m + n - 1 lists, representing elements traversed on different diagonals</span></span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">IntStream.range(<span class="number">0</span>, m + n - <span class="number">1</span>).forEach(i -&gt; ans.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;()));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Key problem: How to traverse??</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Traverse nums in forward order for each row</span></span><br><span class="line"><span class="keyword">return</span> ans.stream().flatMap(l -&gt; l.stream()).mapToInt(i -&gt; i).toArray();</span><br></pre></td></tr></table></figure>
<p>So, how do we traverse? To avoid timeout, we need to traverse row by row.</p>
<ul>
<li>According to ‘Observation 1️⃣’, traverse <code>nums</code> in reverse order.</li>
<li>According to ‘Observation 2️⃣’, for each row, for each traversed element <code>nums[i][j]</code>, put it into the $(i + j + 1)$-th list.</li>
<li>According to ‘Observation 3️⃣’, append the element <code>nums[i][j]</code> to the corresponding list. This is because the previous $n - i - 1$ rows ($n -1, n - 2 , \cdots, i + 1$) have already been traversed for the diagonal, and their elements are already stored in the list in the same order —— we can prove this using recursion or mathematical induction.</li>
</ul>
<p>The code is straightforward:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Traverse nums in reverse</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> m - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    List&lt;Integer&gt; row = nums.get(i);</span><br><span class="line">    <span class="comment">// For each element nums[i][j], put it into the (i + j + 1)-th list</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; row.size(); j++) &#123;</span><br><span class="line">        ans.get(i + j).add(row.get(j));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The time complexity is $O(m + n + \text{(# elements in nums)})$.</p>
<p>The space complexity is $O(m + n)$.</p>
<h1 id="Code">Code</h1>
<h2 id="Java">Java</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] findDiagonalOrder(List&lt;List&lt;Integer&gt;&gt; nums) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> nums.size();</span><br><span class="line">        <span class="comment">// n is the maximum number of columns</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.stream().mapToInt(List::size).max().getAsInt();</span><br><span class="line">        <span class="comment">// ans stores m + n - 1 lists, representing elements traversed on different diagonals</span></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        IntStream.range(<span class="number">0</span>, m + n - <span class="number">1</span>).forEach(i -&gt; ans.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Traverse nums in reverse</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> m - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            List&lt;Integer&gt; row = nums.get(i);</span><br><span class="line">            <span class="comment">// For each element nums[i][j], put it into the (i + j + 1)-th list</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; row.size(); j++) &#123;</span><br><span class="line">                ans.get(i + j).add(row.get(j));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Traverse nums in forward order for each row</span></span><br><span class="line">        <span class="keyword">return</span> ans.stream().flatMap(l -&gt; l.stream()).mapToInt(i -&gt; i).toArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm Problems</category>
      </categories>
      <tags>
        <tag>Simulation</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Problem 004: Maximum Employees to Be Invited to a Meeting</title>
    <url>/en/2023/11/01/Algorithm-Problem-004-maximum-employees-to-be-invited-to-a-meeting/</url>
    <content><![CDATA[<h1 id="Problem">Problem</h1>
<blockquote>
<p>Source: <a href="https://leetcode.cn/problems/maximum-employees-to-be-invited-to-a-meeting/">2127. Maximum Employees to Be Invited to a Meeting</a> (Daily Problem)</p>
</blockquote>
<p>A company is organizing a meeting and has a list of <code>n</code> employees, waiting to be invited. They have arranged for a large <strong>circular</strong> table, capable of seating <strong>any number</strong> of employees.</p>
<p>The employees are numbered from <code>0</code> to <code>n - 1</code>. Each employee has a <strong>favorite</strong> person and they will attend the meeting <strong>only if</strong> they can sit next to their favorite person at the table. The favorite person of an employee is <strong>not</strong> themselves.</p>
<p>Given a <strong>0-indexed</strong> integer array <code>favorite</code>, where <code>favorite[i]</code> denotes the favorite person of the <code>ith</code> employee, return <em>the <strong>maximum number of employees</strong> that can be invited to the meeting</em>.</p>
<h2 id="Example-1">Example 1</h2>
<blockquote>
<p>Input: favorite = [2,2,1,2]
Output: 3</p>
</blockquote>
<p><img src="./MDImgs/Algorithm-Problem-004-maximum-employees-to-be-invited-to-a-meeting/image-20231101114926490.png" alt="image-20231101114926490" style="zoom:65%;" /><img src="./MDImgs/Algorithm-Problem-004-maximum-employees-to-be-invited-to-a-meeting/image-20231101125447756-16988146128191.png" alt="image-20231101125447756" style="zoom:35%;" /></p>
<span id="more"></span>
<h2 id="Example-2">Example 2</h2>
<blockquote>
<p>Input: favorite = [1,2,0]
Output: 3</p>
</blockquote>
<p><img src="./MDImgs/Algorithm-Problem-004-maximum-employees-to-be-invited-to-a-meeting/image-20231101115048286.png" alt="image-20231101115048286"></p>
<h2 id="Example-3">Example 3</h2>
<blockquote>
<p>Input: favorite = [3,0,1,4,1]
Output: 4</p>
</blockquote>
<p><img src="./MDImgs/Algorithm-Problem-004-maximum-employees-to-be-invited-to-a-meeting/image-20231101115200232.png" alt="image-20231101115200232" style="zoom:65%;" /><img src="./MDImgs/Algorithm-Problem-004-maximum-employees-to-be-invited-to-a-meeting/image-20231101125539019.png" alt="image-20231101125539019" style="zoom:33%;" /></p>
<h1 id="Approach">Approach</h1>
<p>By the definition of <code>favorite</code>, if we consider each employee as a node pointing to their favorite employee, we form a <strong>directed cyclic graph</strong> with <code>n</code> edges, <code>n</code> nodes, and each node having an out-degree of 1.</p>
<p>Observing Examples 2 and 3, the employees attending the circular table meeting must form a cycle. This is because each node has an out-degree of 1, and an employee must sit next to his favorite employee. Therefore, the maximum number of employees attending the meeting is equal to the <strong>length of the longest cycle</strong> (Conclusion 1️⃣).</p>
<p>Conclusion 1️⃣ can also be argued in reverse:</p>
<p>In Example 3, node 2 cannot attend the meeting because inserting this employee at any position on the circular table breaks the existing cycle. For instance, if we insert 2 between 0 and 1, then the neighbors of 1 become 2 and 4, neither of which is the favorite employee, violating the conditions.</p>
<p>Hence, the graph formed by employees able to attend the meeting must be a cycle, and there cannot be any other node chains (linked lists) pointing to a node within the cycle.</p>
<p>As shown in the diagram below, the answer is $\set{0,1,2,3}$ and it cannot include $\set{7,8}$ and $\set{4,5,6}$.</p>
<img src="./MDImgs/Algorithm-Problem-004-maximum-employees-to-be-invited-to-a-meeting/image-20231101132810263.png" alt="image-20231101132810263" style="zoom: 50%;" />
<p><strong>However</strong>, for <strong>cycles of length 2</strong> (two nodes pointing to each other), as long as the two employees sit together, the cycle cannot be broken. Therefore, cycles of length 2 need to be <strong>specially handled</strong>. In Example 1, nodes 1 and 2 form a cycle, and in this case, an additional employee can be added to the circular table.</p>
<p>Observing the following example:</p>
<img src="./MDImgs/Algorithm-Problem-004-maximum-employees-to-be-invited-to-a-meeting/image-20231101133700388.png" alt="image-20231101133700388" style="zoom:50%;" />
<p>Nodes 0 and 1 form a cycle of length 2, and the node chain $(3,2)$ points to 0, while the node chain $(5,4),(6)$ points to 1. The employees on the circular table in order should be $3,2,0,1,4,5$. That is, <strong>for every node in the cycle (2 nodes in total), add its longest node chain to the result set</strong> (Conclusion 2️⃣). Therefore, we choose $(5,4)$ instead of $(6)$.</p>
<p>Note that the graph may have multiple connected components. We need to adjust the two conclusions above:</p>
<ul>
<li>For cycles of length greater than 2, the entire circular table must belong to the nodes within the cycle, and no other nodes are allowed. Therefore, when there are multiple cycles, choose the one with the maximum length as the result.</li>
<li>For cycles of length 2, the condition that each employee ‘will attend the meeting only if they can sit next to their favorite person at the table’ is satisfied by the cycle itself, not by occupying the entire circular table. Therefore, <strong>the final result is the union of all result sets satisfying ‘Conclusion 2️⃣’</strong>. If employees in one result set sit together, then <strong>all result sets can coexist</strong>.</li>
</ul>
<p>Observing the example below, the answer is three cycles of length 2 and their extended node chains, totaling 8 nodes. The remaining connected component is a cycle of length 4.</p>
<img src="./MDImgs/Algorithm-Problem-004-maximum-employees-to-be-invited-to-a-meeting/image-20231101134045195.png" alt="image-20231101134045195" style="zoom: 50%;" />
<h1 id="Code">Code</h1>
<p>Based on the conclusions we drew earlier, the following information needs to be calculated in the code:</p>
<ul>
<li>The lengths of various cycles</li>
<li>The maximum length of the node chain for every node in cycles of length 2</li>
</ul>
<h2 id="How-to-Find-Cycles-in-the-Graph">How to Find Cycles in the Graph?</h2>
<p>Use topological sorting. Since this is a directed graph with <strong>$n$ edges, $n$ nodes, and each node’s out-degree is 1</strong>, nodes that cannot be visited during topological sorting must be part of a cycle.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> favorite.length;</span><br><span class="line"><span class="type">int</span>[] inDegree = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">ArrayDeque&lt;Integer&gt; que = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"><span class="type">boolean</span>[] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    inDegree[favorite[i]]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (inDegree[i] == <span class="number">0</span>) &#123;</span><br><span class="line">        que.add(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!que.isEmpty()) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> que.pollFirst();</span><br><span class="line">    visited[cur] = <span class="literal">true</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">next</span> <span class="operator">=</span> favorite[cur];</span><br><span class="line"></span><br><span class="line">    inDegree[next]--;</span><br><span class="line">    <span class="keyword">if</span> (inDegree[next] == <span class="number">0</span>) &#123;</span><br><span class="line">        que.addLast(next);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// At this point, all non-cycle nodes have been traversed and marked as visited</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">maxCircleSize</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (visited[i]) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="comment">// circle collects all nodes in the current cycle</span></span><br><span class="line">    ArrayList&lt;Integer&gt; circle = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> i;</span><br><span class="line">    <span class="keyword">while</span> (!visited[cur]) &#123;</span><br><span class="line">        circle.add(cur);</span><br><span class="line">        visited[cur] = <span class="literal">true</span>;</span><br><span class="line">        cur = favorite[cur];</span><br><span class="line">    &#125;</span><br><span class="line">    maxCircleSize = Math.max(maxCircleSize, circle.size());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="How-to-Count-Node-Chains">How to Count Node Chains?</h2>
<p>Node chains are single-linked lists that do not belong to a cycle. The list starts from a node with an in-degree of 0 and points to a node within a cycle. We can define a <code>pathLen</code> array,
where <code>pathLen[i]</code> represents <strong>the length of the longest node chain pointing to node <code>i</code></strong>.</p>
<p>Since topological sorting continuously traverses nodes with a current in-degree of 0, if node a points to b, then a will be visited first. If the node chain for a is already calculated, we can easily calculate the node chain for b:</p>
<p>$pathLen[b] = \max\limits_{(a,b)\in E}\set{1 + pathLen[a]}$</p>
<p>Therefore, we can calculate <code>pathLen</code> during topological sorting:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Initialized to 0</span></span><br><span class="line"><span class="type">int</span>[] pathLen = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line"></span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!que.isEmpty()) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> que.pollFirst();</span><br><span class="line">    visited[cur] = <span class="literal">true</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">next</span> <span class="operator">=</span> favorite[cur];</span><br><span class="line">    <span class="comment">// Update pathLen here</span></span><br><span class="line">    pathLen[next] = Math.max(pathLen[next], pathLen[cur] + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    inDegree[next]--;</span><br><span class="line">    <span class="keyword">if</span> (inDegree[next] == <span class="number">0</span>) &#123;</span><br><span class="line">        que.addLast(next);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Final-Code">Final Code</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayDeque;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumInvitations</span><span class="params">(<span class="type">int</span>[] favorite)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> favorite.length;</span><br><span class="line">        <span class="type">int</span>[] inDegree = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="type">int</span>[] pathLen = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        ArrayDeque&lt;Integer&gt; que = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="type">boolean</span>[] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Topological sorting</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            inDegree[favorite[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (inDegree[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                que.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!que.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> que.pollFirst();</span><br><span class="line">            visited[cur] = <span class="literal">true</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">next</span> <span class="operator">=</span> favorite[cur];</span><br><span class="line">            pathLen[next] = Math.max(pathLen[next], pathLen[cur] + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            inDegree[next]--;</span><br><span class="line">            <span class="keyword">if</span> (inDegree[next] == <span class="number">0</span>) &#123;</span><br><span class="line">                que.addLast(next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Topological sorting is complete, </span></span><br><span class="line">        <span class="comment">// all non-cycle nodes have been traversed and marked as visited</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Maximum cycle length</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxCircleLength</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// The size of the union of all result sets satisfying &#x27;Conclusion 2️⃣&#x27;</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">twoCirclePath</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start finding cycles</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (visited[i]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// circle collects all nodes in the current cycle</span></span><br><span class="line">            ArrayList&lt;Integer&gt; circle = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">while</span> (!visited[cur]) &#123;</span><br><span class="line">                circle.add(cur);</span><br><span class="line">                visited[cur] = <span class="literal">true</span>;</span><br><span class="line">                cur = favorite[cur];</span><br><span class="line">            &#125;</span><br><span class="line">            maxCircleLength = Math.max(maxCircleLength, circle.size());</span><br><span class="line">            <span class="keyword">if</span> (circle.size() == <span class="number">2</span>) &#123;</span><br><span class="line">                twoCirclePath += pathLen[circle.get(<span class="number">0</span>)] + pathLen[circle.get(<span class="number">1</span>)] + <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(maxCircleLength, twoCirclePath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm Problems</category>
      </categories>
      <tags>
        <tag>Graph</tag>
        <tag>Topological Sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Problem 005: Maximum Balanced Subsequence Sum</title>
    <url>/en/2023/11/06/Algorithm-Problem-005-maximum-balanced-subsequence-sum/</url>
    <content><![CDATA[<h1 id="Problem">Problem</h1>
<blockquote>
<p>Problem Source: <a href="https://leetcode.cn/problems/maximum-balanced-subsequence-sum/">2926. Maximum Balanced Subsequence Sum</a></p>
<p>This article is an analysis of the solution to the last problem in <a href="/en/2023/11/05/leetcode-370-weekly-contest-summary/">LeetCode Weekly Contest 370</a>, which I failed to solve. The solution refers to <a href="https://leetcode.cn/problems/maximum-balanced-subsequence-sum/solutions/2513121/shu-zhuang-shu-zu-you-hua-dp-by-endlessc-3zf4/">the article by endlesscheng</a>。</p>
</blockquote>
<span id="more"></span>
<blockquote>
<p><strong>Problem Description:</strong></p>
<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code>.</p>
<p>A <strong>subsequence</strong> of <code>nums</code> having length <code>k</code> and consisting of <strong>indices</strong> <code>i0 &lt; i1 &lt; ... &lt; ik-1</code> is <strong>balanced</strong> if the following holds:</p>
<ul>
<li><code>nums[ij] - nums[ij-1] &gt;= ij - ij-1</code>, for every <code>j</code> in the range <code>[1, k - 1]</code>.</li>
</ul>
<p>A <strong>subsequence</strong> of <code>nums</code> having length <code>1</code> is considered balanced.</p>
<p>Return <em>an integer denoting the <strong>maximum</strong> possible <strong>sum of elements</strong> in a <strong>balanced</strong> subsequence of</em> <code>nums</code>.</p>
<p>A <strong>subsequence</strong> of an array is a new <strong>non-empty</strong> array that is formed from the original array by deleting some (<strong>possibly none</strong>) of the elements without disturbing the relative positions of the remaining elements.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [3,3,5,6]</span><br><span class="line">Output: 14</span><br><span class="line">Explanation: In this example, the subsequence [3,5,6] consisting of indices 0, 2, and 3 can be selected.</span><br><span class="line">nums[2] - nums[0] &gt;= 2 - 0.</span><br><span class="line">nums[3] - nums[2] &gt;= 3 - 2.</span><br><span class="line">Hence, it is a balanced subsequence, and its sum is the maximum among the balanced subsequences of nums.</span><br><span class="line">The subsequence consisting of indices 1, 2, and 3 is also valid.</span><br><span class="line">It can be shown that it is not possible to get a balanced subsequence with a sum greater than 14.</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [5,-1,-3,8]</span><br><span class="line">Output: 13</span><br><span class="line">Explanation: In this example, the subsequence [5,8] consisting of indices 0 and 3 can be selected.</span><br><span class="line">nums[3] - nums[0] &gt;= 3 - 0.</span><br><span class="line">Hence, it is a balanced subsequence, and its sum is the maximum among the balanced subsequences of nums.</span><br><span class="line">It can be shown that it is not possible to get a balanced subsequence with a sum greater than 13.</span><br></pre></td></tr></table></figure>
<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [-2,-1]</span><br><span class="line">Output: -1</span><br><span class="line">Explanation: In this example, the subsequence [-1] can be selected.</span><br><span class="line">It is a balanced subsequence, and its sum is the maximum among the balanced subsequences of nums.</span><br></pre></td></tr></table></figure>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 105</code></li>
<li><code>-109 &lt;= nums[i] &lt;= 109</code></li>
</ul>
</blockquote>
<h1 id="Approach">Approach</h1>
<h2 id="DP">DP</h2>
<p>Let’s change the formulation of the problem: consecutive elements <code>nums[i]</code> and <code>nums[j]</code> in a balanced subsequence must satisfy $i &lt; j$ and $nums[j] - nums[i] \ge j - i$.</p>
<p>By rearranging the inequality above, we get $nums[j] - j \ge nums[i] - i$.</p>
<p>Let $b[i] = nums[i] - i$, then the requirement for each element in a balanced subsequence only depends on its own value and index, not those of other elements.</p>
<p>Therefore, this problem is similar to the Longest Increasing Subsequence, and we can solve it using DP:</p>
<p>DP Definition: <code>dp[j]</code> represents the maximum sum of elements in a <strong>balanced</strong> subsequence ending at <code>nums[j]</code>.</p>
<p>Recurrence relation: $dp[j] = nums[j] + \max\set{dp[i] | (i &lt; j) ∧ (b[j] \ge b[i])}$</p>
<p>Code：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">maxBalancedSubsequenceSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="comment">// b[i] = nums[i] - i</span></span><br><span class="line">        <span class="type">int</span>[] b = IntStream.range(<span class="number">0</span>, n).map(i -&gt; nums[i] - i).toArray();</span><br><span class="line">        <span class="comment">// dp[i]: maximum sum of elements in a subsequence ending at nums[i]</span></span><br><span class="line">        <span class="type">long</span>[] dp = <span class="keyword">new</span> <span class="title class_">long</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            dp[j] = nums[j];</span><br><span class="line">            <span class="type">long</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; j; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (b[j] &gt;= b[i])</span><br><span class="line">                    max = Math.max(max, dp[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            dp[j] += max;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Arrays.stream(dp).max().getAsLong();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Clearly, the time complexity of the above code is $O(n^2)$ due to the nested loops, and it is likely to time out. How can we improve?</p>
<h2 id="Binary-Indexed-Tree-BIT">Binary Indexed Tree (BIT)</h2>
<p>Based on the recurrence relation above, our code logic should be as follows:</p>
<ul>
<li>For each $j$,</li>
<li>Traverse the interval $[0, j)$ and find the index $i$ that satisfies $b[j] \ge b[i]$ and maximizes $dp[i]$, which is a range query for the maximum value.</li>
<li>Set $dp[j] = nums[j] + dp[i]$, which is a point update.</li>
</ul>
<p>We need the time complexity of “range query” + “point update” to be strictly less than $O(n)$ to avoid time-outs. The Binary Indexed Tree (BIT) fits this requirement.</p>
<blockquote>
<p>Initially, I thought BIT was only suitable for range sum queries (for optimizing difference arrays), but this problem shows that range queries can also extend to minimum and maximum values.</p>
</blockquote>
<p>The values stored in the BIT are key-value pairs <code>&lt;b[j], dp[j]&gt;</code>, where <code>b[j]</code> is the index and <code>dp[j]</code> is the array element. To query the maximum value of elements whose indices $\le b[j]$, we are essentially querying the maximum value of a prefix interval.</p>
<p>Code:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">BIT</span> &#123;</span><br><span class="line">        <span class="type">long</span>[] arr;</span><br><span class="line">        <span class="type">int</span> offset;</span><br><span class="line"></span><br><span class="line">        BIT(<span class="type">int</span> min, <span class="type">int</span> max) &#123;</span><br><span class="line">            <span class="comment">// Move the interval [min, max] to start from 0</span></span><br><span class="line">            offset = -min;</span><br><span class="line">            <span class="comment">// Leave index 0 of BIT empty, so the interval starts from 1</span></span><br><span class="line">            offset++;</span><br><span class="line">            arr = <span class="keyword">new</span> <span class="title class_">long</span>[max - min + <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="title function_">lsb</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> i &amp; -i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">setMax</span><span class="params">(<span class="type">int</span> i, <span class="type">long</span> val)</span> &#123;</span><br><span class="line">            i += offset;</span><br><span class="line">            <span class="comment">// Index i affects all subsequent intervals, so we add lsb</span></span><br><span class="line">            <span class="keyword">for</span> (; i &lt; arr.length; i += lsb(i)) &#123;</span><br><span class="line">                arr[i] = Math.max(arr[i], val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="title function_">getMax</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">            i += offset;</span><br><span class="line">            <span class="type">long</span> <span class="variable">ans</span> <span class="operator">=</span> Long.MIN_VALUE;</span><br><span class="line">            <span class="comment">// Prefix interval, so we subtract lsb</span></span><br><span class="line">            <span class="keyword">for</span> (; i &gt; <span class="number">0</span>; i -= lsb(i)) &#123;</span><br><span class="line">                ans = Math.max(ans, arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">maxBalancedSubsequenceSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="comment">// b[i] = nums[i] - i</span></span><br><span class="line">        <span class="type">int</span>[] b = IntStream.range(<span class="number">0</span>, n).map(i -&gt; nums[i] - i).toArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Arrays.stream(b).max().getAsInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Arrays.stream(b).min().getAsInt();</span><br><span class="line">        <span class="comment">// Customize the size of BIT#arr based on the range of elements in b</span></span><br><span class="line">        <span class="type">BIT</span> <span class="variable">tree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BIT</span>(min, max);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">ans</span> <span class="operator">=</span> Long.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="comment">// Range query for the maximum value</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">dp_i</span> <span class="operator">=</span> Math.max(tree.getMax(b[j]), <span class="number">0</span>);</span><br><span class="line">            <span class="comment">// Point update</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">dp_j</span> <span class="operator">=</span> dp_i + nums[j];</span><br><span class="line">            tree.setMax(b[j], dp_j);</span><br><span class="line"></span><br><span class="line">            ans = Math.max(ans, dp_j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Submit this code:</p>
<p><img src="./MDImgs/Algorithm-Problem-005-maximum-balanced-subsequence-sum/image-20231106113338051.png" alt="image-20231106113338051"></p>
<p>We got an OOM.</p>
<p>Note the data range of the problem: $n \le 10^5$ ，$nums[i] \in[-10^9,10^9]$</p>
<p>Therefore, the range of values for <code>b[i]</code> is approximately equal to the range of 32-bit integers, i.e., $2^{32}$, which will result in an Out Of Memory (OOM) error when creating <code>BIT#arr</code>. How can we optimize the space?</p>
<h2 id="Discretization">Discretization</h2>
<blockquote>
<p>Reference to <a href="https://oi-wiki.org/misc/discrete/">OI-wiki</a>:</p>
<p>Discretization is a data processing technique, essentially a form of hashing, that ensures that data remains in its original full/partial order after hashing.</p>
<p>In simple terms, when <strong>some data</strong> is too large or of a type that <strong>does not support using it as an array index</strong> conveniently, and <strong>only the relative size relationship</strong> between elements <strong>affects the final result</strong>, we can process the problem by treating the data <strong>based on their ranking</strong>, i.e., discretization.</p>
</blockquote>
<p>Let’s combine the concept with the problem:</p>
<ul>
<li>We want to query the maximum value of all indices $\le b[j]$ —— there are $2^{32}$ possible values for <code>b[j]</code>.</li>
<li>However, the array <code>b</code> only has <code>n</code> elements.</li>
<li>Assume that <code>b[j]</code> is the $k$-th smallest element after sorting; then, we only need to query the maximum value among the first $k - 1$ elements smaller than <code>b[j]</code>.</li>
<li>Therefore, the length of <code>BIT#arr</code> is also <code>n</code>, and $n \ll 2^{32}$.</li>
<li>If we know the index <code>k</code> where <code>b[j]</code> is located after sorting, the operation ‘query the maximum value of all indices less than or equal to <code>b[j]</code>’ is equivalent to <code>getMax(k)</code>.</li>
</ul>
<blockquote>
<p>In terms of effects, ‘Discretization’ should probably be called ‘Normalization’? 🤔</p>
</blockquote>
<p>The process of discretization is a typical template. Just memorize it:</p>
<blockquote>
<ol>
<li>Create a copy of the original array.</li>
<li>Sort the values in the copy in ascending order.</li>
<li>Remove duplicates from the sorted copy.</li>
<li>Find the position of each element in the original array in the sorted copy. This position becomes the ranking, and it is used as the discretized value.</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> ans[i] indicates the ranking of b[i] after sorting</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span>[] discretize(<span class="type">int</span>[] b) &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = Arrays.stream(b).sorted().distinct().toArray();</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> b.length;</span><br><span class="line">    <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="comment">// b[i] must exist in arr</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">order</span> <span class="operator">=</span> Arrays.binarySearch(arr, b[i]);</span><br><span class="line">        <span class="comment">// ans[i] &gt;= 1 because index 0 of BIT must be left empty. In fact, you don&#x27;t need to add 1.</span></span><br><span class="line">        ans[i] = order + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If not removing duplicates, we use <code>std::lower_bound</code> instead of <code>std::binary_search</code> in C++. However, Java does not have such a function, so we must remove duplicates.</p>
<h1 id="Code">Code</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">BIT</span> &#123;</span><br><span class="line">        <span class="type">long</span>[] arr;</span><br><span class="line"></span><br><span class="line">        BIT(<span class="type">int</span> n) &#123;</span><br><span class="line">            arr = <span class="keyword">new</span> <span class="title class_">long</span>[n + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="title function_">lsb</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> i &amp; -i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">setMax</span><span class="params">(<span class="type">int</span> i, <span class="type">long</span> val)</span> &#123;</span><br><span class="line">            <span class="comment">// Index i affects all subsequent intervals, so we add lsb</span></span><br><span class="line">            <span class="keyword">for</span> (; i &lt; arr.length; i += lsb(i)) &#123;</span><br><span class="line">                arr[i] = Math.max(arr[i], val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="title function_">getMax</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">ans</span> <span class="operator">=</span> Long.MIN_VALUE;</span><br><span class="line">            <span class="comment">// Prefix interval, so we subtract lsb</span></span><br><span class="line">            <span class="keyword">for</span> (; i &gt; <span class="number">0</span>; i -= lsb(i)) &#123;</span><br><span class="line">                ans = Math.max(ans, arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ans[i] indicates the ranking of b[i] after sorting</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] discretize(<span class="type">int</span>[] b) &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = Arrays.stream(b).sorted().distinct().toArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> b.length;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">// b[i] must exist in arr</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">order</span> <span class="operator">=</span> Arrays.binarySearch(arr, b[i]);</span><br><span class="line">            <span class="comment">// ans[i] &gt;= 1 because index 0 of BIT must be left empty. In fact, you don&#x27;t need to add 1.</span></span><br><span class="line">            ans[i] = order + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">maxBalancedSubsequenceSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="comment">// b[i] = nums[i] - i</span></span><br><span class="line">        <span class="type">int</span>[] b = IntStream.range(<span class="number">0</span>, n).map(i -&gt; nums[i] - i).toArray();</span><br><span class="line">        <span class="comment">// Discretization</span></span><br><span class="line">        <span class="type">int</span>[] arr = discretize(b);</span><br><span class="line">        <span class="type">BIT</span> <span class="variable">tree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BIT</span>(n + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">ans</span> <span class="operator">=</span> Long.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="comment">// b[j] is the k-th smallest element</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> arr[j];</span><br><span class="line">            <span class="comment">// Range query for the maximum value</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">dp_i</span> <span class="operator">=</span> Math.max(tree.getMax(k), <span class="number">0</span>);</span><br><span class="line">            <span class="comment">// Point update</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">dp_j</span> <span class="operator">=</span> dp_i + nums[j];</span><br><span class="line">            tree.setMax(k, dp_j);</span><br><span class="line"></span><br><span class="line">            ans = Math.max(ans, dp_j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="References">References</h1>
<ul>
<li><a href="https://leetcode.cn/problems/maximum-balanced-subsequence-sum/solutions/2513121/shu-zhuang-shu-zu-you-hua-dp-by-endlessc-3zf4/">Optimizing DP with BIT（Python/Java/C++/Go）</a></li>
<li><a href="https://oi-wiki.org/misc/discrete/">Discretization - OI Wiki</a></li>
</ul>
]]></content>
      <categories>
        <category>Algorithm Problems</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>BIT</tag>
        <tag>Discretization</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Problem 006: Construct Binary Tree from Preorder and Postorder Traversal</title>
    <url>/en/2024/02/22/Algorithm-Problem-006-construct-binary-tree-from-preorder-and-postorder-traversal/</url>
    <content><![CDATA[<h1 id="Problem">Problem</h1>
<blockquote>
<p>Problem Source：<a href="https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-postorder-traversal">889. Construct Binary Tree from Preorder and Postorder Traversal</a>(Daily Challenge)</p>
</blockquote>
<blockquote>
<p><strong>Problem Description</strong>：</p>
<p>Given two integer arrays, <code>preorder</code> and <code>postorder</code> where <code>preorder</code> is the preorder traversal of a binary tree of <strong>distinct</strong> values and <code>postorder</code> is the postorder traversal of the same tree, reconstruct and return <em>the binary tree</em>.</p>
<p>If there exist multiple answers, you can <strong>return any</strong> of them.</p>
</blockquote>
<span id="more"></span>
<blockquote>
<p><strong>Example 1:</strong></p>
<p><img src="./MDImgs/Algorithm-Problem-006-construct-binary-tree-from-preorder-and-postorder-traversal/lc-prepost.jpg" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: preorder = [1,2,4,5,3,6,7], postorder = [4,5,2,6,7,3,1]</span><br><span class="line">Output: [1,2,3,4,5,6,7]</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: preorder = [1], postorder = [1]</span><br><span class="line">Output: [1]</span><br></pre></td></tr></table></figure>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= preorder.length &lt;= 30</code></li>
<li><code>1 &lt;= preorder[i] &lt;= preorder.length</code></li>
<li>All the values of <code>preorder</code> are <strong>unique</strong>.</li>
<li><code>postorder.length == preorder.length</code></li>
<li><code>1 &lt;= postorder[i] &lt;= postorder.length</code></li>
<li>All the values of <code>postorder</code> are <strong>unique</strong>.</li>
<li>It is guaranteed that <code>preorder</code> and <code>postorder</code> are the preorder traversal and postorder traversal of the same binary tree.</li>
</ul>
</blockquote>
<h1 id="Approach">Approach</h1>
<p>Firstly, it is important to note that <strong>the binary tree constructed from preorder and postorder traversals is not unique</strong>, and therefore, there is no deterministic rule. In contrast, ‘inorder and preorder’ as well as ‘inorder and postorder’ correspond uniquely to a binary tree. These rules are clear, making coding straightforward. Hence, we need to define our own rules.</p>
<p>Recall that when constructing a binary tree from ‘inorder and preorder’, we sequentially traverse the preorder list. For each value, we create a corresponding node and then determine its subtree based on the inorder traversal. This can be understood as creating the preorder and verifying with the inorder.</p>
<p>Similarly, in this problem, we also ‘sequentially traverse the preorder list, creating a corresponding node’ but determine the <strong>position of the node</strong> (instead of its subtree) based on the postorder traversal. This is creating the preorder and verifying with the postorder.</p>
<p>In preorder, the sequence is “root - left - right”, and for each node in preorder, we can try placing it as the left child. In postorder, the sequence is “left - right - root”. <strong>If a node A in postorder is after node B, then A cannot be in the left subtree of B.</strong></p>
<p>For example, consider node <code>5</code> in Example 1. While sequentially traversing the preorder list, we can try placing <code>5</code> as the left child of <code>4</code>. However, in the postorder list, since <code>5</code> comes after <code>4</code>, this attempt is not allowed. <strong><code>5</code> can only be in the right subtree of one of the ancestors of <code>4</code></strong>, in this case, the right child of <code>2</code>.</p>
<p>Therefore, we need to keep track of the <strong>path from the root to the last traversed node</strong> and store them in a stack.</p>
<ul>
<li>As long as the current node and the top node of the stack do not satisfy the postorder constraint mentioned above, we pop the stack until it is satisfied. At this point, the current node becomes the right child of the top node.</li>
<li>If the constraint is already satisfied, the current node directly becomes the left child of the top node.</li>
</ul>
<h1 id="Code">Code</h1>
<p>The above approach is a rough description, and we should pay attention to details.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">constructFromPrePost</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; preorder, vector&lt;<span class="type">int</span>&gt;&amp; postorder)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = preorder.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">// Only operate on the vector&#x27;s tail, equivalent to a stack</span></span><br><span class="line">        vector&lt;TreeNode*&gt; ve;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line">        <span class="comment">// Just like &#x27;inorder and preorder&#x27;, store &lt;element, index&gt; in the hash table for validation</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            mp[postorder[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> v: preorder) &#123;</span><br><span class="line">            TreeNode* cur = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(v);</span><br><span class="line">            <span class="comment">// Only the first element (root) will trigger this condition</span></span><br><span class="line">            <span class="keyword">if</span> (ve.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                ve.<span class="built_in">push_back</span>(cur);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">bool</span> popped = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">while</span>((!ve.<span class="built_in">empty</span>()) &amp;&amp; (mp[v] &gt; mp[ve.<span class="built_in">back</span>()-&gt;val])) &#123;</span><br><span class="line">                ve.<span class="built_in">pop_back</span>();</span><br><span class="line">                popped = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!popped) &#123;</span><br><span class="line">                ve.<span class="built_in">back</span>()-&gt;left = cur;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ve.<span class="built_in">back</span>()-&gt;right = cur;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Store the current node for the validation of the next node</span></span><br><span class="line">            ve.<span class="built_in">push_back</span>(cur);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// The first node is always the root node and will never be popped</span></span><br><span class="line">        <span class="keyword">return</span> ve.<span class="built_in">front</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>Time Complexity: $O(n)$</p>
<ul>
<li>Sequentially traverse <code>preorder</code> and <code>postorder</code>.</li>
<li>Each node enters and exits <code>ve</code> only once.</li>
</ul>
<p>Space Complexity: $O(n)$</p>
<ul>
<li><code>mp</code> stores the values and their indices of all $n$ nodes.</li>
<li>In the worst case, all nodes are in <code>ve</code>.</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm Problems</category>
      </categories>
      <tags>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Problem 007: Substring with Concatenation of All Words</title>
    <url>/en/2025/01/15/Algorithm-Problem-007-substring-with-concatenation-of-all-words/</url>
    <content><![CDATA[<h1 id="Problem">Problem</h1>
<blockquote>
<p>Problem Source: <a href="https://leetcode.cn/problems/substring-with-concatenation-of-all-words/">30. Substring with Concatenation of All Words</a></p>
</blockquote>
<blockquote>
<p><strong>Problem Description:</strong></p>
<p>You are given a string <code>s</code> and an array of strings <code>words</code>. All the strings of <code>words</code> are of <strong>the same length</strong>.</p>
<p>A <strong>concatenated string</strong> is a string that exactly contains all the strings of any permutation of <code>words</code> concatenated.</p>
<ul>
<li>For example, if <code>words = [&quot;ab&quot;,&quot;cd&quot;,&quot;ef&quot;]</code>, then <code>&quot;abcdef&quot;</code>, <code>&quot;abefcd&quot;</code>, <code>&quot;cdabef&quot;</code>, <code>&quot;cdefab&quot;</code>, <code>&quot;efabcd&quot;</code>, and <code>&quot;efcdab&quot;</code> are all concatenated strings. <code>&quot;acdbef&quot;</code> is not a concatenated string because it is not the concatenation of any permutation of <code>words</code>.</li>
</ul>
<p>Return an array of <em>the starting indices</em> of all the concatenated substrings in <code>s</code>. You can return the answer in <strong>any order</strong>.</p>
</blockquote>
<span id="more"></span>
<blockquote>
<p><strong>Example 1:</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">Input<span class="punctuation">:</span> s = <span class="string">&quot;barfoothefoobarman&quot;</span><span class="punctuation">,</span> words = <span class="punctuation">[</span><span class="string">&quot;foo&quot;</span><span class="punctuation">,</span><span class="string">&quot;bar&quot;</span><span class="punctuation">]</span></span><br><span class="line">Output<span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">0</span><span class="punctuation">,</span><span class="number">9</span><span class="punctuation">]</span></span><br><span class="line">Explanation<span class="punctuation">:</span></span><br><span class="line">The substring starting at <span class="number">0</span> is <span class="string">&quot;barfoo&quot;</span>. It is the concatenation of <span class="punctuation">[</span><span class="string">&quot;bar&quot;</span><span class="punctuation">,</span><span class="string">&quot;foo&quot;</span><span class="punctuation">]</span> which is a permutation of words.</span><br><span class="line">The substring starting at <span class="number">9</span> is <span class="string">&quot;foobar&quot;</span>. It is the concatenation of <span class="punctuation">[</span><span class="string">&quot;foo&quot;</span><span class="punctuation">,</span><span class="string">&quot;bar&quot;</span><span class="punctuation">]</span> which is a permutation of words.</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">Input<span class="punctuation">:</span> s = <span class="string">&quot;wordgoodgoodgoodbestword&quot;</span><span class="punctuation">,</span> words = <span class="punctuation">[</span><span class="string">&quot;word&quot;</span><span class="punctuation">,</span><span class="string">&quot;good&quot;</span><span class="punctuation">,</span><span class="string">&quot;best&quot;</span><span class="punctuation">,</span><span class="string">&quot;word&quot;</span><span class="punctuation">]</span></span><br><span class="line">Output<span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">Explanation<span class="punctuation">:</span></span><br><span class="line">There is no concatenated substring.</span><br></pre></td></tr></table></figure>
<p><strong>Example 3:</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">Input<span class="punctuation">:</span> s = <span class="string">&quot;barfoofoobarthefoobarman&quot;</span><span class="punctuation">,</span> words = <span class="punctuation">[</span><span class="string">&quot;bar&quot;</span><span class="punctuation">,</span><span class="string">&quot;foo&quot;</span><span class="punctuation">,</span><span class="string">&quot;the&quot;</span><span class="punctuation">]</span></span><br><span class="line">Output<span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">6</span><span class="punctuation">,</span><span class="number">9</span><span class="punctuation">,</span><span class="number">12</span><span class="punctuation">]</span></span><br><span class="line">Explanation<span class="punctuation">:</span></span><br><span class="line">The substring starting at <span class="number">6</span> is <span class="string">&quot;foobarthe&quot;</span>. It is the concatenation of <span class="punctuation">[</span><span class="string">&quot;foo&quot;</span><span class="punctuation">,</span><span class="string">&quot;bar&quot;</span><span class="punctuation">,</span><span class="string">&quot;the&quot;</span><span class="punctuation">]</span>.</span><br><span class="line">The substring starting at <span class="number">9</span> is <span class="string">&quot;barthefoo&quot;</span>. It is the concatenation of <span class="punctuation">[</span><span class="string">&quot;bar&quot;</span><span class="punctuation">,</span><span class="string">&quot;the&quot;</span><span class="punctuation">,</span><span class="string">&quot;foo&quot;</span><span class="punctuation">]</span>.</span><br><span class="line">The substring starting at <span class="number">12</span> is <span class="string">&quot;thefoobar&quot;</span>. It is the concatenation of <span class="punctuation">[</span><span class="string">&quot;the&quot;</span><span class="punctuation">,</span><span class="string">&quot;foo&quot;</span><span class="punctuation">,</span><span class="string">&quot;bar&quot;</span><span class="punctuation">]</span>.</span><br></pre></td></tr></table></figure>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 10^4</code></li>
<li><code>1 &lt;= words.length &lt;= 5000</code></li>
<li><code>1 &lt;= words[i].length &lt;= 30</code></li>
<li><code>s</code> and <code>words[i]</code> consist of lowercase English letters.</li>
</ul>
</blockquote>
<h1 id="Approach">Approach</h1>
<p>For convenience, let <code>n = words.length</code> and <code>n2 = words[i].length</code>.</p>
<p>A brute force solution would be to iterate over every index <code>i</code> in <code>s</code>, and then check whether the substring starting at index <code>i</code> with length <code>n * n2</code> (<code>s[i : i + n * n2)</code>) is a concatenated substring. This approach is similar to brute force string matching. Clearly, for this hard problem, the time complexity of such a method is unacceptable.</p>
<p>Therefore, we need to optimize the approach. Notice the condition that “All the strings of <code>words</code> are of <strong>the same length</strong>”. This is a very special constraint. Assume we have examined a substring <code>s1 = s[i : i + n * n2)</code> and recorded how many words it deviates from forming a valid concatenated substring; call this state <code>state1</code>. Then, when considering <code>s2 = s[i + n2 : i + n * (n2 + 1))</code>, <code>s2</code> is derived from <code>s1</code> by removing the substring <code>s[i : i + n2)</code> and adding the substring <code>s[i + n * n2: i + n * (n2 + 1))</code> — both of which have the same length as a word. Thus, we <strong>can easily update <code>state1</code> using these two changing substrings to compute <code>state2</code></strong>, which tells us how far <code>s2</code> is from being a concatenated substring.</p>
<p>Let’s consider an example. Suppose <code>words = [&quot;ab&quot;,&quot;cd&quot;,&quot;ef&quot;]</code> and <code>s = &quot;ggcdabef&quot;</code>. In this case, <code>n = 3</code> and <code>n2 = 2</code>.</p>
<p>Let <code>s1 = s[0: 6) = &quot;ggcdab&quot;</code>. At this point, <code>s1</code> has one extra <code>&quot;gg&quot;</code> and is missing <code>&quot;ef&quot;</code> relative to a valid concatenated substring — this is our <code>state1</code>. When we examine <code>s2 = s[0 + 2, 6 + 2) = &quot;cdabef&quot;</code>, <code>s2</code> is obtained by removing <code>&quot;gg&quot;</code> and adding <code>&quot;ef&quot;</code>. <strong>By applying the changes from <code>s1</code> to <code>s2</code></strong>, we obtain <code>state2</code>: <code>s2</code> satisfies the condition of being a concatenated substring — it uses every word in <code>words</code> exactly once.</p>
<p>Why do we shift by <code>n2</code> from <code>s1</code> to <code>s2</code>? Because the concatenated substring is a permutation of <code>words</code>, and each word has length <code>n2</code>. Without shifting by <code>n2</code>, we cannot reuse the results.</p>
<p>Returning to the problem itself, our goal is to find all starting indices of the concatenated substrings. How many initial states are there in total? There are exactly <code>n2</code> initial states: <code>s[0: n * n2)</code>, <code>s[1: n * n2 + 1)</code>, …, <code>s[n2 - 1: n * (n2 + 1) - 1)</code>. Every subsequent substring of length <code>n * n2</code> can be derived from one of these initial states.</p>
<p>The remaining challenge is how to efficiently record the state and implement state transitions. Let’s combine the explanation with the code.</p>
<h1 id="Code">Code</h1>
<p>Considering that <code>words</code> might contain duplicate entries, we use a Map rather than a Set for counting:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">unordered_map&lt;string, <span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="keyword">for</span> (string &amp; w : words) &#123;</span><br><span class="line">    mp[w]++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Then, we define two <code>vector</code>. Notice their constructors:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v1</span><span class="params">(n2, mp.size())</span></span>;</span><br><span class="line">vector&lt;unordered_map&lt;string, <span class="type">int</span>&gt;&gt; <span class="built_in">v2</span>(n2, mp);</span><br></pre></td></tr></table></figure>
<p>Each hash table in <code>v2</code> records the difference between the count required for a valid concatenated substring (i.e., the initial <code>mp</code>) and the count of words found in the current substring of length <code>n * n2</code>.</p>
<p><code>v1</code> records the number of entries in the corresponding hash table that are not <code>0</code>. In other words, if an element in <code>v1</code> is <code>0</code>, then the corresponding substring of length <code>n * n2</code> is a valid concatenated substring. The purpose of <code>v1</code> is to <strong>quickly check</strong> whether the substring meets the condition for a concatenated substring.</p>
<p>Let’s take the construction of the initial state as an example to see how these two <code>vector</code> work:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n2; ++i) &#123;</span><br><span class="line">  	<span class="comment">// Check the state of the substring s[i : i + n * n2)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">        string s2 = s.<span class="built_in">substr</span>(i + n2 * j, n2); <span class="comment">// Obtain the substring s2 of length n2</span></span><br><span class="line">        <span class="type">int</span> v = --v2[i][s2]; <span class="comment">// Update the count</span></span><br><span class="line">        <span class="comment">// If v2[i][s2] &gt; 0, we are **missing** v2[i][s2] occurrences of s2 to form a valid concatenated substring.</span></span><br><span class="line">        <span class="comment">// If v2[i][s2] &lt; 0, there are **extra** v2[i][s2] occurrences of s2 to form a valid concatenated substring.</span></span><br><span class="line">        <span class="comment">// During the construction of the initial state, v2[i][s2] only decreases.</span></span><br><span class="line">        <span class="keyword">if</span> (v == <span class="number">0</span>) v1[i]--; <span class="comment">// So when v2[i][s2] becomes 0, decrement v1[i]</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (v == <span class="number">-1</span>) v1[i]++; <span class="comment">// But when v2[i][s2] first drops below 0, increment v1[i] as this word becomes extra</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (v1[i] == <span class="number">0</span>) &#123; <span class="comment">// At this point, the condition for a concatenated substring is met, record the index.</span></span><br><span class="line">        ans.<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Next, we should continuously perform state transitions from the initial states. The process is similar to constructing the initial state, but with the additional step of adding a word:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n2; i + n2 * n &lt;= s.<span class="built_in">size</span>(); ++i) &#123; <span class="comment">// Note the loop termination condition</span></span><br><span class="line">    <span class="comment">// Note the definition of v2; here, we perform an increment operation.</span></span><br><span class="line">    string oldStr = s.<span class="built_in">substr</span>(i - n2, n2);</span><br><span class="line">    <span class="type">int</span> v = ++v2[i % n2][oldStr]; <span class="comment">// Don&#x27;t forget to take modulo n2</span></span><br><span class="line">    <span class="keyword">if</span> (v == <span class="number">0</span>) v1[i % n2]--;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (v == <span class="number">1</span>) v1[i % n2]++;</span><br><span class="line"></span><br><span class="line">    string newStr = s.<span class="built_in">substr</span>(i + n2 * (n - <span class="number">1</span>), n2);</span><br><span class="line">    v = --v2[i % n2][newStr];</span><br><span class="line">    <span class="keyword">if</span> (v == <span class="number">0</span>) v1[i % n2]--;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (v == <span class="number">-1</span>) v1[i % n2]++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (v1[i % n2] == <span class="number">0</span>) &#123; <span class="comment">// At this point, the condition for a concatenated substring is met, record the index.</span></span><br><span class="line">        ans.<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Thus, the final code is:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findSubstring</span><span class="params">(string s, vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = words.<span class="built_in">size</span>(), n2 = words[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        </span><br><span class="line">        unordered_map&lt;string, <span class="type">int</span>&gt; mp;</span><br><span class="line">        <span class="keyword">for</span> (string &amp; w : words) &#123;</span><br><span class="line">            mp[w]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v1</span><span class="params">(n2, mp.size())</span></span>;</span><br><span class="line">        vector&lt;unordered_map&lt;string, <span class="type">int</span>&gt;&gt; <span class="built_in">v2</span>(n2, mp);</span><br><span class="line"></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (s.<span class="built_in">size</span>() &lt; n * n2) &#123; <span class="comment">// The only corner case</span></span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n2; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                string s2 = s.<span class="built_in">substr</span>(i + n2 * j, n2);</span><br><span class="line">                <span class="type">int</span> v = --v2[i][s2];</span><br><span class="line">                <span class="keyword">if</span> (v == <span class="number">0</span>) v1[i]--;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (v == <span class="number">-1</span>) v1[i]++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (v1[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                ans.<span class="built_in">push_back</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n2; i + n2 * n &lt;= s.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            string oldStr = s.<span class="built_in">substr</span>(i - n2, n2);</span><br><span class="line">            <span class="type">int</span> v = ++v2[i % n2][oldStr];</span><br><span class="line">            <span class="keyword">if</span> (v == <span class="number">0</span>) v1[i % n2]--;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (v == <span class="number">1</span>) v1[i % n2]++;</span><br><span class="line"></span><br><span class="line">            string newStr = s.<span class="built_in">substr</span>(i + n2 * (n - <span class="number">1</span>), n2);</span><br><span class="line">            v = --v2[i % n2][newStr];</span><br><span class="line">            <span class="keyword">if</span> (v == <span class="number">0</span>) v1[i % n2]--;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (v == <span class="number">-1</span>) v1[i % n2]++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (v1[i % n2] == <span class="number">0</span>) &#123;</span><br><span class="line">                ans.<span class="built_in">push_back</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>Time Complexity: <code>O(n * n2 * n2 + s.size() * n2)</code>.</p>
<p>Space Complexity: <code>O(n * n2 * n2)</code>, mainly due to the space required for <code>v2</code>.</p>
<p>Note that each word has a length of <code>n2</code>, so the space cost per word is <code>O(n2)</code>, and extracting a word from <code>s</code> takes <code>O(n2)</code> time.</p>
]]></content>
      <categories>
        <category>Algorithm Problems</category>
      </categories>
      <tags>
        <tag>Sliding Window</tag>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>the Architecture of Azure Pipelines</title>
    <url>/en/2023/10/06/Azure-Pipelines-Architecture/</url>
    <content><![CDATA[<h1 id="Introduction">Introduction</h1>
<p>Azure Pipelines is a component of Azure DevOps (a SaaS platform) and serves as an automated CI/CD pipeline. Similar technologies include <a href="https://github.com/features/actions">GitHub Actions</a> and <a href="https://www.jenkins.io/">Jenkins</a>.</p>
<p>As users, we only need to define various tasks in YAML, trigger the pipeline, and Azure Pipelines automatically executes these tasks for us.</p>
<p>So, how are tasks executed? Is there a limit to parallel tasks? How can we design YAML more efficiently to make a pipeline run faster? This article will analyze the architecture of Azure Pipelines from the perspective of task scheduling, providing answers to these questions along the way.</p>
<span id="more"></span>
<h1 id="Azure-Pipelines-Terminology">Azure Pipelines Terminology</h1>
<p><img src="./MDImgs/Azure-Pipelines-Architecture/key-pipeline-concepts-overview-ca80c85c.png" alt="img"></p>
<p><strong>For users of Azure Pipelines</strong>, a YAML file uniquely defines the logic of a pipeline run:</p>
<ul>
<li>A pipeline can contain multiple stages.</li>
<li>A stage can contain multiple jobs.</li>
<li>A job can contain multiple steps.</li>
<li>A step can contain multiple tasks.</li>
</ul>
<p><strong>For Azure Pipelines itself</strong>, when a pipeline is triggered, it needs to invoke computing resources to execute the pipeline’s logic. Specifically, a machine (agent) is responsible for executing a job.</p>
<p>A job runs on only one agent, and it is not further divided. However, all jobs of a pipeline may be assigned to different agents for execution.</p>
<p>How is this distribution of jobs accomplished?</p>
<h1 id="Azure-Pipelines-Task-Scheduling">Azure Pipelines Task Scheduling</h1>
<p>Azure Pipelines task scheduling follows a typical distributed task scheduling model (similar technologies include <a href="http://www.quartz-scheduler.org/">QUARTZ</a> and <a href="https://github.com/xuxueli/xxl-job">xxl-job</a>):</p>
<ul>
<li>Azure Pipelines has a <strong>‘Task Queue’</strong> containing all pending <u>jobs</u> (referring to both the job/task in the task scheduling model and the job term in the pipeline).</li>
<li>The agent is a worker that periodically checks whether there are jobs to run in the <strong>‘Task Queue’</strong>. If there are, some agent will compete to gain the right to execute that job while obtaining access to the relevant resources. At this point, it can start executing the job.</li>
</ul>
<p>Therefore, a pipeline is executed as follows:</p>
<ol>
<li>Trigger the pipeline. Azure Pipelines parses YAML, splits it into multiple jobs, and stores them in the <strong>‘Task Queue’</strong>.</li>
<li>If there is an idle agent at this time (indicating that the <strong>‘Task Queue’</strong> was empty), it listens for the event that a new job is pushed to the queue and begins competing to execute that job with other agents (if any).
<ul>
<li>If successful, it starts execution.</li>
<li>If unsuccessful, it continues to listen.</li>
</ul>
</li>
<li>If there is no idle agent at this time (indicating that the <strong>‘Task Queue’</strong> previously had jobs or no agent completed its previously assigned job), these newly generated jobs will wait for an agent to execute them in an orderly manner (jobs are queued based on the time the pipeline was triggered, ensuring fairness).</li>
</ol>
<h1 id="Parallel-Jobs">Parallel Jobs</h1>
<p>The task scheduling framework implies <strong>parallelism</strong>. This means that when defining YAML, <strong>steps or tasks without dependencies should be elevated to jobs, allowing them to run in parallel and reduce execution time</strong>.</p>
<blockquote>
<p>However, during internships, few people do this, and most people use the default step level, even when many agents are often idle. 🤔</p>
</blockquote>
<p>Now, since the immediate execution of a new job depends on the presence of idle agents, does increasing the number of agents improve overall throughput (the number of jobs completed in a unit of time)? Unfortunately, not really.</p>
<p>After all, Microsoft needs to profit from Azure, so they introduced the concept of ‘Parallel Jobs’, indicating a limit to the number of jobs that can run in parallel. This limit requires purchasing.</p>
<p>In other words, to run jobs in parallel, we not only need to purchase Azure VM agents but also Parallel Jobs. Even if we have many machines locally, we still need to buy Parallel Jobs.</p>
<h1 id="Reference">Reference</h1>
<ul>
<li><a href="https://learn.microsoft.com/en-us/training/modules/explore-azure-pipelines/3-describe-azure-pipelines">Describe Azure Pipelines</a></li>
<li><a href="https://learn.microsoft.com/en-us/training/modules/explore-azure-pipelines/4-understand-key-terms">Understand Azure Pipelines key terms</a></li>
<li><a href="https://learn.microsoft.com/en-us/training/modules/manage-azure-pipeline-agents-pools/7-communicate-with-azure-pipelines">Communicate with Azure Pipelines</a></li>
<li><a href="https://azure.microsoft.com/en-us/products/devops/pipelines#overview">Azure Pipelines Product Overview</a></li>
<li><a href="https://learn.microsoft.com/en-us/azure/devops/pipelines/agents/agents">Azure Pipelines agents</a></li>
</ul>
]]></content>
      <categories>
        <category>tech</category>
        <category>Azure</category>
      </categories>
      <tags>
        <tag>Azure</tag>
        <tag>Azure Pipelines</tag>
        <tag>Architecture</tag>
      </tags>
  </entry>
  <entry>
    <title>Install and Use ChangeDetection</title>
    <url>/en/2024/10/02/ChangeDetection-install-and-usage/</url>
    <content><![CDATA[<h1 id="Introduction">Introduction</h1>
<p>Recently, I was waiting for a notification from a website, so I kept checking it periodically. Eventually, I found this too cumbersome and considered writing a web scraper to monitor it automatically. However, I soon discovered that there are many existing platforms available (so there’s no need to write any code). Most of these platforms offer free plans, but they only monitor static web pages, and you have to pay if you want to handle JSON data. So I started looking for open-source alternatives. This led me to the topic of this post — <a href="https://github.com/dgtlmoon/changedetection.io">ChangeDetection</a>.</p>
<p>ChangeDetection has two main functions: monitoring changes in URL content and notifying you of those changes. These two features cover most daily use cases.</p>
<span id="more"></span>
<h1 id="Docker-compose">Docker compose</h1>
<p>The basic configuration for ChangeDetection is as follows, with a simple port mapping and a volume.</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">changedetection:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">dgtlmoon/changedetection.io:0.46.04</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">changedetection</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">55000</span><span class="string">:5000</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">changedetection-data:/datastore</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">changedetection-data:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<hr>
<p>ChangeDetection also offers a visual interface, allowing non-programmers to select the content they want to monitor, similar to how they would use a browser. Key features include:</p>
<ul>
<li><strong>Browser Steps</strong>: This can record a series of user actions.</li>
<li><strong>Visual Filter Selector</strong>: This allows you to choose a specific part of a web page to monitor.</li>
</ul>
<p>These features are powered by Playwright, which requires a WebDriver. The <a href="https://github.com/dgtlmoon/changedetection.io/blob/master/docker-compose.yml">official docker compose file</a> includes the configuration needed to run an additional Chrome container for Playwright. Since I don’t need this feature, I didn’t configure it.</p>
<hr>
<p>If you plan to monitor a website frequently, it’s recommended to use a proxy to avoid getting your IP blocked, which could prevent you from completing your tasks.</p>
<h1 id="Usage">Usage</h1>
<p>Using ChangeDetection is straightforward since the interface has only a few buttons.</p>
<h2 id="Filter">Filter</h2>
<p>The “Filters &amp; Triggers” section is what we need to focus on, as this is where data cleaning is handled. There are many types of filters available, but I mainly use CSS and JQ. I recommend having GPT write specific rules for you.</p>
<h2 id="Email-Notifications">Email Notifications</h2>
<p>In the “Settings | Notifications” section, you can configure notification services. I currently use email notifications, which essentially sends an email to yourself from your own account. The configuration rule is as follows:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mailto://&#123;user&#125;:&#123;password&#125;@qq.com</span><br></pre></td></tr></table></figure>
<p>Keep in mind that the <code>password</code> varies depending on the email provider. For Gmail, it’s your account password, but for QQ Mail, you need to generate an authorization code in the “Account and Security | Security Settings” section (similar to an API TOKEN).</p>
<p>The email content uses a Jinja2 template, making it easy to customize.</p>
<p>After configuring everything, test whether it works properly.</p>
<h1 id="References">References</h1>
<ul>
<li><a href="https://github.com/dgtlmoon/changedetection.io/wiki/Notification-configuration-notes">ChangeDetection doc: Notification configuration notes</a></li>
</ul>
]]></content>
      <categories>
        <category>tech</category>
        <category>NAS</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>NAS</tag>
        <tag>Docker</tag>
        <tag>ChangeDetection</tag>
      </tags>
  </entry>
  <entry>
    <title>Dashy Installation and Config</title>
    <url>/en/2024/04/04/Dashy-install-and-config/</url>
    <content><![CDATA[<h1 id="Preface">Preface</h1>
<p><a href="https://github.com/Lissy93/dashy">Dashy</a> is an open-source customizable dashboard software that requires self-deployment. My use case is to place links of frequently visited websites. This post mainly documents some problems encountered during installation and usage.</p>
<h1 id="Installation">Installation</h1>
<span id="more"></span>
<p>Docker compose：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">dashy:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">lissy93/dashy:2.1.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">dashy</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker/dashy/conf.yml:/app/public/conf.yml</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker/dashy/dashboard-icons:/app/public/item-icons</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">bridge</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">54000</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&#x27;CMD&#x27;</span>, <span class="string">&#x27;node&#x27;</span>, <span class="string">&#x27;/app/services/healthcheck&#x27;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">1m30s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">3</span></span><br><span class="line">      <span class="attr">start_period:</span> <span class="string">40s</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>config.yml</code> is the core configuration file. I prefer directly modifying it rather than using the UI to make changes and then save them to disk.</li>
</ul>
<h1 id="Setting-Icons">Setting Icons</h1>
<p>There are many types of icons. I often use “Local Icons”, “<a href="https://fontawesome.com/search">Font Awesome</a>”, and “<a href="https://simpleicons.org/">Simple Icons</a>”.</p>
<h2 id="Local-Icons">Local Icons</h2>
<p>Local icons are simply local images. The file extensions can be <code>png</code> and <code>svg</code>, but not <code>ico</code>.</p>
<p>Local icons <strong>must</strong> be placed under <code>/app/public/item-icons/</code>. Dashy <strong>only</strong> recognizes <strong>relative paths</strong> within this directory. In Docker compose, I map the local directory <code>/opt/docker/dashy/dashboard-icons</code> to that directory. This local directory is a clone of the <a href="https://github.com/walkxcode/dashboard-icons">dashboard-icons</a> project.</p>
<p>The icons in the dashboard-icons project are some commonly used software icons, but there are no icons for Chinese software. Of course, we can also download icons and put them in this directory.</p>
<p>Since the icons in this directory are all colored images, while the latter two types of icons are black and white, <strong>I prefer this method</strong>.</p>
<p>Some examples:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Icons from the dashboard-icons project</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">icon:</span> <span class="string">svg/portainer.svg</span></span><br><span class="line"><span class="comment"># Icons downloaded and stored in the &#x27;downloaded&#x27; folder</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">icon:</span> <span class="string">downloaded/AutoBangumi.svg</span></span><br></pre></td></tr></table></figure>
<h2 id="Font-Awesome">Font Awesome</h2>
<p>Naming convention: <code>[category] [name]</code></p>
<p>Examples: <code>fas fa-rocket</code>, <code>fab fa-monero</code></p>
<p>Taking the envelope as an example:</p>
<p>In HTML code, the <code>name</code> is <code>fa-envelope</code>, but the <code>category</code> needs to be abbreviated by ourselves as <code>far</code>.</p>
<p><img src="./MDImgs/Dashy-install-and-config/image-20240404105243668.png" alt="image-20240404105243668"></p>
<p>In VUE code, the <code>category</code> is correct, but the <code>name</code> is not.</p>
<p><img src="./MDImgs/Dashy-install-and-config/image-20240404105359193.png" alt="image-20240404105359193"></p>
<p>It’s not clear where to directly copy the value of <code>icon</code>.</p>
<p>If you want to use pro icons, you need to configure the license key in <code>appConfig.fontAwesomeKey</code>, usually a 10-character string.</p>
<h2 id="Simple-Icons">Simple Icons</h2>
<p>The icons on this website are also commonly used software, however, including Chinese software.</p>
<p>Naming convention: <code>si-[name]</code></p>
<p>Examples: <code>si-googlechrome</code>、<code>si-bilibili</code></p>
<p>The <code>name</code> here can be directly copied from the official website (click on the text and it will be automatically copied):</p>
<p><img src="./MDImgs/Dashy-install-and-config/image-20240404110008224.png" alt="image-20240404110008224"><img src="./MDImgs/Dashy-install-and-config/image-20240404110022088.png" alt="image-20240404110022088"></p>
<p>Clicking on ‘.NET’ will copy <code>dotnet</code>, while clicking on ‘365 Data Science’ will copy <code>365datascience</code>. It can be seen that manual typing these words should be avoided as it is prone to errors.</p>
<h2 id="Example-Display">Example Display</h2>
<p><img src="./MDImgs/Dashy-install-and-config/image-20240404110533178.png" alt="image-20240404110533178"></p>
<h1 id="Reference">Reference</h1>
<ul>
<li><a href="https://github.com/Lissy93/dashy">Dashy</a></li>
</ul>
]]></content>
      <categories>
        <category>tech</category>
        <category>NAS</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>NAS</tag>
        <tag>Docker</tag>
        <tag>Dashy</tag>
      </tags>
  </entry>
  <entry>
    <title>Developer Diary 1</title>
    <url>/en/2025/06/04/Developer-Diary-1/</url>
    <content><![CDATA[<h1 id="Introduction">Introduction</h1>
<p>I’ve been self-studying a lot of courses and working on many projects recently, so I haven’t had the chance to write blog posts. Since a blog needs frequent updates, I’ve decided to introduce another format, Developer Diary, to record my thoughts and observations during development. This post covers: choosing third-party libraries, Go, and “stock responses”.</p>
<span id="more"></span>
<h1 id="Choosing-Third-Party-Libraries">Choosing Third-Party Libraries</h1>
<p>To implement a feature in a project, we usually pick an existing third-party library to avoid reinventing the wheel. But when there are many options, we can suffer from analysis paralysis, not knowing which one to pick. Here are some criteria I consider (in no particular order; weigh them holistically):</p>
<ul>
<li>Open source: Generally, open source &gt;&gt; closed source, but not always. Some stagnant open-source libraries may no longer be maintained or could even harbor malicious code. Conversely, a closed-source commercial product might be excellent, affordably priced, and save you a lot of time.</li>
<li>Star count: This metric can be misleading. On one hand, libraries with more stars tend to be higher quality, as statistic data often bear this out. On the other hand, a high star count might stem from non-technical factors like better marketing or even purchased stars.</li>
<li>Functionality: Does the library include the features we need? Are its configuration options comprehensive and rich? Are there a lot of bug-report issues?</li>
<li>Documentation: Is the documentation detailed, comprehensive, up-to-date, and understandable?</li>
<li>Activity: Judged by commit frequency, issue-closing frequency, PR merge/reject frequency, release frequency, and so on.</li>
<li>Security: Has the library ever been reported to have a major security vulnerability?</li>
<li>Sustainability: Will the author continue to develop the library? Unless the author explicitly states that support will end or the project is entering maintenance mode, we need to infer continuity from other aspects, such as other projects of the author.</li>
<li>Community feedback: Check Reddit, Stack Overflow, Bilibili, and other platforms for discussions. Be mindful of vested interests or astroturfing.</li>
<li>Related news: Both positive and negative press can be informative; you can even look up news about the author.</li>
<li>Political content: Any library containing political content is out of consideration.</li>
</ul>
<p>Many of these factors fall under the broad umbrellas of “ecosystem” and “community,” but I prefer to spell them out concretely.</p>
<h1 id="Go">Go</h1>
<p>The MIT 6.824 course requires projects to be written in Go, so I started learning it. I first encountered Go two years ago and found it quite “bizarre”. But after learning JavaScript and various frontend libraries, my impression of Go changed.</p>
<p>Go shares many philosophies with JavaScript, e.g., “functions are first-class citizens”, and no native object-oriented support. Back then, coming from Java, I found Go’s approach baffling, as if Go were the sole outlier. After diving into JavaScript, these ideas became much more palatable.</p>
<p>Another thing I once found odd and hard to accept was Go’s syntax and its underlying design philosophy. Go almost disallows any alternatives: if you have <code>for</code>, there’s no <code>while</code> or <code>do-while</code>; if you have <code>if</code>, the ternary operator <code>bool ? v1 : v2</code> is deemed unnecessary. I understood the benefit of doing so: enforcing a single style for all developers at the language level. But I still wondered: is Go too authoritarian?</p>
<p>Let’s compare with other languages first. Spring Boot’s philosophy is “convention over configuration,” providing many out-of-the-box features. Only do we follow the conventions can we enjoy a fast development experience. Otherwise, we need to manually configure something. Yet Spring Boot at least allows you override defaults and define your own rules. In contrast, Redux Toolkit and Next.js are very opinionated: we must adhere to their conventions, with almost no room for customization (and even if possible, it’s a huge hassle).</p>
<p>Let’s return to Go. Having learned RTK and Next.js, I now accept the uniformity of Go’s syntax because I understand that Go is an opinionated programming language. Note that being opinionated isn’t inherently bad. Just as too many third-party library choices can hamper productivity, a well-endorsed set of language rules can reduce the time spent comparing alternatives and boost efficiency.</p>
<p>These experiences show that learning diverse technologies is always beneficial. It builds your knowledge base and makes you more open to new technologies.</p>
<h1 id="“Stock-Responses”">“Stock Responses”</h1>
<p>What are “stock responses”? Here’s DeepSeek’s definition:</p>
<blockquote>
<p>In tech industry, <strong>“stock responses”</strong> (八股文) is a <strong>pejorative metaphor</strong> referring to knowledge points, answering patterns, or interview styles that are <strong>rigid, formulaic, divorced from real scenarios, and overly focused on form over substance</strong>.</p>
<p><strong>Interview stock responses:</strong> Standard Q&amp;A‐style interview questions that candidates are repeatedly asked to memorize verbatim.</p>
</blockquote>
<p>Indeed, “stock responses” often get bad press, yet they’re hard to avoid if you want to pass technical interviews. It’s worth noting that the questions themselves shouldn’t be blamed. On the contrary, they serve as an excellent gateway to understanding a domain, since most of them are foundational and low-level.</p>
<p>Note that good stock responses are those carefully curated by the author, e.g., “Xiaolin coding”, not the copy-and-paste blog posts you find all over the web. The latter are ubiquitous and heavily duplicated.</p>
<p>My reflection on stock responses arose when working with SQLite transactions. Unfamiliar with SQLite’s transaction model and concurrency model, I worried about deadlocks and scoured the web. Useful resources were scarce, with much duplication that made me doubt their accuracy. The official docs were hard to follow. Ultimately, I resolved my doubts via an LLM but didn’t gain a deep understanding of SQLite’s architecture.</p>
<p>You might ask: why not just ask the LLM directly? The answer is: if there’s no valuable SQLite material online, how could an LLM be trained to answer SQLite questions accurately? Won’t it hallucinate and give me wrong answers? I’ve experienced hallucinations before when asking about WPF.</p>
<p>By contrast, there are plenty of MySQL “stock responses” on the Internet. We can study them ourselves or trust LLMs to summarize them reliably. That’s why I hope to see high-quality SQLite stock responses available online.</p>
<p>Finally, putting aside the pejorative term “stock responses,” I believe “any question that expands the boundaries of our logic is a good one”. After learning how to use a technology and wanting to delve deeper, stock responses in FAQ form offer a path different from official docs or reading source code, which is a good thing. Besides, many people have landed offers thanks to stock responses; there’s no need to burn the bridge behind us.</p>
]]></content>
      <categories>
        <category>Developer Diary</category>
      </categories>
      <tags>
        <tag>Developer Diary</tag>
        <tag>Go</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>How to Access Docker Containers? IP Address or Container Name?</title>
    <url>/en/2024/06/11/Docker-Accessing-Containers-IP-or-Container-Name/</url>
    <content><![CDATA[<h1 id="Introduction">Introduction</h1>
<p>This post covers various scenarios for accessing Docker containers, exploring whether to use the container’s IP address or name in each case. While this information might be trivial for seasoned Docker users, I often find myself forgetting these basic concepts, wasting a lot of time. Hence, I decided to write a blog post in the form of a cheat sheet. Most of the content here is generated by ChatGPT.</p>
<p>In general, just remember these two points:</p>
<ul>
<li>Although we prefer to access containers by their names, this DNS service is provided by Docker and <strong>can only be used by containers</strong>.</li>
<li>For port mapping <code>-p 8080:80</code>: Use the container’s port <code>80</code> when accessing the container via container name/IP, and use the host’s port <code>8080</code> when accessing from the host.</li>
</ul>
<span id="more"></span>
<h1 id="Accessing-the-Target-Container-from-Another-Container">Accessing the Target Container from Another Container</h1>
<p>Here, we should distinguish whether the two containers are on the same Docker network.</p>
<h2 id="Both-Containers-are-on-the-Same-Network">Both Containers are on the Same Network</h2>
<p>Scenario 1: Both Containers are Part of the Same Compose</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mywebapp</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:80&quot;</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span></span><br></pre></td></tr></table></figure>
<p>Scenario 2: Use the <code>--network</code> Option When Creating Containers to Place Them on the Same Network</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network create my_network</span><br><span class="line">docker run -d --name web --network my_network mywebapp</span><br><span class="line">docker run -d --name db --network my_network mysql</span><br></pre></td></tr></table></figure>
<p>In both cases, you can access the containers by their names (using the container’s port).</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl http://web:80</span><br></pre></td></tr></table></figure>
<p><strong>Note: If the target container is on the bridge network, this does not apply. You need to access it via IP.</strong></p>
<h2 id="Containers-are-Not-on-the-Same-Network">Containers are Not on the Same Network</h2>
<p>You need to use the target container’s IP.</p>
<p>First, obtain the container’s IP, then access it via IP:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CONTAINER_IP=$(docker inspect -f &#x27;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27; container)</span><br><span class="line">curl http://$CONTAINER_IP:80</span><br></pre></td></tr></table></figure>
<h1 id="Accessing-the-Target-Container-from-the-Host">Accessing the Target Container from the Host</h1>
<p>There are two methods:</p>
<ol>
<li>
<p>Access via the container’s IP.</p>
</li>
<li>
<p>Use the host’s port to access:</p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl http://localhost:8080</span><br></pre></td></tr></table></figure>
<p>Note, in this case, this is the host’s port, not the container’s port.</p>
<h1 id="Accessing-the-Target-Container-from-an-External-Host">Accessing the Target Container from an External Host</h1>
<p>Use the host’s IP to access:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl http://host_ip:8080</span><br></pre></td></tr></table></figure>
<h1 id="References">References</h1>
<ul>
<li>ChatGPT</li>
</ul>
]]></content>
      <categories>
        <category>tech</category>
        <category>Docker</category>
        <category>cheat sheet</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker: healthcheck and depends_on</title>
    <url>/en/2024/06/03/Docker-Healthcheck/</url>
    <content><![CDATA[<h1 id="Introduction">Introduction</h1>
<p>This post mainly covers the mechanisms and syntax of Docker healthcheck and Docker Compose’s <code>depends_on</code>. This post can be viewd as a cheat sheet.</p>
<h1 id="healthcheck-Mechanism">healthcheck Mechanism</h1>
<blockquote>
<p>When a container has a healthcheck specified, it has a health status <strong>in addition to its normal status.</strong> This status is <strong>initially <code>starting</code></strong>. Whenever a <strong>health check passes</strong>, it becomes <strong><code>healthy</code></strong> (whatever state it was previously in). After a certain number of <strong>consecutive failures</strong>, it becomes <strong><code>unhealthy</code></strong>.</p>
</blockquote>
<span id="more"></span>
<p>healthcheck has the following parameters:</p>
<table>
<thead>
<tr>
<th>Parameter</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>--interval=DURATION</code></td>
<td><code>30s</code></td>
<td>Interval between healthchecks.</td>
</tr>
<tr>
<td><code>--timeout=DURATION</code></td>
<td><code>30s</code></td>
<td>How long to wait for the healthcheck to complete. If it exceeds this time, it’s considered a failure.</td>
</tr>
<tr>
<td><code>--retries=N</code></td>
<td><code>3</code></td>
<td>After <code>retries</code> consecutive failures, the container status changes to <code>unhealthy</code>.</td>
</tr>
<tr>
<td><code>--start-period=DURATION</code></td>
<td><code>0s</code></td>
<td>Failures during this period are not counted towards the <code>retries</code> limit. However, once a healthcheck succeeds, the container is considered started and the start period ends automatically.</td>
</tr>
<tr>
<td><code>--start-interval=DURATION</code></td>
<td><code>5s</code></td>
<td>Interval between healthchecks during the start period.</td>
</tr>
</tbody>
</table>
<p>After the container starts, it is in the <code>starting</code> state, i.e., the start period. During the start period, the container can only become <code>healthy</code>, not <code>unhealthy</code>.</p>
<h1 id="healthcheck-Syntax">healthcheck Syntax</h1>
<h2 id="Syntax">Syntax</h2>
<blockquote>
<p>This post focuses on the syntax in Compose, not in Dockerfile or CLI.</p>
</blockquote>
<p>A healthcheck in Compose will override the one in Dockerfile.</p>
<p>An Example:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">healthcheck:</span></span><br><span class="line">  <span class="attr">test:</span> <span class="string">curl</span> <span class="string">-f</span> <span class="string">https://localhost</span> <span class="string">||</span> <span class="string">exit</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">interval:</span> <span class="string">1m30s</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">  <span class="attr">retries:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">start_period:</span> <span class="string">40s</span></span><br><span class="line">  <span class="attr">start_interval:</span> <span class="string">5s</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>test</code> defines the command Compose runs to check container health. It can be <strong>either a string or a list</strong>.</p>
<p>If it’s a list, the first item must be either <code>NONE</code>, <code>CMD</code> or <code>CMD-SHELL</code>.</p>
<p>If it’s a string, it’s equivalent to specifying <code>CMD-SHELL</code> followed by that string.</p>
</blockquote>
<p>The following two forms are equivalent:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">test:</span> [<span class="string">&quot;CMD-SHELL&quot;</span>, <span class="string">&quot;curl -f http://localhost || exit 1&quot;</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">test:</span> <span class="string">curl</span> <span class="string">-f</span> <span class="string">https://localhost</span> <span class="string">||</span> <span class="string">exit</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>Clearly, the second form is more convenient.</p>
<h2 id="Debugging-test-Command">Debugging <code>test</code> Command</h2>
<p>Common <code>test</code> command templates can be found in <a href="/en/2024/04/12/MySQL-Docker/#healthcheck">the previous post</a>. How to debug our <code>test</code> command? Use <code>docker inspect</code>. Healthcheck information is in <code>State.Health</code>, and we can get it with the following command:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker inspect --format=<span class="string">&#x27;&#123;&#123;json .State.Health&#125;&#125;&#x27;</span> container</span><br></pre></td></tr></table></figure>
<p>An example:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;healthy&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;FailingStreak&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Log&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;Start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-06-02T13:45:22.110841425+08:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;End&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-06-02T13:45:22.178282083+08:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ExitCode&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Output&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mysqladmin: [Warning] Using a password on the command line interface can be insecure.\nmysqld is alive\n&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;Start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-06-02T13:45:27.208737778+08:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;End&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-06-02T13:45:27.261481813+08:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ExitCode&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Output&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mysqladmin: [Warning] Using a password on the command line interface can be insecure.\nmysqld is alive\n&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>Attributes of the <code>Log</code> element:</p>
<ul>
<li><code>Output</code>: The output of the command, used for debugging.</li>
<li><code>Exitcode</code>: <code>0</code> indicates the container is healthy, <code>1</code> indicates it is unhealthy.</li>
</ul>
<h2 id="Disabling-healthcheck">Disabling healthcheck</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">healthcheck:</span></span><br><span class="line">  <span class="attr">disable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h1 id="depends-on-Mechanism">depends_on Mechanism</h1>
<blockquote>
<p>You can <strong>control the order of service startup and shutdown</strong> with the <code>depends_on</code> attribute. Compose always starts and stops containers in dependency order.</p>
<p>It is useful if services are closely coupled, and the startup sequence impacts the application’s functionality.</p>
</blockquote>
<p>Note that <code>depends_on</code> only indicates startup order and does not guarantee the container starting earlier is ready.</p>
<blockquote>
<p>On startup, Compose <strong>does not wait until a container is “ready”, only until it’s running</strong>.</p>
</blockquote>
<p>By setting the <code>condition</code> attribute of <code>depends_on</code>, you can specify when container B, which is dependent on container A, will start. This attribute has the following values:</p>
<table>
<thead>
<tr>
<th>Value</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>service_started</code></td>
<td>Default value, B starts after A starts.</td>
</tr>
<tr>
<td><code>service_healthy</code></td>
<td>B starts after A is <code>healthy</code>.</td>
</tr>
<tr>
<td><code>service_completed_successfully</code></td>
<td>B starts after A successfully completes its <code>command</code>. Here, A typically executes a command/script and stops after completion. A successful exit is indicated by exit code 0. Check this <a href="https://stackoverflow.com/a/69612290/23172420">specific example</a>.</td>
</tr>
</tbody>
</table>
<p>Therefore, to achieve truly ordered startup of multiple containers as services in Compose, use the healthcheck mechanism and set <code>condition</code> to <code>service_healthy</code>.</p>
<hr>
<p>Note that using <code>depends_on</code> is only effective when using <code>docker compose up|start</code>. If the container’s <code>restart</code> policy is set to <code>unless-stopped</code> or <code>always</code>, these containers <strong>will not</strong> restart in <code>depends_on</code> order after the server restarts.</p>
<h1 id="depends-on-Syntax">depends_on Syntax</h1>
<h2 id="Simple-Configuration">Simple Configuration</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres</span></span><br></pre></td></tr></table></figure>
<p>Here, the <code>condition</code> defaults to <code>service_started</code>.</p>
<h2 id="Detailed-Configuration">Detailed Configuration</h2>
<p>This kind of configuration allows specifying the <code>condition</code>.</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="attr">db:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">service_healthy</span></span><br><span class="line">      <span class="attr">redis:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">service_started</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres</span></span><br></pre></td></tr></table></figure>
<h1 id="References">References</h1>
<ul>
<li><a href="https://docs.docker.com/reference/dockerfile/#healthcheck">Dockerfile HEALTHCHECK</a></li>
<li><a href="https://docs.docker.com/compose/compose-file/05-services/#healthcheck">Docker compose healthcheck</a></li>
<li><a href="https://docs.docker.com/compose/startup-order/">Control startup and shutdown order in Compose</a></li>
<li><a href="https://stackoverflow.com/a/69612290/23172420">How to start service only when other service had completed?</a></li>
<li><a href="https://docs.docker.com/compose/compose-file/05-services/#depends_on">Docker compose depends_on</a></li>
</ul>
]]></content>
      <categories>
        <category>tech</category>
        <category>Docker</category>
        <category>cheat sheet</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Deploying Nginx in Docker and Configuring SSL Certificate for Local Network</title>
    <url>/en/2024/01/31/Docker-Nginx-SSL-Local-Network/</url>
    <content><![CDATA[<h1 id="Preface">Preface</h1>
<p>In my previous post, I successfully set up a LANraragi server and shared it with other devices in my home LAN. However, new issues arose:</p>
<ul>
<li>LANraragi could be accessed without logging in.</li>
<li>Even if LANraragi had a login feature, it still used HTTP plaintext transmission, which is equivalent to no password protection.</li>
</ul>
<p>The root cause of these issues was that devices like smartphones and smart home devices, connected to the LAN, were not trustworthy. They could potentially have backdoors (or ‘users voluntarily transmitting private data to improve service’). Anyway, these issues needed urgent resolution.</p>
<p>The solution is Nginx:</p>
<ul>
<li>Use Nginx’s built-in basic authentication to allow access only with a correct username and password.</li>
<li>Utilize Nginx’s reverse proxy feature. Once Nginx is configured with HTTPS, any software being proxied can use the encrypted transmission.</li>
</ul>
<p>Therefore, the key lies in the configuration of Nginx and SSL certificates. The challenge is that I need to request a certificate for an internal IP address without a corresponding domain name. This article explores these solutions, marking my first encounter with Nginx and SSL certificate configuration.</p>
<span id="more"></span>
<h1 id="Nginx-Container">Nginx Container</h1>
<h2 id="Obtain-the-Default-Configuration-File">Obtain the Default Configuration File</h2>
<p>Create a temporary container, copy the <code>nginx.conf</code> from it:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run --name tmp-nginx-container -d nginx:1.24</span><br><span class="line">docker <span class="built_in">cp</span> tmp-nginx-container:/etc/nginx/nginx.conf /opt/nginx.conf</span><br><span class="line">docker <span class="built_in">rm</span> -f tmp-nginx-container</span><br></pre></td></tr></table></figure>
<h2 id="Docker-Compose">Docker Compose</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.24</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/nginx_ssl:/etc/nginx/ssl/:ro</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">bridge</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">50443</span><span class="string">:443</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Besides the configuration file, map a directory to store SSL private key and certificate.</li>
<li>Choose the bridge network mode; otherwise, other containers cannot be accessed.</li>
<li>Only map the <code>443</code> port, while I have no intention to open the <code>80</code> port.</li>
</ul>
<h1 id="SSL-Certificate">SSL Certificate</h1>
<h2 id="Create-a-CA">Create a CA</h2>
<p>Create a CA key <code>myCAPK.key</code> and a (self-signed) certificate <code>myCACertificate.crt</code>:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">openssl req -x509 -sha256 -nodes -days 3650 -newkey rsa:4096 -keyout myCAPK.key -out myCACertificate.crt</span><br></pre></td></tr></table></figure>
<p>The private key and certificate generated by this command can be directly used for Nginx server. However, if another server also needs an SSL certificate, client devices need to manually trust the new certificate, which is troublesome.</p>
<p>If this certificate is used as a CA certificate, as long as devices trust this certificate, all other certificates signed by this CA will be automatically trusted. Therefore, devices only need to manually add the CA certificate only once.</p>
<h2 id="Check-Certificate-Information">Check Certificate Information</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">openssl x509 -text -noout -<span class="keyword">in</span> myCACertificate.crt</span><br></pre></td></tr></table></figure>
<h2 id="Trust-the-CA">Trust the CA</h2>
<p>As this CA certificate is self-created, the system won’t recognize it, so it needs to be installed.</p>
<p>Without this step, the browser can still establish an HTTPS connection but will prompt that the connection is not secure.</p>
<h3 id="Windows">Windows</h3>
<p>Control Panel | Internet Options | Content | Certificates</p>
<p><img src="./MDImgs/Docker-Nginx-SSL-Local-Network/image-20240131172736021.png" alt="image-20240131172736021"></p>
<p>Trust the CA as a root certificate authority.</p>
<p><img src="./MDImgs/Docker-Nginx-SSL-Local-Network/image-20240131172831043.png" alt="image-20240131172831043"></p>
<h3 id="Android">Android</h3>
<p>Different systems have different locations for installing certificates, but the basic options are the same. Here’s an example for Samsung:</p>
<p>Either choose ‘CA certificates’ or ‘VPN and app user certificates’. Do not choose ‘WLAN certificates’; it does not work.</p>
<p><img src="./MDImgs/Docker-Nginx-SSL-Local-Network/Screenshot_20240201_113254_Settings.png" alt="Screenshot_20240201_113254_Settings"></p>
<h3 id="IOS">IOS</h3>
<blockquote>
<p>Using iPadOS 15.7 as an example</p>
</blockquote>
<ol>
<li>
<p>Open your email, send the CA certificate as an attachment to yourself.</p>
</li>
<li>
<p>Using the Safari browser, log in to your email, click the attachment, and select “Download Profile” (a prompt will appear:  ‘go to settings to confirm installation’).</p>
</li>
<li>
<p>Go to settings, select “Install Profile,” enter your lock screen password.</p>
</li>
<li>
<p>Settings | General | About | Certificate Trust Settings: Enable full trust.</p>
<p><img src="./MDImgs/Docker-Nginx-SSL-Local-Network/IMG_2032.PNG" alt="IMG_2032"></p>
</li>
</ol>
<h2 id="Create-Server-Key">Create Server Key</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">openssl genrsa -out nginx_server.key 4096</span><br></pre></td></tr></table></figure>
<h2 id="Create-Server-CSR-Certificate-Signing-Request">Create Server CSR (Certificate Signing Request)</h2>
<p>Create <code>openssl.cnf</code> with the following content:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">authorityKeyIdentifier</span>=<span class="string">keyid,issuer</span></span><br><span class="line"><span class="attr">basicConstraints</span>=<span class="string">CA:FALSE</span></span><br><span class="line"><span class="attr">subjectAltName</span> = <span class="string">@alt_names</span></span><br><span class="line"><span class="attr">[alt_names]</span></span><br><span class="line"><span class="comment"># 虚拟机</span></span><br><span class="line"><span class="attr">DNS.1</span> = <span class="string">CentOS100</span></span><br><span class="line"><span class="attr">IP.1</span> = <span class="string">192.168.169.132</span></span><br><span class="line"><span class="comment"># 主机</span></span><br><span class="line"><span class="attr">IP.2</span> = <span class="string">192.168.0.105</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>The configuration file can be more complex, but for this case, these few configurations are sufficient.</p>
</blockquote>
<ul>
<li><code>DNS.x</code> corresponds to hostname/domain.</li>
<li><code>IP.x</code> corresponds to IP addresses.</li>
</ul>
<blockquote>
<p><code>x</code> is a positive integer.</p>
</blockquote>
<p>The only purpose of this file is to bind the server’s domain name and IP with the certificate during CA signing, indicating that the certificate indeed belongs to that server and not someone else pretending. Without this configuration, the browser would show an error: <code>NET::ERR_CERT_COMMON_NAME_INVALID</code>.</p>
<p>Use the following command to create the CSR:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">openssl req -new -key nginx_server.key -out nginx_server.csr</span><br></pre></td></tr></table></figure>
<h2 id="CA-Signing">CA Signing</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">openssl x509 -req -extfile openssl.cnf  -<span class="keyword">in</span> nginx_server.csr -CA /opt/MyOwnCA/myCACertificate.crt -CAkey /opt/MyOwnCA/myCAPK.key -CAcreateserial -out nginx_server.crt -days 398</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Why set <code>-days 398</code>? – According to Apple’s <a href="https://support.apple.com/en-us/102028">new policy</a>，server’s certificate cannot exceed 398 days, otherwise SSL connection errors occur（<code>NET::ERR_CERT_VALIDITY_TOO_LONG</code>. Note that only Apple requires this. If we are sure that the website will not be accessed by any Apple devices, setting it to 10 years is also ok.</p>
</blockquote>
<p>After signing, you will get the private key <code>nginx_server.key</code> and certificate <code>nginx_server.crt</code> ready to be used in Nginx.</p>
<h1 id="Nginx-Configuration">Nginx Configuration</h1>
<h2 id="SSL">SSL</h2>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> default_server ssl http2;</span><br><span class="line">    <span class="attribute">listen</span> [::]:<span class="number">443</span> ssl http2;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/nginx/ssl/nginx_server.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/nginx/ssl/nginx_server.key;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> /... &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> ...;  </span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>This is just the basic configuration; there are more SSL directives in practice, but these are sufficient for now.</p>
</blockquote>
<h2 id="Basic-Authentication">Basic Authentication</h2>
<p>1️⃣First, create a username and password:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Create the file if it doesn&#x27;t exist</span></span><br><span class="line"><span class="built_in">touch</span> /opt/docker/nginx_auth/.htpasswd-lanraragi</span><br><span class="line"><span class="comment"># Add user alpha to this configuration file</span></span><br><span class="line">htpasswd /opt/docker/nginx_auth/.htpasswd-lanraragi alpha</span><br></pre></td></tr></table></figure>
<p>Then, the system will prompt to set a password for the <code>alpha</code> user. To add multiple users, use the same command:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">htpasswd /opt/docker/nginx_auth/.htpasswd-lanraragi beta</span><br></pre></td></tr></table></figure>
<blockquote>
<p>On CentOS, the <code>htpasswd</code> command belongs to <code>httpd-tools</code>. If not installed, the system will prompt to install it.</p>
</blockquote>
<hr>
<p>2️⃣Configure in Nginx：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> /api &#123;</span><br><span class="line">    <span class="attribute">auth_basic</span>           <span class="string">&quot;Administrator’s Area&quot;</span>;</span><br><span class="line">    <span class="attribute">auth_basic_user_file</span> /etc/nginx/.htpasswd; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>auth_basic</code> prompts a message to user on the login page；</li>
<li><code>auth_basic_user_file</code> points to the previously created <code>.htpasswd</code>；</li>
</ul>
<p>It can also be enabled globally and disabled for specific URLs:</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attribute">auth_basic</span>           <span class="string">&quot;Administrator’s Area&quot;</span>;</span><br><span class="line">    <span class="attribute">auth_basic_user_file</span> conf/.htpasswd;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> /public/ &#123;</span><br><span class="line">      <span class="attribute">auth_basic</span> <span class="literal">off</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Example-Lanraragi">Example: Lanraragi</h1>
<p>Let’s come back to the initial demand: reverse proxy Lanraragi and provide a login feature.</p>
<p>Docker compose:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.24</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx-lanraragi</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker/nginx_conf/nginx-lanraragi.conf:/etc/nginx/nginx.conf:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker/nginx_ssl:/etc/nginx/ssl/:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker/nginx_auth:/etc/nginx/auth/:ro</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">43000</span><span class="string">:443</span></span><br><span class="line">  <span class="attr">lanraragi:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">difegue/lanraragi:v.0.9.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">lanraragi</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/mnt/hgfs/doujinshiArchives:/home/koyomi/lanraragi/content:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">lanraragi-database:/home/koyomi/lanraragi/database</span></span><br><span class="line">    <span class="attr">depends_on:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">nginx</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">lanraragi-database:</span></span><br></pre></td></tr></table></figure>
<p>Nginx configuration:</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">user</span>  nginx;</span><br><span class="line"><span class="attribute">worker_processes</span>  auto;</span><br><span class="line"></span><br><span class="line"><span class="attribute">error_log</span>  /var/log/nginx/<span class="literal">error</span>.log <span class="literal">notice</span>;</span><br><span class="line"><span class="attribute">pid</span>        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       /etc/nginx/mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">log_format</span>  main  <span class="string">&#x27;<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] &quot;<span class="variable">$request</span>&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> &quot;<span class="variable">$http_referer</span>&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;<span class="variable">$http_user_agent</span>&quot; &quot;<span class="variable">$http_x_forwarded_for</span>&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span>  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">443</span> default_server ssl http2;</span><br><span class="line">        <span class="attribute">listen</span> [::]:<span class="number">443</span> ssl http2;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">ssl_certificate</span> /etc/nginx/ssl/nginx_server.crt;</span><br><span class="line">        <span class="attribute">ssl_certificate_key</span> /etc/nginx/ssl/nginx_server.key;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">auth_basic</span>           <span class="string">&quot;Login to view any content&quot;</span>;</span><br><span class="line">        <span class="attribute">auth_basic_user_file</span> /etc/nginx/auth/.htpasswd-lanraragi;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="comment"># Access directly through service name in the same network</span></span><br><span class="line">            <span class="comment"># No need to map any port for lanraragi</span></span><br><span class="line">            <span class="attribute">proxy_pass</span> http://lanraragi:3000;</span><br><span class="line">            <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">            <span class="attribute">http2_push_preload</span> <span class="literal">on</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Lanraragi’s own routing strategy cannot be changed, which means <code>/</code> must be mapped as-is to Lanraragi’s URI. In other words, Lanraragi needs a separate Nginx instance.</p>
<p>From a computational resources perspective, this isn’t a big deal, as one Nginx instance uses less than 20 MB of memory.</p>
<p>If each existing software gets its own Nginx, these Nginx instances can share a single SSL certificate. After all, when accessing the Linux host, it tells Nginx instances from each other by port, and the certificate is bound to IP/domain. Although this is a solution, I’m not sure if it’s the best practice. However, in a home LAN scenario, it is clearly sufficient.</p>
<h1 id="References">References</h1>
<ul>
<li>ChatGPT</li>
<li><a href="https://mindsers.blog/en/post/https-using-nginx-certbot-docker/">HTTPS using Nginx and Let’s encrypt in Docker</a></li>
<li><a href="https://www.baeldung.com/openssl-self-signed-cert">Creating a Self-Signed Certificate With OpenSSL</a></li>
<li><a href="https://hub.docker.com/_/nginx">Nginx Docker hub</a></li>
<li><a href="https://www.tangyuecan.com/2021/12/17/%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%85%E6%90%AD%E5%BB%BA%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8F%AF%E4%BF%A1%E4%BB%BB%E7%9A%84ssl%E8%AF%81%E4%B9%A6/">局域网内搭建浏览器可信任的SSL证书</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-nginx-in-ubuntu-16-04">How To Create a Self-Signed SSL Certificate for Nginx in Ubuntu 16.04</a></li>
<li><a href="https://stackoverflow.com/questions/10175812/how-to-generate-a-self-signed-ssl-certificate-using-openssl">How to generate a self-signed SSL certificate using OpenSSL?</a></li>
<li><a href="https://docs.nginx.com/nginx/admin-guide/security-controls/configuring-http-basic-authentication/">Restricting Access with HTTP Basic Authentication</a></li>
<li><a href="https://support.hcltechsw.com/csm?id=kb_article&amp;sysparm_article=KB0098768">在iOS设备上安装根证书(CA)</a></li>
<li><a href="https://discussions.apple.com/thread/253667401?sortBy=best">Enabling self-signed certificates in iOS 15</a></li>
<li><a href="https://support.apple.com/en-us/102028">Apple: About upcoming limits on trusted certificates</a></li>
</ul>
]]></content>
      <categories>
        <category>tech</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Nginx</tag>
        <tag>SSL</tag>
      </tags>
  </entry>
  <entry>
    <title>Automated Anime Tracking: From AutoBangumi Back to qBittorrent RSS</title>
    <url>/en/2024/06/29/From-AutoBangumi-Back-to-qBittorrent-RSS/</url>
    <content><![CDATA[<h1 id="Introduction">Introduction</h1>
<p><a href="https://github.com/EstrellaXD/Auto_Bangumi">AutoBangumi</a> is an “RSS-based fully automated anime tracking and download tool” <strong>(hereinafter referred to as AB)</strong>, which is very suitable for users like me who use both <a href="https://github.com/c0re100/qBittorrent-Enhanced-Edition">qBittorrent</a> <strong>(hereinafter referred to as QB)</strong> and Jellyfin. After using AB to track anime for a season, I have gained a deeper understanding of AB, Jellyfin, and concepts such as RSS and scraping. Although AB provides automation, it also increases the complexity of the tracking process, especially when AB encounters issues.</p>
<p>Based on my past experiences with the QB RSS feature and combined with my new understanding, I chose to stop using AB and instead use QB RSS. Although this adds a few more steps for tracking new anime each season, the overall system complexity and resource usage are reduced. Overall, I am satisfied with this change.</p>
<h1 id="Automated-Anime-Tracking-Workflow">Automated Anime Tracking Workflow</h1>
<pre><code class="highlight mermaid">flowchart LR
subgraph g1[RSS Subscriber]
a1[AB] ~~~ a2[QB]
end
subgraph g2[RSS Downloader]
b1[AB] ~~~ b2[QB]
end
subgraph g3[torrent Downloader]
c1[QB] ~~~ c3[Transmission]
end
subgraph g4[&quot;Post-Download Tasks (Optional)&quot;]
d1[Email Notification] ~~~ d2[Rename Downloaded Videos] ~~~ d3[Make Hard Links]
end

subgraph g5[&quot;Jellyfin (Plugins) Scraping&quot;]
e1[Bangumi] ~~~  e2[AniDB] ~~~ e3[TMDB]
end
g1--&gt;g2--&gt;g3--&gt;g4--&gt;g5</code></pre>
<span id="more"></span>
<p>As shown, the automated anime tracking workflow consists of five steps:</p>
<ol>
<li><strong>RSS Subscriber</strong>: By subscribing to RSS feeds from sites like Mikan, we can get information about each episode of an anime (the most important being the torrent information). The role of the RSS subscriber is to periodically fetch the latest content, which is more commonly used for retrieving new articles.</li>
<li><strong>RSS Downloader</strong>: Based on the new episode information obtained by the RSS subscriber, it will download those anime. The RSS downloader knows which episodes have already been downloaded and which are not, so it always downloads the latest episodes.</li>
<li><strong>Torrent Downloader</strong>: Nothing needs to be introduced here.</li>
<li><strong>Post-Download Tasks (Optional)</strong>: The scope of post-download tasks is extensive. Here are some possible tasks:
<ul>
<li>QB can be set to “run an external program when a torrent is completed” to execute any function via scripts, such as sending email notifications.</li>
<li>Software like AB and Sonarr can update video names after downloading to make them suitable for scraping.</li>
<li>If the download directory and the Jellyfin media directory are separate, to save hard drive’s life, we can make hard links of the video files in the media directory instead of moving the video files themselves. (Hard links can only be used within the same file system)</li>
</ul>
</li>
<li><strong>Jellyfin (Plugin) Scraping</strong>: Jellyfin periodically scans the media library, and if the user opts for automatic scraping (i.e., fetching metadata from the web), Jellyfin will try to get metadata based on the video names (which may fail). This functionality is provided by Jellyfin plugins, with TMDB being the default, but Bangumi and AniDB often perform better.</li>
</ol>
<h1 id="Role-of-AB">Role of AB</h1>
<p>When subscribing to a new anime, first obtain the RSS link and then click “Add RSS”:
<img src="./MDImgs/From-AutoBangumi-Back-to-qBittorrent-RSS/image.png" alt="alt text" style="zoom:50%;" /></p>
<p>Then we can see the information about the anime on the homepage:
<img src="./MDImgs/From-AutoBangumi-Back-to-qBittorrent-RSS/image-1.png" alt="alt text"></p>
<p>AB automatically subscribes to the RSS and adds a new rule in the RSS downloader. When a new episode is available, the RSS downloader downloads the video to <code>Anime Directory/Anime Name/Season 1/</code>. After the download is complete, AB renames the video.</p>
<ul>
<li><code>Anime Directory</code> is pre-configured in AB, which is the QB download directory;</li>
<li><code>Anime Name/Season 1/</code> is automatically generated by AB to conform to the Jellyfin media library structure;</li>
<li>Video renaming is done automatically by AB to facilitate Jellyfin scraping;</li>
</ul>
<p>We can see that AB is indeed highly automated, achieving automation between “RSS links and torrent downloader” and “torrent downloader and Jellyfin”. However, in actual use, I did not enable the video renaming feature, and Jellyfin could still accurately recognize the videos. Therefore, AB to me is just a convenient RSS subscriber and downloader.</p>
<h1 id="Use-QB-RSS-to-Replace-AB">Use QB RSS to Replace AB</h1>
<p>After understanding the role of AB, it is not difficult to realize that the QB RSS feature can replace AB. The benefits are obvious:</p>
<ul>
<li>The components in the system are reduced, lowering resource usage and complexity;</li>
<li>QB RSS subscriber can display existing anime information, whereas AB cannot;</li>
<li>QB RSS downloader is more powerful;</li>
</ul>
<p>The only drawback is the inability to display anime posters, which is acceptable.</p>
<p>The process to subscribe to a new anime with QB is as follows:</p>
<ol>
<li>Subscribe to the anime’s RSS link:
<img src="./MDImgs/From-AutoBangumi-Back-to-qBittorrent-RSS/image-2.png" alt="alt text" style="zoom:50%;" /></li>
<li>Create a new rule in the RSS downloader:
<img src="./MDImgs/From-AutoBangumi-Back-to-qBittorrent-RSS/image-3.png" alt="alt text">
<ul>
<li>Rule definition: for example, only 1080p or only Simplified Chinese subtitles;</li>
<li>Save to other directory: Like AB’s setup, set it to <code>Anime Directory/Anime Name/Season 1/</code>. If it’s the second season, use <code>Season 2</code>;</li>
<li>Select the RSS subscription rule we just created;</li>
<li>Click save;</li>
</ul>
</li>
</ol>
<p>The minimum granularity of Mikan’s RSS link is a tuple of <code>(bangumiId, subgroupid)</code>, i.e., <code>(anime, subtitle group)</code>. Of course, we can also choose the RSS link determined by <code>bangumiId</code>, which will include all subtitle groups.</p>
<p>A download rule is bound to an anime, so it can include multiple subtitle groups. But how will Jellyfin recognize multiple videos of the same episode? I have not tried this yet.</p>
]]></content>
      <categories>
        <category>tech</category>
        <category>NAS</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>NAS</tag>
        <tag>Docker</tag>
        <tag>Jellyfin</tag>
        <tag>RSS</tag>
        <tag>AutoBangumi</tag>
        <tag>qBittorrent</tag>
      </tags>
  </entry>
  <entry>
    <title>Install Glances in Docker</title>
    <url>/en/2024/04/08/Glances-Docker/</url>
    <content><![CDATA[<h1 id="Introduction-to-Glances">Introduction to Glances</h1>
<p>There are many configurable widgets in Dashy, among which the most practical one is resource monitoring. Displaying CPU usage on the panel is not useful for me —— I am more concerned about which program is causing high CPU usage. However, the Glances software on which this feature depends is very practical.</p>
<p>Glances is similar to the <code>top</code> command, which can display system resource usage. However, it is better in the following aspects:</p>
<ul>
<li>More comprehensive and user-friendly data display;</li>
<li>It can display the resource usage of each container —— in this respect, it surpasses Portainer. Portainer can only display the resource usage of <strong>one</strong> container in <strong>chart</strong> form.</li>
<li>It can run in server mode. We can monitor resource usage through a browser, which is very convenient.</li>
</ul>
<p><img src="./MDImgs/Glances-Docker/image-20240408112645115.png" alt="image-20240408112645115"></p>
<p>Glances is relatively lightweight, only displaying the current resource situation without recording historical data. And what I need is precisely this kind of lightweight yet comprehensive resource monitoring software.</p>
<span id="more"></span>
<h2 id="Docker-Installation">Docker Installation</h2>
<p>Why use Docker for installation? The official preferred method is to install via pip:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install --user glances</span><br></pre></td></tr></table></figure>
<p>This will disrupt the local Python environment, so let’s use Docker instead.</p>
<p>docker compose:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">glances:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.io/nicolargo/glances:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">glances</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock:ro</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">bridge</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">61208</span><span class="number">-61209</span><span class="string">:61208-61209</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GLANCES_OPT=-w</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">pid:</span> <span class="string">host</span></span><br></pre></td></tr></table></figure>
<p>Then visit port 61208 in your browser.</p>
<h1 id="References">References</h1>
<ul>
<li><strong><a href="https://github.com/nicolargo/glances">Glances</a></strong></li>
</ul>
]]></content>
      <categories>
        <category>tech</category>
        <category>NAS</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>NAS</tag>
        <tag>Docker</tag>
        <tag>Glances</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Workflow Automation</title>
    <url>/en/2024/09/06/Hexo-Workflow-automation/</url>
    <content><![CDATA[<h1 id="Introduction">Introduction</h1>
<p>Recently, I found the process of writing blog posts with Hexo a bit cumbersome, so I wanted to automate it. The workflow automation includes: updating NPM dependencies, writing build scripts to make up for some deficiencies in Hexo, and using GitHub Actions to automatically deploy the site.</p>
<p>When I first started using Hexo, I wasn’t good at reading documentation and preferred following tutorials. After more than a year of using Hexo and over six months of deploying various open-source software, I decided to work on this improvement.</p>
<span id="more"></span>
<h1 id="Updating-NPM-Dependencies">Updating NPM Dependencies</h1>
<p>I use the NexT theme, which can be installed in two ways: Git and NPM. I had been using Git, but it was inconvenient to update. After switching to NPM to install the NexT theme, the dependencies of the entire Hexo project are managed uniformly by NPM.</p>
<h2 id="Updating-Command">Updating Command</h2>
<p>The commands to update dependencies are as follows:</p>
<p>First, install NCU:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -g npm-check-updates</span><br></pre></td></tr></table></figure>
<p>Check for updates and install new versions:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ncu -u</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>Then, based on the prompts, we might need to run:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm audit fix</span><br></pre></td></tr></table></figure>
<h2 id="Dependabot">Dependabot</h2>
<p>The directory created by <code>hexo init</code> comes with a Dependabot file. GitHub Dependabot can periodically check for updates and automate this process. However, I intentionally did not use it. Unlike dependency managers such as Maven and NuGet, NPM also has a <code>package-lock.json</code> file. Dependabot not only updates the versions in <code>package.json</code>, but it also updates <code>package-lock.json</code>. What if something breaks in <code>package-lock.json</code>?</p>
<p>I’m not very familiar with NPM, so I’d rather manually run the commands above.</p>
<h1 id="Writing-Build-Scripts">Writing Build Scripts</h1>
<p>I am not satisfied with how Hexo handles Markdown image references because it requires placing images in specific locations according to its rules rather than following the image links in Markdown itself. As a result, after finishing writing, I have to adjust according to Hexo’s rules.</p>
<blockquote>
<p>This is something <a href="https://squidfunk.github.io/mkdocs-material/">Material for MkDocs</a> does very well. It can automatically handle image links. But it’s a documentation framework. Although it has a blog plugin, the overall layout is still inclined towards documentation, making it unsuitable for a blog.</p>
</blockquote>
<p>To avoid worrying about such trivial matters while writing, I wrote a script to handle image links.</p>
<h2 id="Approach">Approach</h2>
<p>My setup is: for each Markdown file, its images are saved in <code>./MDImgs/$&#123;filename&#125;</code>. For example, images in <code>source/_posts/Glances-Docker.md</code> are all in <code>source/_posts/MDImgs/Glances-Docker</code>.</p>
<p>After running <code>hexo generate</code>, the corresponding path is <code>public/2024/04/08/Glances-Docker/index.html</code>. The generated HTML still contains relative image links. Since Hexo doesn’t copy images by default, we need to copy the images to the appropriate paths.</p>
<p>The date in the path is the creation time of the post, which can be obtained from the <code>date</code> field in the frontmatter.</p>
<h2 id="Code">Code</h2>
<p><code>hexo clean</code> and <code>hexo generate</code> are also called via the script so that it handles all the build tasks.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> join</span><br><span class="line"><span class="keyword">import</span> frontmatter</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">source_path = <span class="string">r&quot;./source/_posts&quot;</span></span><br><span class="line">target_path = <span class="string">r&quot;./public&quot;</span></span><br><span class="line"></span><br><span class="line">os.system(<span class="string">&quot;npx hexo clean&quot;</span>)</span><br><span class="line">os.system(<span class="string">&quot;npx hexo generate&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(source_path):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> f.endswith(<span class="string">&quot;.md&quot;</span>):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    basename = f.removesuffix(<span class="string">&quot;.md&quot;</span>)</span><br><span class="line"></span><br><span class="line">    p = join(source_path, f)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(p, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        post = frontmatter.loads(file.read())</span><br><span class="line">        date = post[<span class="string">&quot;date&quot;</span>].strftime(<span class="string">&quot;%Y-%m-%d&quot;</span>).split(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    dir1 = join(source_path, <span class="string">&quot;MDImgs&quot;</span>, basename)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dir1):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    dir2 = join(</span><br><span class="line">        target_path, date[<span class="number">0</span>], date[<span class="number">1</span>], date[<span class="number">2</span>], basename, <span class="string">&quot;MDImgs&quot;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dir2):</span><br><span class="line">        os.makedirs(dir2)</span><br><span class="line"></span><br><span class="line">    dir3 = join(dir2, basename)</span><br><span class="line">    shutil.copytree(dir1, dir3)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;copy image task done&quot;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="Automatic-Site-Deployment">Automatic Site Deployment</h1>
<p>As we can see, the build script is the core of the entire automation workflow. So why use GitHub Actions for automatic deployment? On the one hand, I believe using Actions is a hallmark of achieving automation; on the other hand, as the number of posts increases, the deployment time becomes noticeably longer. Additionally, the <a href="https://theme-next.js.org/docs/getting-started/deployment#Continuous-Integration">documentation</a> mentions two more benefits:</p>
<blockquote>
<ul>
<li>Edit the file directly online, effective immediately</li>
<li>Automatic deployment, simultaneous deployment to multiple locations</li>
</ul>
</blockquote>
<p>The documentation provides <a href="https://theme-next.js.org/docs/getting-started/deployment#Github-Pages">a workflow example</a>, but its main drawback is that it can only deploy to the GitHub Page of the current repository. The visibility of a GH Page is the same as the repository. Therefore, if we want others to see our blog, we have to make it public, which is obviously unreasonable. I use a private repository to write my blog, and then use a public repository’s GH Page to deploy the blog.</p>
<h2 id="Workflow">Workflow</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">Hexo</span> <span class="string">site</span> <span class="string">to</span> <span class="string">Pages</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [<span class="string">master</span>]</span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="comment"># deploy to which repo</span></span><br><span class="line">  <span class="attr">TARGET_REPO:</span> <span class="string">target-repo-name</span></span><br><span class="line">  <span class="comment"># same as timezone in _config.yml</span></span><br><span class="line">  <span class="attr">TZ:</span> <span class="string">Europe/Berlin</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="comment"># Build job</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Change</span> <span class="string">TZ</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          sudo timedatectl set-timezone $TZ</span></span><br><span class="line"><span class="string">          timedatectl</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="number">18</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&quot;18&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Python</span> <span class="number">3.10</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-python@v5</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">python-version:</span> <span class="string">&#x27;3.10&#x27;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">| </span></span><br><span class="line"><span class="string">          npm install</span></span><br><span class="line"><span class="string">          pip install -r requirements.txt</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">Hexo</span> <span class="string">Site</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          python ./hexoBuild.py</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">GH</span> <span class="string">Pages</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">PAT:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.PERSONAL_ACCESS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          mv public /tmp/public</span></span><br><span class="line"><span class="string">          cd /tmp/public</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">          <span class="string">git</span> <span class="string">init</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--local</span> <span class="string">user.name</span> <span class="string">&quot;github-actions[bot]&quot;</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--local</span> <span class="string">user.email</span> <span class="string">&quot;github-actions[bot]@users.noreply.github.com&quot;</span></span><br><span class="line">          <span class="string">git</span> <span class="string">remote</span> <span class="string">add</span> <span class="string">target</span> <span class="string">https://$PAT@github.com/username/$TARGET_REPO.git</span></span><br><span class="line"></span><br><span class="line">          <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line">          <span class="string">git</span> <span class="string">commit</span> <span class="string">-m</span> <span class="string">&quot;Deploy updated blog&quot;</span></span><br><span class="line">          <span class="string">git</span> <span class="string">push</span> <span class="string">--force</span> <span class="string">--set-upstream</span> <span class="string">target</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<h2 id="Time-Zone-Adjustment">Time Zone Adjustment</h2>
<p>Why adjust the time zone? — <a href="https://github.com/hexojs/hexo/issues/4548">Hexo bug</a>: Although the <code>timezone</code> attribute can be configured in <code>_config.yml</code>, the time in the generated HTML paths uses the machine’s time zone. As a result, the build script above might copy images to the wrong path (one day difference), and the images still won’t display.</p>
<p>The time zone of the machines in GitHub Actions are UTC by default, so we need to adjust it to match the one in <code>_config.yml</code>.</p>
<h2 id="PAT">PAT</h2>
<p>Since it involves accessing one repository from another, a token is needed, specifically a Personal Access Token (PAT) from Settings | Developer Settings. Although Fine-grained PATs are still in beta, they offer more precise permission control than the classic ones.</p>
<p>Generate a new Fine-grained PAT and set “Repository access” to the (public) deployment directory, with “Read and Write access to code” permission. Add this PAT to the Actions secrets of the (private) source repository and name it as <code>PERSONAL_ACCESS_TOKEN</code>.</p>
<h2 id="Deployment-Command">Deployment Command</h2>
<p>The <code>Deploy to GH Pages</code> step explained:</p>
<p>Why not use <code>hexo deploy</code>? Because each deployment is essentially committing the <code>public</code> directory and then pushing it. It is a quite large artifact, therefore not suitable to be managed by Git. Hence, the <code>git push --force --set-upstream target master</code> command ensures that there is always only one commit in the target directory, i.e. the latest artifact, to save space.</p>
<p>The earlier steps are nothing special; they just create and configure a Git repository. To access another repository via PAT, use <code>https://$PAT@github.com/username/repository-name.git</code> as the remote address.</p>
<p>The target repository is configured with GH Pages for the master branch. When there is a new commit, GitHub’s built-in workflow is used to deploy it. I chose not to use <code>actions/deploy-pages</code> because the built-in workflow feels more reliable.</p>
<h1 id="References">References</h1>
<ul>
<li>ChatGPT</li>
<li><a href="https://linuxize.com/post/how-to-set-or-change-timezone-in-linux/">How to Set or Change the Time Zone in Linux</a></li>
<li><a href="https://stackoverflow.com/a/68783135/23172420">Authenticate with GitHub using a token</a></li>
</ul>
]]></content>
      <categories>
        <category>tech</category>
        <category>Hexo</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Python</tag>
        <tag>GitHub Actions</tag>
      </tags>
  </entry>
  <entry>
    <title>Custom 404 Page in Hexo</title>
    <url>/en/2023/07/04/Hexo-custom-404/</url>
    <content><![CDATA[<h1 id="Custom-404-Page">Custom 404 Page</h1>
<p>First, create a post named <code>404</code>:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo new <span class="number">404</span></span><br></pre></td></tr></table></figure>
<p>In the corresponding markdown file, we can customize the 404 page. Due to the characteristics of the Hexo framework, we can write JS scripts to make the page interactive.</p>
<p>Here is <a href="/en/404" target="_blank">my 404 page</a>. As you can see, there’s a countdown on the page. When the countdown reaches 0, it will automatically redirect to the homepage. Of course, users can also manually click to return to the homepage.</p>
<p>Below is the code, which can be directly placed in the markdown file:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://code.jquery.com/jquery-3.7.1.min.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>You are visiting a non-existent address 🤔<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>You will be automatically redirected to the homepage in <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;seconds&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">span</span>&gt;</span> seconds,<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>Or you can click this <span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/en&quot;</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span> to redirect now!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> seconds = $(<span class="string">&quot;#seconds&quot;</span>).<span class="title function_">text</span>();</span></span><br><span class="line"><span class="language-javascript">            $(<span class="string">&quot;#seconds&quot;</span>).<span class="title function_">text</span>(--seconds);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (seconds == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                location.<span class="property">href</span> = <span class="string">&quot;/en&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Here, jQuery is only used to manipulate the DOM, so you can also write it using native JS functions.</p>
<h1 id="How-to-Redirect-to-a-Custom-404-Page">How to Redirect to a Custom 404 Page?</h1>
<span id="more"></span>
<p>Note: The following method is limited to GitHub Pages. Other platforms may have different methods.</p>
<p>Add the following in the <code>front-matter</code> of the markdown file, and GitHub Pages will set this page as the 404 page:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">/404.html</span></span><br></pre></td></tr></table></figure>
<p>Why not try visiting a non-existent page to see how it works? ▶ <a href="/en/40u235u/jasdlafn" target="_blank">Click me</a></p>
<h1 id="References">References</h1>
<p><a href="https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-custom-404-page-for-your-github-pages-site">Creating a custom 404 page for your GitHub Pages site</a></p>
<p><a href="https://theme-next.js.org/docs/theme-settings/custom-pages.html#Custom-404-Page">theme-next: custom-pages</a></p>
]]></content>
      <categories>
        <category>tech</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一次 Intel 13700K 降压的操作</title>
    <url>/en/2024/06/01/Intel-13700K-Undervolting/</url>
    <content><![CDATA[<h1 id="问题">问题</h1>
<p>最近外网爆出了 Intel 13、14 代 i9 打游戏会报显存错误。这个也许只是 CPU 不稳定导致的<strong>短时</strong>运算错误，不足为惧<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>。但是，B站上有人讨论很多 14 代 i9 在待机模式下蓝屏，甚至 13700K 也出现了这种现象。如果消息准确，那么使用了半年的 14代 i9 就出现了“缩缸”现象（硬件损坏导致的<strong>永久</strong>性能损失）。理论上，CPU 的寿命至少是 10 年，而且大部分 CPU 都是不用了、而不是用坏了。我的 CPU 就是 13700K，这让我非常警惕。</p>
<p>对于这个问题的讨论有两点需要厘清：</p>
<ol>
<li>软件报错，比如游戏、压测工具和渲染工具。这一点<strong>占据了极大比例的流量</strong>。目前，无论是 Intel 官方还是第三方网站、博主，给出的解决方案都是限制功耗和降频，使得软件不会报错。Intel 把锅甩给主板厂商，要求它们按照 Intel 标准来设置 BIOS。目前来看，这个所谓的 Intel 标准电压更高、频率更低，跑分更差。要注意，频率降低等于消费者吃亏。因此，<strong>Intel 和主板厂商都有责任</strong>。</li>
<li>CPU“缩缸”，这是产品缺陷。这一点<strong>只占据很小比例的流量</strong>。显然，Intel 永远不会承认这一点。也许从 23 年 6 月 Intel 质保政策开始收紧时<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>，Intel 已经知道了这一事实。</li>
</ol>
<p>我是在 23 年初配的电脑，轻度办公、写一写代码，基本没玩过 3A 大作。最近，我用 CPU-Z 和 R23 测试了性能，和网上的结果<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup><sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>差不多。因此，我的 13700K 应该没有“缩缸”。</p>
<p>话说回来，我倒不是很关心降频，我更关心 CPU 寿命。目前自动核心电压为 1.38 V，R23 跑一次就 100 度。这样的配置，迟早要“缩缸”。因此，本文主要记录我是如何给 CPU 降压的，以及在研究过程中发现的各种问题。</p>
<span id="more"></span>
<h1 id="一些概念">一些概念</h1>
<ul>
<li>降频：降低 CPU 的频率，比如 13700K 可以跑到 5.3GHz；</li>
<li>降压：降低 CPU 所需的电压；</li>
</ul>
<p>频率需要由电压来保证。高频率需要在高电压下才能稳定，否则 CPU 就会产生错误；但这不意味着低电压就带不动原有的高频率。这也是降压的目的之一。另外，降压也能够避免 CPU 温度达到温度墙（而被强制降频），从而保证高负载下依旧维持高频率。此时 R23 跑分甚至可以更高。</p>
<h1 id="XTU">XTU</h1>
<h2 id="降压方式">降压方式</h2>
<p>最方便的降压降频方法是用 Intel Extreme Tuning Utility，简称 XTU<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup>。（这个工具实际上更多地用来超频）。</p>
<p>用这个工具调整设置后，如果系统蓝屏，则开机时会自动恢复默认配置，防止开不了机的情况。</p>
<p>同时，XTU 是个软件，点击就可以修改，不需要每次在 BIOS 里调整。</p>
<p><img src="./MDImgs/Intel-13700K-Undervolting/image-20240601111408430.png" alt="image-20240601111408430"></p>
<p>具体的降压方法<sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup>：</p>
<p>电压偏移每次降低 0.01V 或 0.005V，然后点击 Apply。每降低一次，都跑一次 R23，直到系统出现蓝屏。</p>
<p>在出现蓝屏的电压偏移再加上 0.01 V，然后跑 R23 30分钟，看看会不会蓝屏。</p>
<p>不会蓝屏的话，就将当前配置设置为开机自动启用：</p>
<p><img src="./MDImgs/Intel-13700K-Undervolting/image-20240601111910013.png" alt="image-20240601111910013"></p>
<h2 id="Watchdog">Watchdog</h2>
<p>Watchdog 机制是实现超频后 crash safe 的关键。没有这个机制，电脑无法在开机时会自动恢复默认配置。</p>
<p>不幸的是，XTU 提醒我这个功能没有开启：（Advanced | System information 中查看）</p>
<p><img src="./MDImgs/Intel-13700K-Undervolting/image-20240601112232739.png" alt="image-20240601112232739"></p>
<p>但是，在设备管理器中，Watchdog 是存在的（先点击 查看 | 显示隐藏设备，Watchdog 在系统设备中）：</p>
<p><img src="./MDImgs/Intel-13700K-Undervolting/image-20240601112446574.png" alt="image-20240601112446574"></p>
<p>经过一番研究，发现华硕 Z790 主板（无论什么具体型号<sup class="footnote-ref"><a href="#fn7" id="fnref7">[7]</a></sup>）用 Watchdog 保证 XMP 的稳定性。如果开启了 XMP，那么 XTU 就没法用 Watchdog 了<sup class="footnote-ref"><a href="#fn8" id="fnref8">[8]</a></sup>。</p>
<blockquote>
<p>早知道不买华硕主板了，现在我得手动调 BIOS 了。</p>
</blockquote>
<h1 id="调整-BIOS">调整 BIOS</h1>
<p>调整 BIOS 的方法看这两个视频<sup class="footnote-ref"><a href="#fn6" id="fnref6:1">[6:1]</a></sup><sup class="footnote-ref"><a href="#fn9" id="fnref9">[9]</a></sup>。问题在于，旧 BIOS 本来只有一个地方可以设置 CPU 电压 offset。现在新的华硕主板把它变成了多个配置，又把问题给搞复杂了。</p>
<p>先说结论：Global Core SVID Voltage 调整为 adaptive mode，然后设置 offset<sup class="footnote-ref"><a href="#fn10" id="fnref10">[10]</a></sup>：</p>
<p><img src="./MDImgs/Intel-13700K-Undervolting/image-20240601124657423.png" alt="image-20240601124657423"></p>
<p>这等价于 XTU 里面的 Core Voltage Offset<sup class="footnote-ref"><a href="#fn11" id="fnref11">[11]</a></sup>。</p>
<hr>
<p>这几个电压的关系可以看这两篇帖子（别把自己给看晕了），不过和我们的操作关系不大：</p>
<ul>
<li><a href="https://nga.178.com/read.php?tid=34908324">华硕Z790 APEX，CPU两个关键电压设置的疑问</a></li>
<li><a href="https://www.reddit.com/r/overclocking/comments/typcy6/please_help_me_overclock_12700k_with_this_poor/">Please Help Me Overclock 12700K With This Poor Asus Board</a></li>
</ul>
<h1 id="降压过程">降压过程</h1>
<h2 id="降压前">降压前</h2>
<p>买回来就没升级过 BIOS：</p>
<p><img src="./MDImgs/Intel-13700K-Undervolting/20240601_130522.jpg" alt="20240601_130522"></p>
<p>在 CPU 降压前，我的 BIOS 只打开了 XMP 和 iGPU Multi-Monitor（使用独显时开启核显）。</p>
<p>降压前记得把开启自启动的软件都关掉，说不定系统崩溃时就把它们搞坏了。</p>
<p>降压时的工具：R23 和 HWMonitor。</p>
<p>HWMonitor 中需要关注主板 VCORE（CPU 实际电压）、CPU 温度和 CPU 功耗。</p>
<h2 id="r23-跑一轮">r23 跑一轮</h2>
<p>测试极限 offset：</p>
<table>
<thead>
<tr>
<th>offset</th>
<th>r23 跑分</th>
<th>最大功耗（W）</th>
<th>最大电压 (V)</th>
<th>最大温度（°C）</th>
</tr>
</thead>
<tbody>
<tr>
<td>0.0</td>
<td>30425</td>
<td>243</td>
<td>1.403</td>
<td>100</td>
</tr>
<tr>
<td>-0.005</td>
<td>30488</td>
<td>240</td>
<td>1.350</td>
<td>100</td>
</tr>
<tr>
<td>-0.01</td>
<td>30788</td>
<td>237</td>
<td>1.332</td>
<td>100</td>
</tr>
<tr>
<td>-0.02</td>
<td>30713</td>
<td>232</td>
<td>1.332</td>
<td>98</td>
</tr>
<tr>
<td>-0.03</td>
<td>30752</td>
<td>228</td>
<td>1.314</td>
<td>97</td>
</tr>
<tr>
<td>-0.04</td>
<td>30668</td>
<td>224</td>
<td>1.296</td>
<td>96</td>
</tr>
<tr>
<td>-0.05</td>
<td>30744</td>
<td>220</td>
<td>1.288</td>
<td>95</td>
</tr>
<tr>
<td>-0.06</td>
<td>30416</td>
<td>218</td>
<td>1.279</td>
<td>96</td>
</tr>
<tr>
<td>-0.07</td>
<td>30867</td>
<td>212</td>
<td>1.270</td>
<td>92</td>
</tr>
<tr>
<td>-0.08</td>
<td>29622</td>
<td>207</td>
<td>1.261</td>
<td>91</td>
</tr>
<tr>
<td>-0.09</td>
<td>30745</td>
<td>204</td>
<td>1.243</td>
<td>90</td>
</tr>
<tr>
<td>-0.10</td>
<td>30442</td>
<td>202</td>
<td>1.234</td>
<td>88</td>
</tr>
<tr>
<td>-0.11</td>
<td>30694</td>
<td>196</td>
<td>1.225</td>
<td>87</td>
</tr>
<tr>
<td>-0.12</td>
<td>30739</td>
<td>193</td>
<td>1.217</td>
<td>87</td>
</tr>
<tr>
<td>-0.13</td>
<td>报错</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<blockquote>
<p>功耗是 package power</p>
<p>电压是 vcore</p>
<p>温度是 package temperature</p>
</blockquote>
<p>当 offset 来到 <code>-0.13</code> 时，cinebench 报错，意味着需要回退 offset。</p>
<blockquote>
<p>无论是 cinebench 报错，还是系统黑屏、蓝屏，都表明当前的 offset 不合格。</p>
</blockquote>
<img src="./MDImgs/Intel-13700K-Undervolting/屏幕截图(14).png" alt="屏幕截图(14)" style="zoom: 67%;" />
<hr>
<p>从表格中可以看出，随着电压减少，温度降低，r23 跑分反而更高了，因为不会再触发温度墙而导致降频。</p>
<h2 id="r23-跑-30-分钟">r23 跑 30 分钟</h2>
<p>测试满足稳定性条件时的 offset：</p>
<table>
<thead>
<tr>
<th>offset</th>
<th>cinebench 何时报错</th>
</tr>
</thead>
<tbody>
<tr>
<td>-0.115</td>
<td>32 秒</td>
</tr>
<tr>
<td>-0.11</td>
<td>15 秒</td>
</tr>
<tr>
<td>-0.10</td>
<td>11 分 13 秒</td>
</tr>
<tr>
<td>-0.09</td>
<td>18 分</td>
</tr>
<tr>
<td>-0.08</td>
<td>6 分</td>
</tr>
<tr>
<td>-0.07</td>
<td>成功</td>
</tr>
</tbody>
</table>
<p>因此，<code>-0.07</code> 是最极限的 offset。30分钟结束后，r23 跑了 70 轮，得分 30337，最大温度为 97 °C，最大功耗为 217 W。</p>
<p><code>-0.07</code> 距离单轮 r23 的极限值 <code>-0.12</code> 差了 <code>0.05</code>，看来这颗 13700K 的体质不咋地。</p>
<h2 id="日常使用场景测试">日常使用场景测试</h2>
<table>
<thead>
<tr>
<th>使用场景</th>
<th>是否通过</th>
</tr>
</thead>
<tbody>
<tr>
<td>浏览器看视频</td>
<td>✅</td>
</tr>
<tr>
<td>玩『猎人：荒野的召唤』</td>
<td>✅</td>
</tr>
<tr>
<td>同时打开多个 IDE 窗口</td>
<td>✅</td>
</tr>
<tr>
<td>同时打开 4 个虚拟机（先拍了个快照，防止崩溃）</td>
<td>✅</td>
</tr>
<tr>
<td>在虚拟机里打开 bluestacks 模拟器玩手机游戏</td>
<td>✅</td>
</tr>
</tbody>
</table>
<p>在后四种场景下，风扇声音明显比之前小，说明成功通过降压实现了降温，保护了 CPU 寿命。</p>
<p>我又跑了下 CPU-Z 的稳定性测试，发现此时只占用了 180 W，温度不到 90 °C。看来 CPU-Z 的程序并不像 r23 那样会吃满 CPU，不适合作为压测工具。</p>
<h1 id="总结">总结</h1>
<p>在这次 CPU 降压的过程中，我研究了很多东西。很显然，Intel 和华硕都有错，不然我也不用折腾了 —— 以后还是买 AMD 的 CPU 吧。感觉降压降的不是 CPU 的电压，而是我的血压🤪。</p>
<h1 id="参考">参考</h1>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><a href="https://www.pcgamer.com/there-are-increased-reports-of-crashing-in-unreal-engine-games-etc-and-epic-is-blaming-intel-chips/">There are increased reports of crashing in Unreal Engine games, etc. and Epic is blaming Intel chips</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p><a href="https://www.bilibili.com/video/BV1Mo4y1u7oj">英特尔盒装CPU拒保？硬件去哪买番外篇！</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn3" class="footnote-item"><p><a href="https://valid.x86.fr/bench/971jbu">CPU-Z Benchmark (x64 - 2017.1)</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn4" class="footnote-item"><p><a href="https://nanoreview.net/en/cpu-list/cinebench-scores">Cinebench R23 Scores</a> <a href="#fnref4" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn5" class="footnote-item"><p><a href="https://www.intel.com/content/www/us/en/download/17881/intel-extreme-tuning-utility-intel-xtu.html">Intel® Extreme Tuning Utility (Intel® XTU)</a> <a href="#fnref5" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn6" class="footnote-item"><p><a href="https://youtu.be/CHndRWqOTxs">🔧 Undervolt Your INTEL CPU to increase FPS, Lower TEMPS &amp; Use LESS POWER ✅</a> <a href="#fnref6" class="footnote-backref">↩︎</a> <a href="#fnref6:1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn7" class="footnote-item"><p><a href="https://www.reddit.com/r/ASUS/comments/yhlf3v/help_with_intel_xtu_new_build_issue/">Help with Intel XTU - New Build issue</a> <a href="#fnref7" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn8" class="footnote-item"><p><a href="https://rog-forum.asus.com/t5/intel-700-600-series/asus-z790e-gaming-wifi-ii-with-intel-14900k-watchdog-present/m-p/993333/highlight/true#M21024">Asus Z790E Gaming WiFi II with Intel 14900K Watchdog Present False</a> <a href="#fnref8" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn9" class="footnote-item"><p><a href="https://www.bilibili.com/video/BV1yD4y1V7fd">风冷压13900K，也不是不可以</a> <a href="#fnref9" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn10" class="footnote-item"><p><a href="https://www.bilibili.com/video/BV1R24y1Q7Tw">华硕主板vid offset超频13700k 13900k（通用主板）</a> <a href="#fnref10" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn11" class="footnote-item"><p><a href="https://www.reddit.com/r/overclocking/comments/xn49e8/whats_the_difference_between_actual_vrm_core/">What’s the difference between actual VRM core voltage and global core SVID voltage?</a> <a href="#fnref11" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <categories>
        <category>Hardware</category>
      </categories>
      <tags>
        <tag>CPU</tag>
        <tag>BIOS</tag>
        <tag>Intel</tag>
        <tag>Hardware</tag>
      </tags>
  </entry>
  <entry>
    <title>Install Jellyfin in Docker</title>
    <url>/en/2024/02/11/Jellyfin-Docker/</url>
    <content><![CDATA[<h1 id="Preface">Preface</h1>
<blockquote>
<p><a href="https://jellyfin.org/">Jellyfin</a> is an open-source media server. Here is my way of using Jellyfin: download anime using qBittorrent, start Jellyfin, and then watch the anime on iPad through the client.</p>
</blockquote>
<p>Previously, I have installed the portable version of Jellyfin on Windows because a Linux virtual machine can not utilize the graphics card for hardware transcoding. However, I discovered that the Android and iOS clients support most codecs, eliminating the need for server-side transcoding. Since I am already familiar with Jellyfin’s usage and configuration, I decided to migrate it to Docker.</p>
<p>Although Jellyfin itself is cross-platform, its configuration is still OS-dependent, especially when moving from Windows to Docker. Despite the availability of a <a href="https://github.com/MMMZZZZ/Jellyfin-Migrator">third-party script</a>, I chose to reconfigure it for safety, which does not require much effort.</p>
<p>This article mainly talks about how to install Jellyfin using Docker, along with any issues encountered and their solutions.</p>
<span id="more"></span>
<h1 id="Install-Jellyfin">Install Jellyfin</h1>
<p>Firstly, create two volumes:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker volume create jellyfin-config</span><br><span class="line">docker volume create jellyfin-cache</span><br></pre></td></tr></table></figure>
<p>Docker Compose:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">jellyfin:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">jellyfin/jellyfin:10.8.13-1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">jellyfin</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">bridge</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">58096</span><span class="string">:8096</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">58920</span><span class="string">:8920</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">jellyfin-config:/config</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">jellyfin-cache:/cache</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/mnt/hgfs/jellyfin-media:/media:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker/jellyfin_ssl/jellyfin.pfx:/ssl/jellyfin.pfx:ro</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">jellyfin-config:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">jellyfin-cache:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>Specify the image version; <code>10.8.13</code> is the latest stable version, and subsequent versions have the term <code>unstable</code>, so it’s best not to use <code>latest</code>.</p>
</li>
<li>
<p><code>8096</code> is the default HTTP port, and <code>8920</code> is the default HTTPS port.</p>
</li>
<li>
<p>Jellyfin uses the following paths to store data:</p>
<table>
<thead>
<tr>
<th>Directory</th>
<th>Description</th>
<th>Path</th>
</tr>
</thead>
<tbody>
<tr>
<td>Data Directory</td>
<td>Stores all Jellyfin data, usually referenced by other directories</td>
<td>Specified by ENV <code>JELLYFIN_DATA_DIR</code></td>
</tr>
<tr>
<td>Configuration Directory</td>
<td>Stores configuration files</td>
<td>Specified by ENV <code>JELLYFIN_CONFIG_DIR</code>; if not specified, it uses <code>&lt;Data Directory&gt;/config</code></td>
</tr>
<tr>
<td>Cache Directory</td>
<td>Stores server cache</td>
<td>Specified by ENV <code>JELLYFIN_CACHE_DIR</code>; if not specified, it uses <code>&lt;Data Directory&gt;/cache</code></td>
</tr>
<tr>
<td>Log Directory</td>
<td>Stores log files</td>
<td>Specified by ENV <code>JELLYFIN_LOG_DIR</code>; if not specified, it uses <code>&lt;Data Directory&gt;/log</code></td>
</tr>
</tbody>
</table>
<p>These environment variables are specified in the <a href="https://hub.docker.com/layers/jellyfin/jellyfin/10.8.13-1/images/sha256-095e6d410d1d27b17cc4a961a9bab9fab5ffce6e49389d8ec685f65ab5538525?context=explore">Dockerfile</a>：</p>
  <figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENV</span> DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=<span class="number">1</span> LC_ALL=en_US.UTF-<span class="number">8</span> LANG=en_US.UTF-<span class="number">8</span> LANGUAGE=en_US:en JELLYFIN_DATA_DIR=/config JELLYFIN_CACHE_DIR=/cache JELLYFIN_CONFIG_DIR=/config/config JELLYFIN_LOG_DIR=/config/log JELLYFIN_WEB_DIR=/jellyfin/jellyfin-web JELLYFIN_FFMPEG=/usr/lib/jellyfin-ffmpeg/ffmpeg</span><br></pre></td></tr></table></figure>
<p>Therefore, <strong><code>/config</code> and <code>/cache</code> contain all data of the Jellyfin server</strong>, and these directories are mounted to <code>jellyfin-config</code> and <code>jellyfin-cache</code>, respectively.</p>
</li>
<li>
<p><code>/mnt/hgfs/jellyfin-media:/media:ro</code>: Mount media files from the local machine into Docker, the path can be arbitrary.</p>
</li>
<li>
<p><code>/opt/docker/jellyfin_ssl/jellyfin.pfx</code>: Used to configure the SSL certificate for the server, which will be discussed later.</p>
</li>
<li>
<p><code>TZ=Asia/Shanghai</code>: Set the time zone to make the log time consistent with the local machine.</p>
</li>
</ul>
<h1 id="Jellyfin-Configuration">Jellyfin Configuration</h1>
<p>Since it’s a fresh installation, all configurations need to be set up again. Here are some key points.</p>
<h2 id="Server-Users">Server | Users</h2>
<p>Disable transcoding: Even if the client doesn’t support the codec, server-side software decoding is not allowed, as it can lead to high pressure on the system.</p>
<p>Remove the following two options for <strong>each user</strong>:</p>
<p><img src="./MDImgs/Jellyfin-Docker/image-20240213140202762.png" alt="image-20240213140202762"></p>
<p>For the option ‘Allow video playback that requires conversion without re-encoding’, many articles recommend disabling it, but it seems to have no impact, so it can be left enabled.</p>
<h2 id="Advanced-Networking">Advanced | Networking</h2>
<p>Select the mounted <code>jellyfin.pfx</code> file as the SSL certificate (how to generate this file is explained later):</p>
<p><img src="./MDImgs/Jellyfin-Docker/image-20240213140616778.png" alt="image-20240213140616778"></p>
<p>Check ‘Enable HTTPS’ and restart the container.</p>
<p><img src="./MDImgs/Jellyfin-Docker/image-20240213140600270.png" alt="image-20240213140600270"></p>
<p>There’s no need to enable ‘Force HTTPS’ because the firewall will only allow devices on the local network to access the HTTPS port; the local machine can still access Jellyfin via HTTP.</p>
<h1 id="SSL-Certificate">SSL Certificate</h1>
<p>Firstly, you need the private key <code>jellyfin-priv-key.key</code> and the certificate <code>jellyfin.crt</code> (refer to the <a href="/en/2024/01/31/Docker-Nginx-SSL-Local-Network/#SSL-Certificate">previous article</a>).</p>
<p>Then, use the following command to generate the <code>.pfx</code> file:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">openssl pkcs12 -<span class="built_in">export</span> -out jellyfin.pfx -inkey jellyfin-priv-key.key -<span class="keyword">in</span> jellyfin.crt  -passout pass:</span><br></pre></td></tr></table></figure>
<h1 id="Local-Network-Settings">Local Network Settings</h1>
<blockquote>
<p>Here is my network topology:</p>
<p>Windows host with a Linux virtual machine installed by VMware, and Docker runs on this virtual machine.</p>
<p>The host and other devices share the home network.</p>
</blockquote>
<p>Previously, when running Jellyfin on Windows, I allowed Jellyfin’s direct access to the home network. That is, the firewall rules were authorized for the Jellyfin executable rather than a specific port.</p>
<p>Now, with Docker, the following changes are made:</p>
<ol>
<li>
<p>Add a NAT mapping for the virtual machine, mapping Linux’s 58920 to the host’s 58920 port.</p>
<p><img src="./MDImgs/Jellyfin-Docker/image-20240213141926681.png" alt="image-20240213141926681"></p>
</li>
<li>
<p>Add a firewall inbound rule: <code>58920/tcp</code> for the private network.</p>
</li>
<li>
<p>Reconnect all client devices to the new server.</p>
</li>
</ol>
<hr>
<p>Jellyfin on Windows had port 58920 open, and after switching to the Docker version, it still uses the same port. We can access the web client through <code>https://hostIP:58920</code> in a browser. This ‘tricks’ Google Password Manager in some sense, allowing me to directly use the previous account and password.</p>
<h1 id="Some-Bugs">Some Bugs</h1>
<h2 id="Font-Issue-1">Font Issue 1</h2>
<p>After creating the container, enter the container and execute the following command:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">apt update &amp;&amp; apt install fonts-noto-cjk-extra</span><br></pre></td></tr></table></figure>
<p>Then restart the container.</p>
<p>Otherwise, Chinese characters on the media library cover images appear as squares.</p>
<h2 id="Font-Issue-2">Font Issue 2</h2>
<p>When playing MKV files containing ASS subtitles, the subtitles appear as squares. The issue lies in the absence of the font.</p>
<p>Navigate to ‘Server | Playback’ and set the ‘Alternate Font File Path’, then enable ‘Use Alternate Font’.</p>
<p><img src="./MDImgs/Jellyfin-Docker/image-20240502122456643.png" alt="image-20240502122456643"></p>
<p>Place a woff font file in this directory.</p>
<hr>
<p>Take Microsoft YaHei font, which comes with the Windows operating system, as an example:</p>
<p>Navigate to <code>C:\Windows\Fonts</code>, search for <code>yahei</code>, and copy the font, resulting in three <code>ttc</code> files. We need to convert the <code>ttc</code> files to <code>woff</code>. Use the following Python code:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install fonttools</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fontTools.ttLib <span class="keyword">import</span> TTFont</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert_ttf_to_woff</span>(<span class="params">ttf_path, woff_path</span>):</span><br><span class="line">    font = TTFont(ttf_path, fontNumber=<span class="number">0</span>)</span><br><span class="line">    font.save(woff_path, <span class="string">&quot;woff&quot;</span>)</span><br><span class="line"></span><br><span class="line">ttf_file = <span class="string">r&quot;./msyh.ttc&quot;</span></span><br><span class="line">woff_file = <span class="string">r&quot;./msyh.woff&quot;</span></span><br><span class="line"></span><br><span class="line">convert_ttf_to_woff(ttf_file, woff_file)</span><br></pre></td></tr></table></figure>
<h2 id="Symbolic-Links">Symbolic Links</h2>
<p>On Windows, we can create links using the <code>mklink</code> command. When running Jellyfin on Windows, to prevent Jellyfin from modifying the media directory, I used the <a href="https://github.com/gustaavv/script-house/blob/master/script_house/ops/FileSystemOperation.py#L125"><code>walk_while_link</code> function</a> to create symbolic links for each video file. However, shared folders in virtual machines can be set to read-only, and volumes can also be set to read-only, so there’s no need to do this in Docker.</p>
<p>Moreover, creating symbolic links this way causes videos to be unplayable, and Jellyfin reports errors when reading media data. I suspect this is due to symbolic links because many articles about NAS use hard links rather than symbolic links. However, I don’t prefer using hard links, especially on Windows.</p>
<p>Creating symbolic links for folders is still possible. For example, if the shared folder is <code>jellyfin-docker-media</code>, you can create symbolic links for the <code>films</code> and <code>animes</code> folders in other paths, putting them all under <code>jellyfin-docker-media</code>. This essentially adds an extra layer of abstraction and reduces the number of shared folders for the virtual machine.</p>
<p>In fact, this is what I did. The <code>/mnt/hgfs/jellyfin-media</code> in Docker-compose is the host’s <code>jellyfin-docker-media</code> shared folder.</p>
<h2 id="SSL-Certificate-Expired">SSL Certificate Expired</h2>
<blockquote>
<p>This bug was found on 2025-03-13</p>
</blockquote>
<p>Reproduction Process:</p>
<p>1️⃣ When accessing the webpage via the host IP, a “Select Server” page appears. After clicking, it shows that the connection cannot be established. At this point, the browser displays correctly — it should indicate that the connection is insecure.</p>
<p>2️⃣ Accessing via the Jellyfin Android app results in a connection failure. The server logs are as follows:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[INF] [82] Jellyfin.Api.Auth.CustomAuthenticationHandler: &quot;CustomAuthentication&quot; was not authenticated. Failure message: &quot;Invalid token.&quot;</span><br><span class="line">[INF] [82] Jellyfin.Api.Auth.CustomAuthenticationHandler: &quot;CustomAuthentication&quot; was not authenticated. Failure message: &quot;Invalid token.&quot;</span><br><span class="line">[INF] [82] Jellyfin.Api.Auth.CustomAuthenticationHandler: AuthenticationScheme: &quot;CustomAuthentication&quot; was challenged.</span><br></pre></td></tr></table></figure>
<p>— Still, nothing useful.</p>
<p>3️⃣ Accessing the webpage via the virtual machine IP (HTTP port) allows for a normal login — indicating that the Jellyfin server is functioning properly.</p>
<p>4️⃣ Accessing the webpage via the virtual machine IP (HTTPS port) shows that the connection is insecure; upon checking, the certificate has expired.</p>
<p>For the expired SSL certificate, the solution is: there is no need to create a new server key and CSR; simply have the CA re-sign it. Additionally, Jellyfin requires the generation of an extra <code>.pfx</code> file.</p>
<h1 id="Docker-Knowledge">Docker Knowledge</h1>
<p>By installing Jellyfin, I deepened my understanding of Docker through practical experiences.</p>
<h2 id="EXPOSE">EXPOSE</h2>
<p>I always thought that using the <code>EXPOSE</code> keyword in the Dockerfile was necessary for mapping ports when starting a container. However, that’s not the case.</p>
<blockquote>
<p>The <code>EXPOSE</code> instruction <strong>informs</strong> Docker that the container listens on the specified network ports at runtime. You can specify whether the port listens on TCP or UDP, and the default is TCP if you don’t specify a protocol.</p>
<p>The <code>EXPOSE</code> instruction <strong>doesn’t actually publish the port</strong>. It functions as a type of <strong>documentation</strong> between the person who builds the image and the person who runs the container, about which ports are intended to be published. To publish the port when running the container, use the <code>-p</code> flag on <code>docker run</code> to publish and map one or more ports, or the <code>-P</code> flag to publish all exposed ports and map them to high-order ports.</p>
</blockquote>
<p>These two paragraphs are excerpted from the official documentation. <code>EXPOSE</code> is merely a declarative instruction, and it’s the <code>-p</code> option that truly maps the container’s ports. This mapping can be done freely, without any restrictions.</p>
<p>Therefore, the approach I took in <a href="/en/2024/01/31/Docker-Nginx-SSL-Local-Network/#Nginx-Container">‘Deploying Nginx in Docker and Configuring SSL Certificate for Local Network’</a> is meaningless. There’s no need to create a new image just for <code>EXPOSE</code>.</p>
<blockquote>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx:<span class="number">1.24</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">443</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="Cache-Memory">Cache Memory</h2>
<p>In Portainer statistics, you can see that memory usage is divided into ‘Memory’ and ‘Cache’. What do these two terms mean? Which one represents the current memory usage?</p>
<p><img src="./MDImgs/Jellyfin-Docker/image-20240213085846776.png" alt="image-20240213085846776"></p>
<p>In simple words, ‘Memory’ represents the current memory usage, while ‘Cache’ represents memory that <strong>was previously used</strong>. Memory Cache is a term in Docker, and its value is equal to the value of <code>Inactive(file)</code> in <code>/proc/meminfo</code>.</p>
<blockquote>
<p><code>Inactive(file)</code> — The amount of file cache memory, in kibibytes, that is newly loaded from the disk, or is a candidate for reclaiming.</p>
</blockquote>
<h1 id="References">References</h1>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/624670198">在Docker下安装Jellyfin并正确开启硬件解码</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/640489824">Docker部署开源流媒体软件Jellyfin</a></li>
<li><a href="https://jellyfin.org/docs/general/installation/container#using-docker-compose">Jellyfin doc installation</a></li>
<li><a href="https://jellyfin.org/docs/general/networking/#self-signed-certificate">Jellyfin doc self-signed certificate</a></li>
<li><a href="https://docs.docker.com/engine/reference/builder/#expose">Docker doc EXPOSE</a></li>
<li><a href="https://www.reddit.com/r/portainer/comments/w6pvit/what_is_memory_cache_in_the_container_stats/">What is memory “cache” in the container stat’s?</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/637577131">解决jellyfin中文外挂字幕乱码 - 天高不算高的文章 - 知乎</a></li>
<li><a href="https://echo.solo90.com/archives/1213.html">Jellyfin解决中文字幕乱码的问题！</a></li>
</ul>
]]></content>
      <categories>
        <category>tech</category>
        <category>NAS</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>NAS</tag>
        <tag>Docker</tag>
        <tag>Jellyfin</tag>
      </tags>
  </entry>
  <entry>
    <title>Customize Jellyfin Scan Frequencies</title>
    <url>/en/2024/06/11/Jellyfin-custom-scan-frequency/</url>
    <content><![CDATA[<h1 id="Introduction">Introduction</h1>
<p>In a <a href="/en/2024/02/20/LANraragi-Using-Experience">previous article</a>, I mentioned that ‘Jellyfin’s scheduled task “Scan Media Library” does not consume resources and can run frequently without issues’. In fact, this statement is not entirely correct. The resource consumption of the task depends on the number of media/files.</p>
<p>Recently, I developed a project to scrape videos while automatically generating NFO files and video posters. In this new video directory, there are up to 2000 files (mostly NFO and poster images, with videos not yet downloaded), organized into four-level subdirectories. However, the CPU usage of the scheduled task has increased significantly, indicating an issue.</p>
<p>After some research, I found that using crontab to periodically call the Jellyfin API is currently the only solution to customize scan frequencies for different media libraries.</p>
<span id="more"></span>
<h1 id="Steps">Steps</h1>
<h2 id="Disable-Scheduled-Task">Disable Scheduled Task</h2>
<p>Navigate to ‘Dashboard | Scheduled Tasks | Scan Media Library’ and delete the existing task:</p>
<p><img src="./MDImgs/Jellyfin-custom-scan-frequency/image-20240611131240942.png" alt="image-20240611131240942"></p>
<h2 id="Obtain-an-API-Key">Obtain an API Key</h2>
<p>Navigate to ‘Dashboard | API Keys’ and create a new one:</p>
<p><img src="./MDImgs/Jellyfin-custom-scan-frequency/image-20240611131529710.png" alt="image-20240611131529710"></p>
<h2 id="Get-the-API-Endpoint">Get the API Endpoint</h2>
<p>I recommend using F12 to capture the request:</p>
<img src="./MDImgs/Jellyfin-custom-scan-frequency/image-20240611131657198.png" alt="image-20240611131657198" style="zoom:50%;" />
<p>Press F12 before clicking ‘Refresh’ and find the corresponding request:</p>
<img src="./MDImgs/Jellyfin-custom-scan-frequency/image-20240611131710749.png" alt="image-20240611131710749" style="zoom: 33%;" />
<p><code>/Items/LibraryID/Refresh?ScanParameters</code> – we can directly use this URL.</p>
<p><img src="./MDImgs/Jellyfin-custom-scan-frequency/image-20240611131902161.png" alt="image-20240611131902161"></p>
<h2 id="crontab">crontab</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Edit</span></span><br><span class="line">crontab -e</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">View</span></span><br><span class="line">crontab -l</span><br></pre></td></tr></table></figure>
<p>curl format:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -k -X POST <span class="string">&quot;https://IPAddress:Port/Items/LibraryID/Refresh?Recursive=true&amp;ImageRefreshMode=Default&amp;MetadataRefreshMode=Default&amp;ReplaceAllImages=false&amp;ReplaceAllMetadata=false&quot;</span> -H <span class="string">&quot;Authorization: MediaBrowser Token=APIKey&quot;</span></span><br></pre></td></tr></table></figure>
<p>crontab format:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">New Episodes: every ten minutes</span></span><br><span class="line">*/10 * * * * curl -k -X POST &quot;https://IPAddress:Port/Items/LibraryID/Refresh?Recursive=true&amp;ImageRefreshMode=Default&amp;MetadataRefreshMode=Default&amp;ReplaceAllImages=false&amp;ReplaceAllMetadata=false&quot; -H &quot;Authorization: MediaBrowser Token=APIKey&quot;</span><br></pre></td></tr></table></figure>
<p>Other frequency configurations:</p>
<ul>
<li>Every hour: <code>0 * * * *</code>;</li>
<li>Weekly: e.g., <code>0 17 * * 0</code>, every Sunday at 5 PM;</li>
<li>Bi-weekly: e.g., <code>0 11 1,15 * *</code>, 11 AM on the 1st and 15th of every month;</li>
</ul>
<hr>
<p>View crontab logs:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. Use journalctl</span> </span><br><span class="line">journalctl -u crond</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. Directly view <span class="built_in">log</span> files, <span class="built_in">which</span> is more comprehensive</span></span><br><span class="line">cat /var/log/cron</span><br></pre></td></tr></table></figure>
<h1 id="Results">Results</h1>
<p><img src="./MDImgs/Jellyfin-custom-scan-frequency/image-20240611154250550.png" alt="image-20240611154250550"></p>
<blockquote>
<p>This software is NetData, and I will write a blog post about it later.</p>
</blockquote>
<p>The red one represents scanning the media library of scraped videos, while the blue one is for scanning the anime of the latest season.</p>
<p>Observations:</p>
<ul>
<li>
<p>The average value of the blue does not exceed 5%, so executing it every ten minutes is feasible — this frequency also ensures that Jellyfin scrapes newly downloaded anime promptly.</p>
</li>
<li>
<p>Compared to Jellyfin’s scheduled tasks, scanning all media libraries every hour would clearly impose a heavier CPU load.</p>
</li>
</ul>
<h1 id="References">References</h1>
<ul>
<li><a href="https://www.reddit.com/r/jellyfin/comments/jjxbko/disabling_automatic_scan_per_library/">Disabling automatic scan per library</a></li>
</ul>
]]></content>
      <categories>
        <category>tech</category>
        <category>NAS</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>NAS</tag>
        <tag>Docker</tag>
        <tag>Jellyfin</tag>
      </tags>
  </entry>
  <entry>
    <title>LANraragi Using Experience</title>
    <url>/en/2024/02/20/LANraragi-Using-Experience/</url>
    <content><![CDATA[<h1 id="Preface">Preface</h1>
<p>I have been using LANraragi for a while and encountered some issues. I managed to resolve them, and I thought it would be a good idea to document my experience in a post. You can refer to my <a href="/en/2024/01/25/LANraragi-manga-server/">previous article on installing LANraragi</a> first.</p>
<h1 id="Issue-1-Mounting-Thumbnail-Directory-Causes-Thumbnail-Generation-Failure">Issue 1: Mounting Thumbnail Directory Causes Thumbnail Generation Failure</h1>
<span id="more"></span>
<p>When installing LANraragi, to ensure the <code>content</code> directory is read-only, I set the thumbnail directory as an internal path of the container. This means that every time I deleted and restarted the container, thumbnails will be regenerated. This practice not only wasted computational resources but also deviated from Docker’s best practices. To address this, I used a new volume to store the thumbnails.</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">lanraragi:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">difegue/lanraragi:v.0.9.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">lanraragi</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/mnt/hgfs/doujinshiArchives:/home/koyomi/lanraragi/content:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">lanraragi-database:/home/koyomi/lanraragi/database</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">lanraragi-thumbnail:/home/koyomi/lanraragi/thumb</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">lanraragi-database:</span></span><br><span class="line">  <span class="attr">lanraragi-thumbnail:</span></span><br></pre></td></tr></table></figure>
<p><code>lanraragi-thumbnail</code> is the volume for storing thumbnails.</p>
<p>After starting the container, I noticed that thumbnails could not be generated. Upon entering the ‘Minion Console’, I found the following error:</p>
<p><img src="./MDImgs/LANraragi-Using-Experience/image-20240220111456968.png" alt="image-20240220111456968"></p>
<p>Why did <code>mkdir</code> not have permission? I entered the container:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/home/koyomi/lanraragi <span class="comment"># ls -lah</span></span><br><span class="line">total 192K   </span><br><span class="line">drwxr-sr-x    1 koyomi   koyomi      4.0K Feb 20 02:14 .</span><br><span class="line">drwxr-sr-x    1 koyomi   koyomi      4.0K Feb 20 02:14 ..</span><br><span class="line">-rw-r--r--    1 root     koyomi        52 Oct 29 21:19 config.log</span><br><span class="line">drwxrwxrwx    1 root     root       16.0K Feb 17 11:44 content</span><br><span class="line">drwxr-xr-x    3 koyomi   root        4.0K Feb 20 03:10 database</span><br><span class="line">drwxr-sr-x    3 koyomi   koyomi      4.0K Oct 31 00:58 lib</span><br><span class="line">drwxr-sr-x    2 koyomi   koyomi      4.0K Feb 20 02:14 <span class="built_in">log</span></span><br><span class="line">-rw-r--r--    1 koyomi   koyomi       186 Oct 31 00:58 lrr.conf</span><br><span class="line">-rw-r--r--    1 koyomi   koyomi         8 Feb 20 02:14 oshino</span><br><span class="line">-rw-r--r--    1 koyomi   koyomi     97.6K Oct 29 21:02 package-lock.json</span><br><span class="line">-rw-r--r--    1 koyomi   koyomi      2.1K Oct 27 23:07 package.json</span><br><span class="line">drwxr-sr-x    1 root     koyomi      4.0K Feb 20 02:14 public</span><br><span class="line">drwxr-sr-x    2 koyomi   koyomi      4.0K Oct 31 00:58 script</span><br><span class="line">drwxr-sr-x    3 koyomi   koyomi      4.0K Oct 31 00:58 templates</span><br><span class="line">drwxr-sr-x    4 koyomi   koyomi      4.0K Oct 31 00:58 tests</span><br><span class="line">drwxr-xr-x  257 root     root        4.0K Feb 20 02:19 thumb</span><br><span class="line">drwxr-sr-x    1 koyomi   koyomi      4.0K Oct 31 00:59 tools</span><br></pre></td></tr></table></figure>
<p>Note the <code>thumb</code> directory created by the <code>root</code> user, but the user running LANraragi, <code>koyomi</code>, does not have write permission to that directory. Just granting permission:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 777 thumb</span><br></pre></td></tr></table></figure>
<p>Then, in ‘Tags and Thumbnails’, click on ‘Generate Missing Thumbnails’.</p>
<blockquote>
<p>It’s also worth noting that the default manga directory, <code>content</code>, has elevated permissions intentionally set by the author. Therefore, using <code>content/thumb</code> as the default thumbnail directory will not cause this issue.</p>
</blockquote>
<h1 id="Issue-2-Real-Time-File-Monitoring-Failure">Issue 2: Real-Time File Monitoring Failure</h1>
<p>Refer to the ‘Background Workers’ in the settings:</p>
<blockquote>
<p>This File Watcher is responsible for monitoring your content directory and automatically handling new archives as they come.
If Shinobu is dead or unresponsive, you can reboot her by clicking this button.</p>
</blockquote>
<p>While it should monitor file changes in real-time, I couldn’t use this feature. The reason is that this feature utilizes the <code>inotify</code> API:</p>
<blockquote>
<p>The inotify API provides a mechanism for monitoring filesystem events.  Inotify can be used to monitor individual files, or to monitor directories.  When a directory is monitored, inotify will return events for the directory itself, and for files inside the directory.</p>
</blockquote>
<p>If the file system does not support this API, obviously, LANraragi cannot monitor file changes.</p>
<p>I use VMware’s shared folder to map manga resources to Linux, and the underlying file system of the shared folder does not support <code>inotify</code>.</p>
<p>Solution: Click ‘Restart File Watcher,’ which will scan the entire <code>content</code> directory after restarting. Alternatively, write a scheduled task script to POST <code>/api/shinobu/restart</code>.</p>
<hr>
<p>In fact, many software applications use <code>inotify</code> to monitor file changes, making this a common issue.</p>
<p>My Jellyfin media folder also uses VMware’s shared folder, so it faces the same problem. However, Jellyfin is more popular, which allowed me to find the cause to this issue quickly from related posts. More importantly, Jellyfin explicitly states that only file systems supporting <code>inotify</code> have this functionality, which is a good practice for other software authors to follow when documenting.</p>
<blockquote>
<h2 id="Real-Time-Monitoring">Real Time Monitoring</h2>
<p>This will let Jellyfin automatically update libraries when files are added or modified. Unfortunately, this feature is <strong>only supported on certain filesystems</strong>.</p>
<p>For Linux systems, this is performed by inotify. NFS and rclone do not support inotify, but support can be provided by using a union file system such as mergerfs with your networked file systems.</p>
</blockquote>
<p>By the way, here’s the solution for Jellyfin:</p>
<ul>
<li>Increase the frequency of the scheduled task ‘Scan Media Library’ – this task doesn’t consume many resources, so running it frequently is not an issue.</li>
<li>Execute a refresh through the API.</li>
</ul>
<h1 id="Gains">Gains</h1>
<p>This script is quite useful:</p>
<p><img src="./MDImgs/LANraragi-Using-Experience/image-20240220131323937.png" alt="image-20240220131323937"></p>
<p>My manga directory structure is:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── Author1</span><br><span class="line">│   ├── Manga Archive 1</span><br><span class="line">│   └── Manga Archive 2</span><br><span class="line">└── Author2</span><br><span class="line">    ├── Manga Archive 1</span><br><span class="line">    └── Manga Archive 2</span><br></pre></td></tr></table></figure>
<p>This script categorizes the corresponding manga into a specific author’s category. Although I did not (and will not) tag manga, using author as a category achieves the same effect, allowing me to select manga based on the author.</p>
<h1 id="References">References</h1>
<ul>
<li><a href="https://man7.org/linux/man-pages/man7/inotify.7.html">inotify(7) — Linux manual page</a></li>
<li><a href="https://sugoi.gitbook.io/lanraragi/api-documentation/shinobu-api">LANraragi doc: Shinobu API</a></li>
<li><a href="https://jellyfin.org/docs/general/administration/troubleshooting#real-time-monitoring">Jellyfin doc: Real Time Monitoring</a></li>
<li><a href="https://www.reddit.com/r/jellyfin/comments/ke3cmo/jellyfin_not_picking_up_new_files_on_docker_mount/">Jellyfin not picking up new files on docker mount</a></li>
<li><a href="https://post.smzdm.com/p/a5o645pl/">我的Jellyfin影视库 搭建、信息刮削小记</a></li>
<li><a href="https://vagrant-up.narkive.com/5sdcgSfL/shared-folders-and-inotify-does-it-work-with-vmware-any-way-to-run-vagrant-vmware-in-trial-period">Shared folders and inotify: Does it work with VMWare + Any way to run Vagrant + VMWare in trial period?</a></li>
<li><a href="https://www.reddit.com/r/jellyfin/comments/106qtix/how_does_the_scheduled_task_for_scan_media/">How does the Scheduled Task for Scan Media Library work?</a></li>
</ul>
]]></content>
      <categories>
        <category>tech</category>
        <category>NAS</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>NAS</tag>
        <tag>Docker</tag>
        <tag>Jellyfin</tag>
        <tag>LANraragi</tag>
      </tags>
  </entry>
  <entry>
    <title>LANraragi Manga Server</title>
    <url>/en/2024/01/25/LANraragi-manga-server/</url>
    <content><![CDATA[<h1 id="Preface">Preface</h1>
<p>Recently, I’ve been looking into home media libraries, and most tutorials focus on NAS, but most of the applications actually run on Docker.</p>
<p>Now, I have the following demands for reading manga/doujinshi:</p>
<ul>
<li>I have a large collection of manga archives on my computer and want various devices able to access these resources. —— A server capable of transmitting images via HTTP.</li>
<li>I want to manage the manga directory according to my preferences, not the rules of the server software.</li>
<li>When browsing manga on my phone/tablet, I want an easy-to-use interface. —— A user-friendly client or a Web UI.</li>
<li>The client should have a random manga selection feature. —— Due to the abundance of collected manga, randomly picking one for leisure is the most convenient.</li>
</ul>
<p>Considering these, I chose <a href="https://github.com/Difegue/LANraragi">LANraragi</a>. Although <a href="https://komga.org/">Komga</a>, <a href="https://www.kavitareader.com/#home">Kavita</a>, and <a href="https://github.com/Suwayomi/Tachidesk-Sorayomi">Tachidesk (Sorayomi)</a> are also open-source manga servers, they didn’t quite meet my expectations.</p>
<p>This article includes some excerpts from the official documentation and my own insights.</p>
<span id="more"></span>
<h1 id="LANraragi">LANraragi</h1>
<p>LANraragi offers many features, but I only need a few of them:</p>
<table>
<thead>
<tr>
<th>Features</th>
<th>Required</th>
</tr>
</thead>
<tbody>
<tr>
<td>Upload local manga</td>
<td>✅</td>
</tr>
<tr>
<td>Download online manga</td>
<td>❌</td>
</tr>
<tr>
<td>Adding metadata (tagging)</td>
<td>❌</td>
</tr>
</tbody>
</table>
<p>All manga are uploaded locally by me. I just want to read manga and don’t need to categorize them with tags.</p>
<h1 id="Installation">Installation</h1>
<p>Docker compose:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">lanraragi:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">difegue/lanraragi:v.0.9.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">lanraragi</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">43000</span><span class="string">:3000</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/mnt/hgfs/doujinshiArchives:/home/koyomi/lanraragi/content:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">lanraragi-database:/home/koyomi/lanraragi/database</span></span><br><span class="line">        </span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">lanraragi-database:</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>/home/koyomi/lanraragi/database</code> is the directory where LANraragi stores Redis data. Just create a volume for it.</li>
<li>The <code>/home/koyomi/lanraragi/content</code> directory stores:
<ul>
<li>All manga archives. LANraragi can recursively scan subdirectories —— file management is based on my preferences.</li>
<li>Thumbnails of manga, by default stored in <code>/home/koyomi/lanraragi/content/thumb</code>.</li>
</ul>
</li>
<li>Since the thumbnail directory can be configured, the <code>content</code> directory only contains my own archives. I set permissions to read-only and map the host directory where manga files are stored. LANraragi detects file changes on its own, and I can collect mangas just like before.</li>
</ul>
<hr>
<ul>
<li>Using Docker Compose allows for recording the startup command, making it convenient for reuse later.</li>
<li>Stack in Portainer is a synonym for Docker Compose. After modifying Docker-compose file, Portainer will redeploy it, which is convenient. (Essentially, it’s a combination of <a href="https://docs.docker.com/engine/reference/commandline/compose_down/">down</a> + up, but data won’t be lost because they are stored in volumes.)</li>
</ul>
<h1 id="Configurations">Configurations</h1>
<p>On the first launch, the admin password is <code>kamimamita</code>. After logging in, go to the configuration page:</p>
<p><img src="./MDImgs/LANraragi-manga-server/image-20240125195217045.png" alt="image-20240125195217045"></p>
<p>Firstly, a reminder: don’t forget to save your configuration changes:</p>
<p><img src="./MDImgs/LANraragi-manga-server/image-20240125200813922.png" alt="image-20240125200813922"></p>
<p>Start by changing the initial password:</p>
<p><img src="./MDImgs/LANraragi-manga-server/image-20240125195247264.png" alt="image-20240125195247264"></p>
<p>Other configurations are as follows:</p>
<h2 id="Global-Settings">Global Settings</h2>
<p><img src="./MDImgs/LANraragi-manga-server/image-20240125195357388.png" alt="image-20240125195357388"></p>
<ul>
<li>Set <code>Archives per page</code> to 20; a default of 100 is too many.</li>
<li>The reading history feature is not needed, so I store them on the client side to save server resources.</li>
</ul>
<h2 id="Archive-Files">Archive Files</h2>
<p>No need to change.</p>
<p><img src="./MDImgs/LANraragi-manga-server/image-20240125195541509.png" alt="image-20240125195541509"></p>
<h2 id="Tags-and-Thumbnails">Tags and Thumbnails</h2>
<p><img src="./MDImgs/LANraragi-manga-server/image-20240125195742625.png" alt="image-20240125195742625"></p>
<ul>
<li>The point here is to change the thumbnail directory, due to the read-only mapping during Docker startup and the default thumbnail directory in <code>content</code>.</li>
<li>Turn off the two options related to tags.</li>
</ul>
<h2 id="Background-Workers">Background Workers</h2>
<p><img src="./MDImgs/LANraragi-manga-server/image-20240125200521462.png" alt="image-20240125200521462"></p>
<p>This is used to monitor changes in manga archives in the <code>content</code> directory. If new resources are not processed promptly, a manual restart may be needed.</p>
<h2 id="Plugin-Configuration">Plugin Configuration</h2>
<p><img src="./MDImgs/LANraragi-manga-server/image-20240125200854396.png" alt="image-20240125200854396"></p>
<p>Turn this off as it’s not needed.</p>
<p>All plugins are disabled by default, So you may leave this setting as before.</p>
<h1 id="Usage">Usage</h1>
<p>When mounting your own manga archives for the first time in the <code>content</code> directory, LANraragi requires significant resources to process metadata and thumbnails. According to Portainer’s monitoring data, it used 2-3GB of memory and 2000% CPU (not quite sure how this CPU resource is calculated).</p>
<p>Functions on the homepage:</p>
<ul>
<li>Search;</li>
<li>Display random mangas each time;</li>
<li>List mode / thumbnail mode.</li>
</ul>
<p>Reader configuration:</p>
<p>1️⃣ Default is pagination mode.</p>
<p>2️⃣ I prefer infinite scrolling mode:</p>
<p><img src="./MDImgs/LANraragi-manga-server/image-20240125201748231.png" alt="image-20240125201748231"></p>
<h1 id="Sharing-With-Other-Devices">Sharing With Other Devices</h1>
<p>My Docker runs in a Linux virtual machine, and due to Docker port mapping, LANraragi can be accessed on the host machine through the virtual machine’s IP.</p>
<h2 id="Virtual-Machine-NAT-Passthrough">Virtual Machine NAT Passthrough</h2>
<p>To access LANraragi from other devices, NAT passthrough is needed to map the virtual machine’s port to the host’s port:</p>
<p><img src="./MDImgs/LANraragi-manga-server/image-20240125202125135.png" alt="image-20240125202125135"></p>
<p><img src="./MDImgs/LANraragi-manga-server/image-20240125202155268.png" alt="image-20240125202155268"></p>
<p><img src="./MDImgs/LANraragi-manga-server/image-20240125202344077.png" alt="image-20240125202344077"></p>
<p>As configured in the images, map port 43000 on the virtual machine to port 43000 on the host.</p>
<h2 id="Local-Firewall">Local Firewall</h2>
<p>Windows Firewall will block this port by default, so configure a new rule:</p>
<p><img src="./MDImgs/LANraragi-manga-server/image-20240125202513739.png" alt="image-20240125202513739"></p>
<p><img src="./MDImgs/LANraragi-manga-server/image-20240125202536458.png" alt="image-20240125202536458"></p>
<p><img src="./MDImgs/LANraragi-manga-server/image-20240125202641453.png" alt="image-20240125202641453"></p>
<p>Create a new rule in inbound rules: open port 43000/tcp for private networks (home networks).</p>
<p>Afterward, you can access LANraragi from your phone via <code>computerIP:43000</code>.</p>
<p>The homepage of the mobile web UI is not great, but you can use the <a href="https://sugoi.gitbook.io/lanraragi/advanced-usage/external-readers">officially recommended client</a>. However, since I only want to read randomly, it’s not a big issue. And the interface for reading manga is handy, So I will take it.</p>
<h1 id="References">References</h1>
<ul>
<li><a href="https://sugoi.gitbook.io/lanraragi/">LANraragi Official Documentation</a></li>
</ul>
]]></content>
      <categories>
        <category>tech</category>
        <category>NAS</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>NAS</tag>
        <tag>Docker</tag>
        <tag>LANraragi</tag>
      </tags>
  </entry>
  <entry>
    <title>LocalSend：局域网文件传输利器</title>
    <url>/en/2023/09/04/LocalSend-A-powerful-tool-for-local-file-transfer/</url>
    <content><![CDATA[<h1 id="序言">序言</h1>
<p>最近准备重装笔记本的系统，因此要备份文件，存到台式机里。我将要备份的文件夹压缩，通过 Windows 自带的文件夹共享（局域网共享），传输这些压缩包。</p>
<p>但是，传输过程却非常艰难。有的压缩包有 10 几个 GB，传了一分钟，网速就没了，之后就开始报超时之类的错误。更离谱的是，有个压缩包在两台电脑上<a href="#%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E6%A0%A1%E9%AA%8C">摘要算法</a>的结果不同。</p>
<p>显然，windows SMB 协议既不能保证速度，也不能保证数据正确性，于是我开始寻找更加好用的局域网传输软件。它，就是本文的主角 —— LocalSend</p>
<span id="more"></span>
<h1 id="LocalSend-介绍">LocalSend 介绍</h1>
<p>LocalSend 是一个<strong>跨平台</strong>的局域网传输软件，支持 Windows, Linux, macOS, Android 和 IOS. 这是它的<a href="https://localsend.org/#/">官网</a>；这是它的 <a href="https://github.com/localsend/localsend">GitHub 仓库</a></p>
<p>作者设计了一个基于 HTTP 的传输协议，在<a href="https://github.com/localsend/protocol">这里</a></p>
<p>LocalSend 基本上是开箱即用，没必要专门写一节 quickstart</p>
<p>但是，由于 Windows 防火墙的默认配置，第一次使用该软件时，同局域网内的设备可能无法发现这台 Windows 设备。下面，我将给出解决方案。</p>
<h1 id="防火墙配置">防火墙配置</h1>
<h2 id="我的方案">我的方案</h2>
<ol>
<li>
<p>将家庭 WIFI 设置为专用网络（不建议在公共网络使用局域网传输文件，无论软件作者做了怎样的加密，我都认为是不安全的。因此，这里不讨论公用网络的情况）<img src="./MDImgs/LocalSend-A-powerful-tool-for-local-file-transfer/image-20230904212558782.png" alt="image-20230904212558782"></p>
</li>
<li>
<p>进入『配置防火墙和安全设置』</p>
<p><img src="./MDImgs/LocalSend-A-powerful-tool-for-local-file-transfer/image-20230904212718315.png" alt="image-20230904212718315"></p>
</li>
<li>
<p>『允许应用通过防火墙』——『更改配置』。找到 <code>localsend_app</code>（其他以<code>localsend</code>开头的也可以这样做），将它之前那的单选框选上。以防万一，确保之后的两个单选框也是选上的（应该是默认开启的）。然后点击『确定』</p>
<p><img src="./MDImgs/LocalSend-A-powerful-tool-for-local-file-transfer/image-20230904212911221.png" alt="image-20230904212911221"></p>
</li>
<li>
<p>重启 LocalSend，等待找到目标主机</p>
</li>
</ol>
<h2 id="网上的方案（未验证）">网上的方案（未验证）</h2>
<p>这里也给出网上其他人的解决方法，虽然我觉得全局操作防火墙<strong>很不安全</strong>。</p>
<ol>
<li>
<p>打开『Windows Defender 防火墙』</p>
<p><img src="./MDImgs/LocalSend-A-powerful-tool-for-local-file-transfer/image-20230904213446263.png" alt="image-20230904213446263"></p>
</li>
<li>
<p>『高级设置』——『Windows 防火墙属性』。在『专用配置文件』一栏，将『入站连接』改为『允许』，然后『应用』</p>
<p><img src="./MDImgs/LocalSend-A-powerful-tool-for-local-file-transfer/image-20230904213728952.png" alt="image-20230904213728952"></p>
</li>
<li>
<p>重启 LocalSend，查看能否找到目标主机。如果不行，再将上述『公用配置文件』一栏的『入站连接』改为『允许』，然后『应用』，再次重启 LocalSend 并检验。</p>
</li>
</ol>
<h1 id="文件传输校验">文件传输校验</h1>
<p>在网络传输文件后，通常要使用摘要算法（MD5、SHA1、SHA256等）对比两份文件是否一致，防止由于网络导致的数据丢失。很多现成的工具提供这样的服务，这里我介绍 3 个。</p>
<h2 id="7-zip">7-zip</h2>
<p>7-zip 虽然是一个开源的压缩软件，但也提供摘要函数。</p>
<p>右键选中要摘要的文件，点击『CRC SHA』，选择摘要算法</p>
<p><img src="./MDImgs/LocalSend-A-powerful-tool-for-local-file-transfer/image-20230904214607556.png" alt="image-20230904214607556"></p>
<p>如果右键菜单没有该选项，在 7-zip 中配置即可：</p>
<p><img src="./MDImgs/LocalSend-A-powerful-tool-for-local-file-transfer/image-20230904214947662.png" alt="image-20230904214947662"></p>
<h2 id="openssl">openssl</h2>
<p>Linux 大多数发行版都会自带的工具。也可以在 git bash 中使用这个命令。语法是：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">openssl 摘要算法名 文件路径</span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Gustav@PC MINGW64 ~/Desktop</span><br><span class="line">$ openssl sha256 generate-random-file.cmd</span><br><span class="line">SHA256(generate-random-file.cmd)= 03f9454e4ee7923d08aefa4957282b62a655e7231ea6f4bdd6cdcc4e9a4c1bd9</span><br></pre></td></tr></table></figure>
<h2 id="Certutil">Certutil</h2>
<p>Windows 上的一个用来提供证书服务的工具，也提供了一些摘要算法。语法是：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">certutil <span class="literal">-hashfile</span> 文件路径 摘要算法名</span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Users\Gustav\Desktop&gt; certutil <span class="literal">-hashfile</span> .\generate<span class="literal">-random-file</span>.cmd sha256</span><br><span class="line">SHA256 的 .\generate<span class="literal">-random-file</span>.cmd 哈希:</span><br><span class="line"><span class="number">03</span>f9454e4ee7923d08aefa4957282b62a655e7231ea6f4bdd6cdcc4e9a4c1bd9</span><br><span class="line">CertUtil: <span class="literal">-hashfile</span> 命令成功完成。</span><br></pre></td></tr></table></figure>
<h1 id="总结">总结</h1>
<p>在本文中，我介绍了一款开源好用的局域网传输工具 —— LocalSend。之后，我又给出了 Windows 系统中如何配置防火墙，使得其他设备能发现当前的设备。最后，我介绍了一些常见的对文件进行摘要的工具：从网络下载的文件，理论上都要进行一遍校验，防止数据损坏或丢失。</p>
]]></content>
      <categories>
        <category>softwares</category>
      </categories>
      <tags>
        <tag>LocalSend</tag>
        <tag>settings</tag>
        <tag>Firewall</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Automatically Copying Images When Inserting into Markdown – Using Typora and VS Code as Examples</title>
    <url>/en/2023/07/22/Markdown-Automatically-Copy-When-Inserting-Images-Using-Typora-and-VS-Code-as-Examples/</url>
    <content><![CDATA[<h1 id="Preface">Preface</h1>
<p>With the widespread adoption of Markdown, the efficiency of using traditional text editors for writing appears to be low, especially when dealing with some complex syntax, such as inserting tables or images.</p>
<p>Typora, a well-known Markdown editor, not only features “live rendering” but also offers many convenient functions for writing Markdown. One notable feature is the automatic saving when inserting images: paste an image into a Markdown file (text file), and the image will be automatically saved to a specified path, with the reference automatically created in Markdown.</p>
<p>For someone like me who frequently takes Markdown notes, <strong>this feature should be a standard in the industry</strong>. However, another commonly used editor, VS Code, does not provide good support for this feature. Of course, we shouldn’t expect such a free, universal editor to cover every aspect.</p>
<h1 id="Demands">Demands</h1>
<p>For users who frequently take notes, capturing screenshots and inserting them into Markdown is a common practice. Two aspects affect the user experience in this operation: 1️⃣ screenshot tool 2️⃣ Markdown editor.</p>
<p>With a consistent screenshot tool, the Markdown editor is the key factor in determining the user experience. Below, I will elaborate on how three editors handle image insertion.</p>
<span id="more"></span>
<h1 id="Traditional-Text-Editors">Traditional Text Editors</h1>
<p>These editors are typically “notepads” that support Markdown syntax highlighting, such as Vim, Sublime, etc.</p>
<p>After taking a screenshot, we need to save the image locally and then manually reference the image path using Markdown syntax:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">alt text</span>](<span class="link">image.jpg</span>)</span><br></pre></td></tr></table></figure>
<p>For convenience, screenshot software often stores images in a specific path. To separately store images related to each Markdown file, we also need to manually cut the image to the desired location. Quite cumbersome!</p>
<h1 id="Typora">Typora</h1>
<h2 id="Configuration">Configuration</h2>
<p>Typora provides various features for inserting images, with the one I use most being ‘Copy Image to Specified Path.’</p>
<p>Here, ‘Insert Image’ refers to dragging an image into Typora or pasting it from the clipboard (<code>win + v</code>).</p>
<img src="./MDImgs/Markdown-Automatically-Copy-When-Inserting-Images-Using-Typora-and-VS-Code-as-Examples/image-20230722141038783.png" alt="image-20230722141038783" style="zoom:50%;" />
<p>I choose to save it to the <code>MarkDownImages</code> folder in the same directory as the current Markdown file (which will be automatically created if not present). A better practice would be to choose ‘Copy Image to <code>./$&#123;filename&#125;.assets</code> folder’ for easy migration of Markdown files.</p>
<img src="./MDImgs/Markdown-Automatically-Copy-When-Inserting-Images-Using-Typora-and-VS-Code-as-Examples/image-20230722141359394.png" alt="image-20230722141359394" style="zoom:50%;" />
<p>‘Apply the same rule to images on the network’: When we copy a network image (a URL), Typora will automatically download the image to the specified path and change the URL to a local file reference, as storing images locally is more reliable than relying on images on the internet, which may disappear at any time.</p>
<h2 id="Operation">Operation</h2>
<p>After taking a screenshot, press <code>Ctrl + v</code> in Typora, and the image from the clipboard will be automatically copied to the <code>MarkDownImages</code> folder, with the file name based on the timestamp and less prone to duplication.</p>
<hr>
<img src="./MDImgs/Markdown-Automatically-Copy-When-Inserting-Images-Using-Typora-and-VS-Code-as-Examples/image-20230722142231405.png" alt="image-20230722142231405" style="zoom:67%;" />
<hr>
<img src="./MDImgs/Markdown-Automatically-Copy-When-Inserting-Images-Using-Typora-and-VS-Code-as-Examples/image-20230722142307844.png" alt="image-20230722142307844" style="zoom:67%;" />
<hr>
<img src="./MDImgs/Markdown-Automatically-Copy-When-Inserting-Images-Using-Typora-and-VS-Code-as-Examples/image-20230722142326387.png" alt="image-20230722142326387" style="zoom:67%;" />
<hr>
<p>As seen, this way of inserting images is very elegant and convenient.</p>
<h1 id="VS-Code">VS Code</h1>
<h2 id="Configuration-2">Configuration</h2>
<p>VS Code seems to have recently added a feature similar to Typora, but it only provides the option of ‘Copy Image to Specified Path’.</p>
<p>My configuration here is to copy any file (<code>**/*</code>) inserted to the <code>MarkDownImages</code> folder in the same directory as the current Markdown file (which will be automatically created if not present). The file is named <code>VSCodeCopied-$&#123;fileName&#125;</code>, where <code>$&#123;fileName&#125;</code> is the original file name.</p>
<p><img src="./MDImgs/Markdown-Automatically-Copy-When-Inserting-Images-Using-Typora-and-VS-Code-as-Examples/image-20230722142953270.png" alt="image-20230722142953270"></p>
<p>Alternatively, you can copy the following content directly into <code>settings.json</code>:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;markdown.copyFiles.destination&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;**/*&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./en/MarkDownImages/VSCodeCopied-$&#123;fileName&#125;&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="Operation-2">Operation</h2>
<p>Similar to Typora, press <code>Ctrl + v</code> after taking a screenshot.</p>
<p>Why is the saved image named <code>VSCodeCopied-$&#123;fileName&#125;</code>? This is because when inserting a screenshot into VS Code, it is named as <code>image.png</code>.</p>
<p><img src="./MDImgs/Markdown-Automatically-Copy-When-Inserting-Images-Using-Typora-and-VS-Code-as-Examples/image-20230722143640371.png" alt="image-20230722143640371"></p>
<p>If there are duplicates, a number is added to the file name to distinguish:</p>
<p><img src="./MDImgs/Markdown-Automatically-Copy-When-Inserting-Images-Using-Typora-and-VS-Code-as-Examples/image-20230722143756389.png" alt="image-20230722143756389"></p>
<p><img src="./MDImgs/Markdown-Automatically-Copy-When-Inserting-Images-Using-Typora-and-VS-Code-as-Examples/image-20230722143813041.png" alt="image-20230722143813041"></p>
<p>This is obviously not intuitive and can lead to filename conflicts when collaborating on document writing within a team. Hopefully, future updates to VS Code will address this and provide more options when inserting images.</p>
<h1 id="References">References</h1>
<p><a href="https://support.typora.io/Images/#when-insert-images">Images in Typora: when-insert-images</a></p>
<p><a href="https://www.markdownguide.org/cheat-sheet/">Markdown Cheat Sheet</a></p>
]]></content>
      <categories>
        <category>softwares</category>
      </categories>
      <tags>
        <tag>settings</tag>
        <tag>VS Code</tag>
        <tag>Typora</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Mapping MySQL JSON Fields with MyBatis-Plus</title>
    <url>/en/2023/07/08/MyBatis-Plus-Mapping-MySQL-JSON-Type/</url>
    <content><![CDATA[<h1 id="Preface">Preface</h1>
<p>MySQL supports fields of type JSON. In comparison to string-type fields, JSON fields offer the following advantages:</p>
<ul>
<li>Automatic validation of JSON syntax</li>
<li>Underlying support for quick access to elements within the JSON. There’s no need to read the entire string and then parse it into a JSON object.</li>
</ul>
<p>Logically, JSON is no different from a POJO. Spring MVC has already implemented automatic conversion between the two at the Controller tier, evident in request parameters and return values. So, how can the Repository tier achieve automatic conversion?</p>
<p>This article demonstrates achieving seamless, <strong>non-intrusive</strong> mapping (ORM) between JSON and POJO using MyBatis-Plus in the Repository tier.</p>
<h1 id="Demo">Demo</h1>
<h2 id="Table">Table</h2>
<span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `person` (</span><br><span class="line">  `id` bigint NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` varchar(255) NOT NULL,</span><br><span class="line">  `log` json NOT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB;</span><br></pre></td></tr></table></figure>
<h2 id="Dependencies">Dependencies</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="entity">entity</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;person&quot;, autoResultMap = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(typeHandler = JacksonTypeHandler.class)</span></span><br><span class="line">    <span class="keyword">private</span> PersonLog log;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">PersonLog</span> &#123;</span><br><span class="line">        List&lt;String&gt; hobbies;</span><br><span class="line">        Integer age;</span><br><span class="line">        String address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The <code>PersonLog</code> here is the focal point of our discussion, aiming to map it to JSON.</p>
<p>The <code>Person</code> class needs two annotations, usually used together:</p>
<p><code>TableName#autoResultMap</code>: Responsible for converting JSON to POJO during <strong>query</strong>.</p>
<p><code>TableField#typeHandler</code>: Responsible for converting POJO to JSON during <strong>insert</strong>. Since spring-web-starter has already imported the Jackson dependency, we can directly use <code>JacksonTypeHandler</code>.</p>
<h2 id="mapper-xml">mapper.xml</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.demo.mapper.PersonMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.example.demo.entity.Person&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;log&quot;</span> <span class="attr">property</span>=<span class="string">&quot;log&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;LONGVARCHAR&quot;</span> <span class="attr">typeHandler</span>=<span class="string">&quot;com.baomidou.mybatisplus.extension.handlers.JacksonTypeHandler&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;Base_Column_List&quot;</span>&gt;</span></span><br><span class="line">        id, name, log</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>In the mapper file, specify the full class name of the <code>typeHandler</code> for the <code>log</code> field.</p>
<h2 id="Testing">Testing</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PersonMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Person&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Service tier is omitted.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PersonMapper personMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/json&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">testJSON2BeanMap</span><span class="params">(<span class="meta">@RequestBody</span> Person person)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> personMapper.insert(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/json/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Person <span class="title function_">getPersonById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> personMapper.selectById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Test both methods; if no errors occur, it indicates success. We can also check the database after insertion.</p>
<p>The <strong>non-intrusive ORM</strong> mentioned in the <a href="#Preface">Preface</a> implies that we don’t need to manually execute the conversion between JSON and <code>PersonLog</code> in the code.</p>
<h1 id="Conclusion">Conclusion</h1>
<p>This article demonstrates achieving seamless, <strong>non-intrusive</strong> mapping between JSON and POJO using MyBatis-Plus in the Repository tier.</p>
<p>My exploration of this issue originated from the requirements of a business logic during my internship. When I searched for information online, I found that the descriptions in the posts were not quite complete or intuitive. Therefore, I documented the solution and wrote this article.</p>
<h1 id="Reference">Reference</h1>
<p><a href="https://dev.mysql.com/doc/refman/8.0/en/json.html">The JSON Data Type</a></p>
<p><a href="https://blog.csdn.net/qq_33360626/article/details/119836835">mybatis-plus处理mysql中json格式方法</a></p>
]]></content>
      <categories>
        <category>tech</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring Boot</tag>
        <tag>MySQL</tag>
        <tag>MyBatis-Plus</tag>
        <tag>JDBC</tag>
        <tag>Repository</tag>
      </tags>
  </entry>
  <entry>
    <title>Install MySQL in Docker</title>
    <url>/en/2024/04/12/MySQL-Docker/</url>
    <content><![CDATA[<p>For developers, installing MySQL isn’t difficult, but it often involves several steps. I’ve documented a Docker Compose template that can directly launch a pre-configured MySQL container for development.</p>
<h1 id="Docker-compose">Docker compose</h1>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">43306</span><span class="string">:3306</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql_data:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">mysqld</span> <span class="string">--character-set-server=utf8</span> <span class="string">--collation-server=utf8_general_ci</span> <span class="string">--character-set-client-handshake=FALSE</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> <span class="string">out=$$(mysqladmin</span> <span class="string">ping</span> <span class="string">-h</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="string">-u</span> <span class="string">root</span> <span class="string">--password=$$MYSQL_ROOT_PASSWORD);</span> <span class="string">echo</span> <span class="string">$$out</span> <span class="string">|</span> <span class="string">grep</span> <span class="string">&#x27;mysqld is alive&#x27;</span> <span class="string">||</span> &#123; <span class="string">echo</span> <span class="string">$$out;</span> <span class="string">exit</span> <span class="number">1</span><span class="string">;</span> &#125;</span><br><span class="line">      <span class="attr">start_period:</span> <span class="string">0s</span></span><br><span class="line">      <span class="attr">interval:</span> <span class="string">5s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">3s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">mysql_data:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h1 id="Configuration-Explanation">Configuration Explanation</h1>
<span id="more"></span>
<h2 id="Volumes">Volumes</h2>
<p>MySQL has three directories for storing data:</p>
<ul>
<li><code>/var/lib/mysql</code>: Data directory</li>
<li><code>/var/log/mysql</code>: Log directory</li>
<li><code>/etc/mysql/conf.d</code>: Configuration file directory</li>
</ul>
<p>1️⃣ The most important one is, of course, the data directory.</p>
<p>2️⃣ The configuration file directory is optional, as we can use startup parameters instead. If you want to use it, create a <code>my.cnf</code> file with the following content:</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="attr">default_character_set</span>=utf8</span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">collation_server</span> = utf8_general_ci</span><br><span class="line"><span class="attr">character_set_server</span> = utf8</span><br></pre></td></tr></table></figure>
<p>In fact, only character sets are configured, so it can be replaced by startup parameters.</p>
<p>3️⃣The log directory is the least important.</p>
<h2 id="mysqld-Startup-Parameters">mysqld Startup Parameters</h2>
<p>Use the following command to view them (there are a lot of options, save them to a file and then view):</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -it --<span class="built_in">rm</span> mysql:5.7 --verbose --<span class="built_in">help</span> &gt; mysqld_args.txt</span><br><span class="line">more mysqld_args.txt</span><br></pre></td></tr></table></figure>
<p>Most options in the configuration file can be replaced by startup parameters, which are very suitable for quickly creating containers.</p>
<p>The startup command is:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysqld --character-set-server=utf8 --collation-server=utf8_general_ci --character-set-client-handshake=FALSE</span><br></pre></td></tr></table></figure>
<p><code>--character-set-server</code> and <code>--collation-server</code> are easy to understand.</p>
<p>The meaning of <code>--character-set-client-handshake</code> is:</p>
<blockquote>
<p>Don’t ignore client side character set value sent during handshake.</p>
</blockquote>
<p>Namely, the client’s character set is prioritized, defaulting to <code>TRUE</code>. I set it to <code>FALSE</code> to force the client to use the server’s character set.</p>
<h2 id="Health-Check">Health Check</h2>
<p>The test command is:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">out=$$(mysqladmin ping -h 127.0.0.1 -u root --password=$<span class="variable">$MYSQL_ROOT_PASSWORD</span>); <span class="built_in">echo</span> $<span class="variable">$out</span> | grep <span class="string">&#x27;mysqld is alive&#x27;</span> || &#123; <span class="built_in">echo</span> $<span class="variable">$out</span>; <span class="built_in">exit</span> 1; &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>$$</code> is used to escape <code>$</code>, so every <code>$</code> in the shell command should be doubled.</li>
<li>If the command’s exit code is 0, it means healthy; otherwise, it’s unhealthy.</li>
<li>This command can be used as a template: if the output of <code>mysqladmin ping</code> includes ‘mysqld is alive’, it exits normally. Otherwise, it prints the output and sets the exit code to 1.</li>
</ul>
<h1 id="References">References</h1>
<ul>
<li><a href="https://hub.docker.com/_/mysql">MySQL Docker doc</a></li>
<li><a href="https://stackoverflow.com/questions/42567475/docker-compose-check-if-mysql-connection-is-ready">Docker-compose check if mysql connection is ready</a></li>
</ul>
]]></content>
      <categories>
        <category>tech</category>
        <category>Docker</category>
        <category>DBMS</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>MySQL</tag>
        <tag>DBMS</tag>
      </tags>
  </entry>
  <entry>
    <title>Install and Use Metabase</title>
    <url>/en/2024/05/02/Metabase-install-and-usage/</url>
    <content><![CDATA[<h1 id="Preface">Preface</h1>
<p>Metabase is an open-source data analysis tool that is easy to operate and can connect to various data sources. Although its data analysis capabilities are not as powerful as Excel, Metabase is sufficient for daily use. Moreover, I am more capable of writing SQL than clicking Excel sheets, so Metabase is a good choice for me.</p>
<span id="more"></span>
<h1 id="Docker-compose">Docker compose</h1>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">metabase:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">metabase/metabase:v0.49.5</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">metabase</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">JAVA_TIMEZONE:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">42233</span><span class="string">:3000</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">metabase_data:/metabase.db</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> <span class="string">out=$$(curl</span> <span class="string">localhost:3000/api/health);</span> <span class="string">echo</span> <span class="string">$$out</span> <span class="string">|</span> <span class="string">grep</span> <span class="string">&#x27;&quot;status&quot;:&quot;ok&quot;&#x27;</span> <span class="string">||</span> &#123; <span class="string">echo</span> <span class="string">$$out;</span> <span class="string">exit</span> <span class="number">1</span><span class="string">;</span> &#125;</span><br><span class="line">      <span class="attr">start_period:</span> <span class="string">30s</span></span><br><span class="line">      <span class="attr">interval:</span> <span class="string">2m</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">3s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">metabase_data:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Metabase uses the h2 database by default, stored in the <code>/metabase.db</code> directory. In the production environment, it is recommended to use MySQL or PostgreSQL (this step is not necessary for personal use).</li>
</ul>
<h1 id="Usage">Usage</h1>
<p>You can refer to <a href="https://www.youtube.com/playlist?list=PL5ZlXxM-0LTF7jb-bn0vLv7IIS3Peg3YK">this tutorial</a> for basic usage of Metabase, which covers most types of charts and is suitable for beginners who have not been exposed to data analysis before.</p>
<hr>
<p>It is worth mentioning how to delete a question or dashboard:</p>
<ul>
<li>
<p>First, archive the question or dashboard you want to delete:</p>
<p><img src="./MDImgs/Metabase-install-and-usage/image-20240502141222546.png" alt="image-20240502141222546"></p>
</li>
<li>
<p>Then go to the Archive page (or enter from <code>/archive</code>):</p>
<p><img src="./MDImgs/Metabase-install-and-usage/image-20240502141306567.png" alt="image-20240502141306567"></p>
</li>
<li>
<p>Click delete here:</p>
<p><img src="./MDImgs/Metabase-install-and-usage/image-20240502141533004.png" alt="image-20240502141533004"></p>
</li>
</ul>
<h1 id="References">References</h1>
<ul>
<li><a href="https://www.metabase.com/docs/latest/installation-and-operation/running-metabase-on-docker">Metabase doc: Running Metabase on Docker</a></li>
<li><a href="https://discourse.metabase.com/t/how-to-delete-charts-and-dashboards/5835">How to delete charts and dashboards？</a></li>
</ul>
]]></content>
      <categories>
        <category>tech</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Metabase</tag>
      </tags>
  </entry>
  <entry>
    <title>PotPlayer 启用 Nvidia 超分辨率</title>
    <url>/en/2023/07/09/PotPlayer-Enable-Nvidia-Super-Resolution/</url>
    <content><![CDATA[<h1 id="序言">序言</h1>
<p>Nvidia VSR (Video Super Resolution) 通过 AI 技术优化视频的画面质量，主要表现在锐化低分辨率的视频上。该技术最初只支持 Chrome 和 Edge 浏览器。</p>
<p>如何在本地视频播放器中体验这项技术？PotPlayer 最近发布了相关更新，支持了该技术。</p>
<p>PotPlayer 是目前数一数二的视频播放器，也是我的主力播放器。趁着这次更新，我来记录一下如何在 PotPlayer 上使用 Nvidia Super Resolution.</p>
<h1 id="浏览器开启-VSR">浏览器开启 VSR</h1>
<p>本小节先介绍一下如何让 Chrome 和 Edge 浏览器使用 Nvidia Super Resolution。</p>
<span id="more"></span>
<h2 id="更新驱动版本">更新驱动版本</h2>
<p>更新驱动版本，至少到 532 版</p>
<img src="./MDImgs/PotPlayer-Enable-Nvidia-Super-Resolution/image-20230709161546792.png" alt="image-20230709161546792" style="zoom: 67%;" />
<h2 id="设置">设置</h2>
<p>在 Nvidia Control Panel 中进入如下配置：</p>
<p>开启『超分辨率』，选择质量。数字越大，增强效果越强，同时对 GPU 压力也越大</p>
<p><img src="./MDImgs/PotPlayer-Enable-Nvidia-Super-Resolution/image-20230709161702760.png" alt="image-20230709161702760"></p>
<h1 id="PotPlayer-开启-VSR">PotPlayer 开启 VSR</h1>
<h2 id="更新版本">更新版本</h2>
<p>在 PotPlayer 近期的更新说明中，提到了：</p>
<blockquote>
<p>添加 GPU 超分辨率功能到内置的 D3D11 视频渲染器</p>
</blockquote>
<img src="./MDImgs/PotPlayer-Enable-Nvidia-Super-Resolution/image-20230709162050531.png" alt="image-20230709162050531" style="zoom: 67%;" />
<p>至少将 PotPlayer 升级到这个版本</p>
<h2 id="设置-2">设置</h2>
<p>确保使用的是『Direct3D 11 视频渲染器』，并打开『超分辨率』（默认是关闭的）</p>
<img src="./MDImgs/PotPlayer-Enable-Nvidia-Super-Resolution/image-20230709162350077.png" alt="image-20230709162350077" style="zoom: 80%;" />
<h2 id="测试">测试</h2>
<p>随便打开一个视频，按 <code>Tab</code> 键。如果『视频渲染器 - 缩放』显示的是『GPU Super Resolution』，则说明配置成功了。播放视频时，也可以在任务管理器中看到 GPU 的负载升高。</p>
<p><img src="./MDImgs/PotPlayer-Enable-Nvidia-Super-Resolution/image-20230709162617479.png" alt="image-20230709162617479"></p>
<h1 id="参考文章">参考文章</h1>
<p><a href="https://blogs.nvidia.com/blog/2023/02/28/rtx-video-super-resolution/">Pixel Perfect: RTX Video Super Resolution Now Available for GeForce RTX 40 and 30 Series GPUs</a></p>
<p><a href="https://potplayer.daum.net/">PotPlayer 官网</a></p>
]]></content>
      <categories>
        <category>softwares</category>
      </categories>
      <tags>
        <tag>settings</tag>
        <tag>PotPlayer</tag>
        <tag>Nvidia</tag>
        <tag>VSR</tag>
      </tags>
  </entry>
  <entry>
    <title>Automatic Validation of Request Parameters in Spring MVC</title>
    <url>/en/2023/07/05/Spring-MVC-Automatic-Validation-of-Request-Parameters-Using-Validation-Annotations/</url>
    <content><![CDATA[<h1 id="Preface">Preface</h1>
<p>The controller methods (handlers) are responsible for validating request parameters.</p>
<p>In traditional approaches, validation of request parameters is performed at the beginning of each method. If any parameter fails to meet the conditions, an exception is thrown, or an HTTP error is returned early.</p>
<p>The Validation API provides a series of annotations. By placing these annotations on the properties of an entity class, Spring MVC automatically performs request parameter validation based on the semantics of these annotations. If a parameter does not meet the conditions, an exception is thrown. This saves developers from manually validating request parameters.</p>
<p>The class responsible for automatic parameter validation is actually imported by Spring Boot through automatic configuration, so we need to use the corresponding starter dependencies.</p>
<h1 id="Demo">Demo</h1>
<h2 id="Dependencies">Dependencies</h2>
<span id="more"></span>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>validation-api</code> is the focus of this post.</p>
<img src="./MDImgs/Spring-MVC-Automatic-Validation-of-Request-Parameters-Using-Validation-Annotations/image-20230705200537754.png" alt="image-20230705200537754" style="zoom:80%;" />
<h2 id="Project-Structure">Project Structure</h2>
<p>A standard Spring Boot project generated by Spring Initializer.</p>
<img src="./MDImgs/Spring-MVC-Automatic-Validation-of-Request-Parameters-Using-Validation-Annotations/image-20230705200916180.png" alt="image-20230705200916180" style="zoom: 80%;" />
<h2 id="entity">entity</h2>
<h3 id="User">User</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.gustav.springmvcvalidatordemo.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="meta">@Size(max = 5, message = &quot;Name cannot exceed 5 characters&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Min(value = 0, message = &quot;Age cannot be less than 0&quot;)</span></span><br><span class="line">    <span class="meta">@Max(value = 200, message = &quot;Age cannot be greater than 200&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>@NotBlank</code>: Used on properties of type <code>CharSequence</code>, indicating that the field is non-empty and must have a length of at least 1.</p>
<p><code>@Size</code>: Used on properties of type <code>CharSequence</code> and collection classes, indicating the number of characters/elements in the field. <code>max = 5</code> is the upper bound, and the value cannot exceed this limit. When the property value does not meet the conditions, Spring MVC throws an exception. If the <code>message</code> property is set, the exception content will include the value of <code>message</code>.</p>
<p><code>@NotNull</code>: Literally means the field cannot be <code>null</code>.</p>
<p><code>@Min</code>, <code>@Max</code>: Used on numeric types to constrain the size of the numeric value.</p>
<h3 id="Pet">Pet</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.gustav.springmvcvalidatordemo.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotBlank;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pet</span> &#123;</span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="UserAndPet">UserAndPet</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.gustav.springmvcvalidatordemo.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserAndPet</span> &#123;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Valid</span> <span class="comment">// This annotation ensures that the fields inside the User class are also validated</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Valid</span></span><br><span class="line">    <span class="keyword">private</span> Pet pet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The <code>@Valid</code> annotation tells Spring MVC that the class it annotates also has fields that need validation.</p>
<h2 id="controller">controller</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.gustav.springmvcvalidatordemo.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.gustav.springmvcvalidatordemo.entity.UserAndPet;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoController</span> &#123;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> UserAndPet <span class="title function_">test</span><span class="params">(<span class="meta">@Validated</span> <span class="meta">@RequestBody</span> UserAndPet userAndPet)</span> &#123;</span><br><span class="line">        System.out.println(userAndPet);</span><br><span class="line">        <span class="keyword">return</span> userAndPet;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>@Validated</code> instructs Spring MVC that the current request parameters need to be validated.</p>
<h2 id="Sending-Requests-Using-Postman">Sending Requests Using Postman</h2>
<h3 id="Valid-Request">Valid Request</h3>
<p>The request body is as follows:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;adam&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">15</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pet&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cat&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;east wind&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<img src="./MDImgs/Spring-MVC-Automatic-Validation-of-Request-Parameters-Using-Validation-Annotations/image-20230705202651511.png" alt="image-20230705202651511" style="zoom:67%;" />
<h3 id="Invalid-Request">Invalid Request</h3>
<p>Intentionally exceeding the length limit of <code>user.name</code>. The request body is as follows:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;adam williams&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">15</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pet&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cat&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;east wind&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>The server returns a 400 error.</p>
<p><img src="./MDImgs/Spring-MVC-Automatic-Validation-of-Request-Parameters-Using-Validation-Annotations/image-20230705202748075.png" alt="image-20230705202748075"></p>
<p>The server throws a <code>MethodArgumentNotValidException</code> exception. The content indicates that <code>user.name</code> is an illegal parameter, and our custom <code>message</code> is also displayed.</p>
<p><img src="./MDImgs/Spring-MVC-Automatic-Validation-of-Request-Parameters-Using-Validation-Annotations/image-20230705202916086.png" alt="image-20230705202916086"></p>
<h1 id="Conclusion">Conclusion</h1>
<p>By using Validation annotations, we can easily implement request parameter validation without writing a lot of code.</p>
<p>Imagine if we were to validate request parameters using traditional approach. Just validating <code>user.name</code> would require writing a lot of code:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> UserAndPet <span class="title function_">test</span><span class="params">(<span class="meta">@Validated</span> <span class="meta">@RequestBody</span> UserAndPet userAndPet)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (userAndPet == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (userAndPet.getUser() == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> userAndPet.getUser().getName();</span><br><span class="line">    <span class="keyword">if</span> (!(name != <span class="literal">null</span> &amp;&amp; name.length() &gt;= <span class="number">1</span> &amp;&amp; name.length() &lt;= <span class="number">5</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Validate other request parameters</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Business logic</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Note that this convenient validation is based on the foundation of Spring MVC and Spring Boot. What classes Spring Boot automatically configures, and how Spring MVC uses these classes to do request parameter validation, are beyond the scope of this article. Readers can read the source code on their own or explore other articles.</p>
]]></content>
      <categories>
        <category>tech</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring Boot</tag>
        <tag>Spring MVC</tag>
        <tag>Controller</tag>
      </tags>
  </entry>
  <entry>
    <title>Using Python venv</title>
    <url>/en/2023/12/20/Python-venv-use/</url>
    <content><![CDATA[<h1 id="Preface">Preface</h1>
<p>Python is renowned for its rich set of modules. However, unlike in Java development where Maven uses group Id, artifact Id, and version to uniquely identify a dependency, in practice, most Python projects differentiate modules <strong>solely</strong> by their names. Run <code>pip install &lt;module&gt;</code>, and you’ve got the module. But what about the module version? Most project requirements do not specify versions, leading to constant errors for those who run the project later.</p>
<p>Hence, the concept of a weakened version number undoubtedly does more harm than good. How to solve this issue? By using venv (virtual environment).</p>
<p>If you directly use <code>pip install</code>, all Python projects share these modules, leading to potential compatibility issues. Venv copies the original Python environment. The virtual environment runs only on the copied Python, and the installed modules exist only in that virtual environment. Multiple virtual environments are isolated from each other.</p>
<h1 id="Usage">Usage</h1>
<p>1️⃣Create venv:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">python <span class="literal">-m</span> venv C:\Users\Gustav\Desktop\test\venv</span><br></pre></td></tr></table></figure>
<p>The directory <code>C:\Users\Gustav\Desktop\test\venv</code> is the virtual environment.</p>
<span id="more"></span>
<p>2️⃣Activate:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">venv\Scripts\activate</span><br></pre></td></tr></table></figure>
<p>If <code>(venv)</code> appears in front of the prompt, it means activation is successful, and you can now freely work inside.</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">(venv) C:\Users\Gustav\Desktop\test&gt;pip list</span><br></pre></td></tr></table></figure>
<p>3️⃣Deactivate:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">(venv) C:\Users\Gustav\Desktop\test&gt;deactivate</span><br><span class="line">C:\Users\Gustav\Desktop\test&gt;</span><br></pre></td></tr></table></figure>
<h1 id="Reference">Reference</h1>
<p><a href="https://docs.python.org/3/library/venv.html">venv — Creation of virtual environments</a></p>
]]></content>
      <categories>
        <category>tech</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>venv</tag>
      </tags>
  </entry>
  <entry>
    <title>How to Store Directory Structures in a Database?</title>
    <url>/en/2024/07/19/Store-Directory-Structure-In-DB/</url>
    <content><![CDATA[<h1 id="Introduction">Introduction</h1>
<p><strong>If we want to store directory structures in a database, which type of database should be used?</strong> — Either NoSQL or RDBMS. If we choose NoSQL, we should select one that supports tree structures; if we choose RDBMS, the focus is on table design and query operations.</p>
<p>The key question is: <strong>What operations do we need to perform on the directory structure stored in the database?</strong> Obviously, these operations essentially mimic file operations in a file system.</p>
<ul>
<li>Operation 1: CRUD operations on single files/directories, such as copying, deleting, or moving a file/directory;</li>
<li>Operation 2: Recursively traversing a directory;</li>
</ul>
<p>Considering these two points is crucial for designing an efficient solution. This article presents solutions for both NoSQL and RDBMS, with a focus on the latter. Additionally, it explores using JSON as a solution.</p>
<span id="more"></span>
<h1 id="NoSQL">NoSQL</h1>
<p>Options include:</p>
<ul>
<li>Using a file system like HDFS as the database;</li>
<li>Using graph databases like Neo4j;</li>
</ul>
<blockquote>
<p>There’s no need to introduce new components just to store the directory structure.</p>
</blockquote>
<h1 id="RDBMS">RDBMS</h1>
<p>The following <code>Item</code> tables represent directory items, i.e., nodes in the directory tree.</p>
<h2 id="Tree-Representation">Tree Representation</h2>
<ol>
<li>Storing the parent node pointer:</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Item (</span><br><span class="line">  id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY, </span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;File name&#x27;</span>, </span><br><span class="line">  type TINYINT <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;0 for file, 1 for directory&#x27;</span>, </span><br><span class="line">  parent_id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">-1</span> COMMENT <span class="string">&#x27;Parent node id&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>Storing a list of child node pointers (handling the <code>children</code> field is also tricky):</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Item (</span><br><span class="line">  id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY, </span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;File name&#x27;</span>,</span><br><span class="line">  type TINYINT <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;0 for file, 1 for directory&#x27;</span>, </span><br><span class="line">  children <span class="type">VARCHAR</span>(<span class="number">1023</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> &quot;&quot; COMMENT <span class="string">&#x27;Comma-separated list of child node ids&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>Both methods essentially represent adjacency lists of a directed graph. For both operations 1 and 2, multiple table scans are required, making it <strong>highly inefficient</strong>.</p>
<h2 id="Using-File-Paths-as-Indexes">Using File Paths as Indexes</h2>
<p>Since a file path can uniquely locate a file, it can also serve as a unique index.</p>
<blockquote>
<p>This method is called Materialized Paths.</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Item (</span><br><span class="line">  id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY, </span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;File name&#x27;</span>, </span><br><span class="line">  type TINYINT <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;0 for file, 1 for directory&#x27;</span>, </span><br><span class="line">  path <span class="type">VARCHAR</span>(<span class="number">1023</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;File path&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> INDEX path_idx <span class="keyword">ON</span> Item(path);</span><br></pre></td></tr></table></figure>
<p>In practice, there’s no need to make <code>path</code> a unique index because: (1) Unique indexes are inefficient; (2) <code>path</code> is too long to be a primary key. Therefore, <code>path</code> can be a regular index.</p>
<hr>
<p>For operation 1:</p>
<ol>
<li>Adding, deleting, or querying a file triggers the index, with a time complexity of $O(\log n)$:</li>
</ol>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Item <span class="keyword">WHERE</span> path <span class="operator">=</span> <span class="string">&#x27;path&#x27;</span>;</span><br></pre></td></tr></table></figure>
<ol>
<li>Adding or querying a directory has the same time complexity as file operations, $O(\log n)$.</li>
<li>Renaming a directory has a time complexity of $O(n)$ because it requires updating the paths of all subdirectory items.</li>
<li>Deleting a directory also has a time complexity of $O(n)$ because all subdirectory items must be deleted.</li>
</ol>
<p>For operation 2: Only one index table traversal is needed, and due to the leftmost prefix principle, a full table scan is not required, making it very efficient.</p>
<hr>
<p>In summary, using file paths as indexes is <strong>highly efficient</strong>.</p>
<h2 id="Nested-Sets">Nested Sets</h2>
<p>This data structure is suitable for static data — designed for efficient querying, not for modification.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Item (</span><br><span class="line">  id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY, </span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;File name&#x27;</span>, </span><br><span class="line">  type TINYINT <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;0 for file, 1 for directory&#x27;</span>,</span><br><span class="line">  lft <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>, </span><br><span class="line">  rgt <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>Nested Sets have the following characteristics:</p>
<ul>
<li>
<p>Each node has <code>lft</code> and <code>rgt</code> attributes, recording the left and right endpoints of the interval. For example, the interval for the node with id 1 is <code>(1, 22)</code>.</p>
</li>
<li>
<p>The intervals of all child nodes of a node are sub-intervals of its interval. Thus, an interval corresponds to a subtree. For example, the intervals of all child nodes of the node with id 1 must be sub-intervals of <code>(1, 22)</code>.</p>
</li>
<li>
<p>The intervals of nodes at the same level do not overlap. For example, the intervals at the second level are <code>(2, 9)</code>, <code>(10, 15)</code>, <code>(16, 21)</code>.</p>
</li>
</ul>
<img src="./MDImgs/Store-Directory-Structure-In-DB/486af035-9d1a-43a6-861f-bce47cc010cb.jpeg" alt="img" style="zoom: 67%;" />
<p>The advantage of this design is that operation 2 is efficient. Consider recursively traversing the subtree of the node with id 1:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Item <span class="keyword">WHERE</span> lft <span class="operator">&gt;</span> <span class="number">1</span> <span class="keyword">AND</span> rgt <span class="operator">&lt;</span> <span class="number">22</span>;</span><br></pre></td></tr></table></figure>
<p>For static structures, the <code>lft</code> and <code>rgt</code> of all nodes are pre-calculated and directly inserted into the database in batches. However, performing operation 1, i.e., dynamically modifying the <code>lft</code> and <code>rgt</code> of related nodes, is very costly.</p>
<h1 id="JSON">JSON</h1>
<p>A directory is a structured object and is recursively defined. JSON is similar in this regard. Therefore, a directory can be represented in JSON.</p>
<p>JSON is essentially a string, so it can be stored in any database or simply in a file.</p>
<p>In this case, the operations on the directory structure are consistent with those of file system. So, the time complexity of the operations is low. Since operations are performed in memory, performance is good.</p>
<p>The drawbacks of this approach are that when the directory tree is large, (1) the conversion time between strings and objects increases; (2) memory usage increases; (3) network overhead between the client and server, and between the server and database, becomes excessive.</p>
<p>The third issue is the main drawback of the JSON solution in a C/S architecture, making it inferior to the RDBMS solution:</p>
<ul>
<li>If the directory tree is small, both RDBMS and JSON can be used.</li>
<li>If the directory tree is large, with most selects and few updates, RDBMS is better.</li>
<li>If the directory tree is large and updates are frequent, although JSON is faster for in-memory operations, frequent network communication and large network packets lead to high bandwidth usage, potentially making the overall performance worse than RDBMS.</li>
</ul>
<p>However, for a local database of a program, JSON is undoubtedly the best choice.</p>
<h1 id="Conclusion">Conclusion</h1>
<p>The issue of how to store tree-structured data (such as a file directory) in an RDBMS was actually discussed and concluded thoroughly between 2005 and 2010. From today’s perspective, the rise of NoSQL seems to obscure the essence of this problem, leading me to detour in exploring this issue.</p>
<p>At the same time, a database is also a component. Just as we wouldn’t introduce a new NoSQL database solely to store a directory structure, if we only need to store a directory structure, we don’t even need to introduce a database and can directly use a JSON file.</p>
<h1 id="References">References</h1>
<ul>
<li><a href="https://stackoverflow.com/questions/144344/how-to-store-directory-hierarchy-tree-structure-in-the-database">How to store directory / hierarchy / tree structure in the database?</a></li>
<li><a href="https://troels.arvin.dk/db/rdbms/links/#hierarchical">Hierarchical data in RDBMSs</a></li>
<li><a href="http://www.dbazine.com/oracle/or-articles/tropashko4/">Trees in SQL: Nested Sets and Materialized Path</a></li>
<li><a href="https://web.archive.org/web/20070210003309/http://www.intelligententerprise.com/001020/celko.jhtml?_requestid=697912">Trees in SQL (Internet Archive)</a></li>
<li><a href="https://web.archive.org/web/20050507133249/http://www.developerfusion.com:80/show/4633/2/">Tree structures in ASP.NET and SQL Server - Storing Trees in SQL Server  (Internet Archive)</a></li>
<li><a href="https://stackoverflow.com/questions/4048151/what-are-the-options-for-storing-hierarchical-data-in-a-relational-database">What are the options for storing hierarchical data in a relational database?</a></li>
<li><a href="https://vadimtropashko.wordpress.com/2008/08/09/one-more-nested-intervals-vs-adjacency-list-comparison/">One more Nested Intervals vs. Adjacency List comparison</a></li>
<li><a href="https://www.mongodb.com/docs/manual/applications/data-models-tree-structures/">MongoDB Manual: Model Tree Structures</a></li>
<li><a href="https://www.cnblogs.com/lvyahui/p/6439287.html">多级目录树（森林）的三种数据库存储结构介绍</a></li>
<li><a href="https://blog.uniauth.com/nested-set-model">Using Nested Set Model to Build Hierarchical Data</a></li>
</ul>
]]></content>
      <categories>
        <category>tech</category>
        <category>DBMS</category>
      </categories>
      <tags>
        <tag>DBMS</tag>
      </tags>
  </entry>
  <entry>
    <title>VS Code Remote SSH Login By Key</title>
    <url>/en/2024/01/01/VS-Code-Remote-SSH-Login-By-Key/</url>
    <content><![CDATA[<h1 id="Preface">Preface</h1>
<p>The Remote SSH extension in VS Code provides the functionality to connect to other remote hosts. While the basic way of connection requires a username and password, using a key allows for direct login without the effort to type the password every time.</p>
<p>However, it’s crucial to understand that VS Code merely provides a GUI, and how to use a SSH key to login is a separate matter. These two aspects should not be confused.</p>
<p>This article will primarily explain how to configure SSH keys on both the local machine and the remote machine. Subsequently, it will delve into the usage of the VS Code Remote SSH extension.</p>
<span id="more"></span>
<h1 id="Environment">Environment</h1>
<ul>
<li>Local Machine: Windows 10</li>
<li>Remote Machine: Local virtual machine CentOS 8, root user</li>
</ul>
<h1 id="Local-SSH-Configuration">Local SSH Configuration</h1>
<p>Using the <code>ssh-keygen</code> command will create the RSA public-private key pair for the <strong>local</strong> machine in the <code>C:\users\&lt;user&gt;\.ssh</code> directory:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Users\Gustav\.ssh&gt; <span class="built_in">dir</span></span><br><span class="line">    Directory: C:\Users\Gustav\.ssh</span><br><span class="line">Mode                 LastWriteTime         Length Name</span><br><span class="line"><span class="literal">----</span>                 <span class="literal">-------------</span>         <span class="literal">------</span> <span class="literal">----</span></span><br><span class="line"><span class="literal">-a----</span>          <span class="number">2024</span>/<span class="number">1</span>/<span class="number">1</span>     <span class="number">12</span>:<span class="number">26</span>             <span class="number">91</span> config</span><br><span class="line"><span class="literal">-a----</span>         <span class="number">2023</span>/<span class="number">9</span>/<span class="number">30</span>     <span class="number">18</span>:<span class="number">03</span>           <span class="number">2610</span> id_rsa</span><br><span class="line"><span class="literal">-a----</span>         <span class="number">2023</span>/<span class="number">9</span>/<span class="number">30</span>     <span class="number">18</span>:<span class="number">03</span>            <span class="number">576</span> id_rsa.pub</span><br><span class="line"><span class="literal">-a----</span>        <span class="number">2023</span>/<span class="number">12</span>/<span class="number">18</span>     <span class="number">20</span>:<span class="number">42</span>           <span class="number">1398</span> known_hosts</span><br><span class="line"><span class="literal">-a----</span>         <span class="number">2023</span>/<span class="number">9</span>/<span class="number">30</span>     <span class="number">18</span>:<span class="number">03</span>             <span class="number">92</span> known_hosts.old</span><br></pre></td></tr></table></figure>
<p><code>id_rsa</code> is the private key, and <code>id_rsa.pub</code> is the public key.</p>
<h1 id="Remote-Host-SSH-Configuration">Remote Host SSH Configuration</h1>
<p>Upload the <strong>local</strong> <code>id_rsa.pub</code> to the <code>~/ssh</code> directory on the Linux remote host and rename it to <code>authorized_keys</code>:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@CentOS100 .ssh]<span class="comment"># ll</span></span><br><span class="line">total 16</span><br><span class="line">-rw-r--r--. 1 root root 576 Jan  1 11:50 authorized_keys</span><br><span class="line">-rw-------. 1 root root 411 Jul  1  2023 id_ed25519</span><br><span class="line">-rw-r--r--. 1 root root  96 Jul  1  2023 id_ed25519.pub</span><br><span class="line">-rw-r--r--. 1 root root 880 Dec 18 21:07 known_hosts</span><br></pre></td></tr></table></figure>
<h1 id="测试">测试</h1>
<p>The steps above complete the configuration needed for SSH key login. Open PowerShell on the local machine and test the connection using <code>ssh &lt;user&gt;@&lt;ip&gt;</code>. It should allow direct login without entering a password.</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Users\Gustav&gt; ssh root@CentOS100</span><br><span class="line">Activate the web console with: systemctl enable <span class="literal">--now</span> cockpit.socket</span><br><span class="line"></span><br><span class="line">Last login: Mon Jan  <span class="number">1</span> <span class="number">12</span>:<span class="number">26</span>:<span class="number">15</span> <span class="number">2024</span> from &lt;ip&gt;</span><br><span class="line">[<span class="type">root</span>@<span class="type">CentOS100</span> ~]<span class="comment"># pwd</span></span><br><span class="line">/root</span><br></pre></td></tr></table></figure>
<h1 id="VS-Code-Configuration">VS Code Configuration</h1>
<ol>
<li>
<p>Install the <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh">Remote - SSH</a> extension:</p>
<p><img src="./MDImgs/VS-Code-Remote-SSH-Login-By-Key/image-20240101130622357.png" alt="image-20240101130622357"></p>
</li>
<li>
<p>Click these three buttons sequentially to access the configuration file:</p>
<p><img src="./MDImgs/VS-Code-Remote-SSH-Login-By-Key/image-20240101130733756.png" alt="image-20240101130733756"></p>
</li>
<li>
<p>Fill in the configuration file (this file is essentially the SSH configuration for the host):</p>
<p><img src="./MDImgs/VS-Code-Remote-SSH-Login-By-Key/image-20240101130804525.png" alt="image-20240101130804525"></p>
<ul>
<li><code>Host</code>: an ID for this remote connection; you can choose any name.</li>
<li><code>HostName</code>: Domain name or IP address of the remote host.</li>
<li><code>User</code>: User to login to the remote host.</li>
<li><code>IdentityFile</code>: Path to the <strong>private key</strong>, whose public key is in <code>authorized_keys</code>.</li>
</ul>
</li>
</ol>
<p>A few notes about the configuration file:</p>
<ul>
<li>If <code>authorized_keys</code> is not configured on the remote host, the <code>IdentityFile</code> property will not take effect, and it will prompt for a password during login.</li>
<li>In this case, <code>IdentityFile</code> is not necessary because <code>authorized_keys</code> is the local machine’s public key, and SSH defaults to using the local machine’s private key for connection attempts.</li>
<li>Generally, <code>authorized_keys</code> won’t be the local machine’s public key, and in such cases, <code>IdentityFile</code> must be configured; otherwise, a password will be required.</li>
</ul>
<h1 id="References">References</h1>
<ul>
<li><a href="https://medium.com/@sean4deepak/using-ssh-key-authentication-in-visual-studio-codes-remote-ssh-extension-4e5b922448e7">Using SSH Key Authentication in Visual Studio Code’ s Remote SSH Extension</a></li>
<li><a href="https://adamtheautomator.com/add-ssh-key-to-vs-code/">Add SSH Key to VS Code and Connect to a Host</a></li>
<li><a href="https://stackoverflow.com/questions/48328446/id-rsa-pub-file-ssh-error-invalid-format">id_rsa.pub file SSH Error: invalid format</a></li>
</ul>
]]></content>
      <categories>
        <category>softwares</category>
      </categories>
      <tags>
        <tag>settings</tag>
        <tag>VS Code</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>Chat with LLM: JWT</title>
    <url>/en/2025/03/31/chat-with-LLM-JWT/</url>
    <content><![CDATA[<h1 id="Introduction">Introduction</h1>
<blockquote>
<p>“Chat with LLM” refers to learning knowledge by interacting with LLM chat tools (such as DeepSeek, ChatGPT). Learning through Q&amp;A is more efficient. The content of these blog posts on “Chat with LLM” is mainly derived from my conversations with LLM chat tools.</p>
</blockquote>
<p>This post explains the principles, workflow, advantages, and disadvantages of JWT.</p>
<span id="more"></span>
<h1 id="Q1-JWT-Principles">Q1. JWT Principles</h1>
<p>Q:</p>
<p>Introduce the principles of JWT.</p>
<p>A:</p>
<p>JSON Web Token (JWT) is an open standard (RFC 7519) used for securely transmitting information between networked applications. Its core principle is to ensure the integrity and trustworthiness of the information via digital signatures or encryption, and it is commonly used for authentication and authorization. Below is a detailed explanation of JWT’s principles and workflow:</p>
<hr>
<p><strong>1. JWT Structure</strong><br>
JWT consists of three parts, separated by dots (<code>.</code>), in the form: <code>Header.Payload.Signature</code>. Example: <code>xxxxx.yyyyy.zzzzz</code></p>
<p><strong>1.1 Header</strong></p>
<ul>
<li><strong>Purpose</strong>: Declares the token type (JWT) and the signature algorithm (e.g., HMAC SHA256 or RSA).</li>
<li><strong>Format</strong>: A JSON object that is Base64Url encoded.</li>
<li><strong>Example</strong>:<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span>  <span class="comment">// signature algorithm</span></span><br><span class="line">  <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span>     <span class="comment">// token type</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>1.2 Payload</strong></p>
<ul>
<li><strong>Purpose</strong>: Carries the actual data to be transmitted (known as “claims”).</li>
<li><strong>Format</strong>: A JSON object that is Base64Url encoded.</li>
<li><strong>Types of claims</strong>:
<ul>
<li><strong>Registered Claims</strong>: Standard fields, such as <code>iss</code> (issuer), <code>exp</code> (expiration time), <code>sub</code> (subject), etc.</li>
<li><strong>Public Claims</strong>: Customizable claims, but must avoid collisions.</li>
<li><strong>Private Claims</strong>: Fields agreed upon between the parties.</li>
</ul>
</li>
<li><strong>Example</strong>:<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user123&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Alice&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exp&quot;</span><span class="punctuation">:</span> <span class="number">1620000000</span>  <span class="comment">// expiration timestamp</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>1.3 Signature</strong></p>
<ul>
<li><strong>Purpose</strong>: Verifies that the message has not been tampered with and ensures the authenticity of the sender.</li>
<li><strong>Generation</strong>: Concatenate the Base64Url encoded Header and Payload with <code>.</code>, and then generate the signature using the algorithm specified in the Header and a secret key.</li>
<li><strong>Example</strong> (using the HS256 algorithm):<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">HMACSHA256</span>(</span><br><span class="line">  <span class="title function_">base64UrlEncode</span>(header) + <span class="string">&quot;.&quot;</span> + <span class="title function_">base64UrlEncode</span>(payload),</span><br><span class="line">  secretKey</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p><strong>2. JWT Workflow</strong></p>
<ol>
<li>
<p><strong>User Login</strong>: The client submits credentials (e.g., username and password) to the server.</p>
</li>
<li>
<p><strong>JWT Generation</strong>: After verifying the credentials, the server generates a JWT:</p>
<ul>
<li>Constructs the Header and Payload.</li>
<li>Generates the signature using a secret key, combining all three parts to form a complete JWT.</li>
</ul>
</li>
<li>
<p><strong>Returning the JWT to the Client</strong>: The client stores the JWT locally (e.g., in LocalStorage or Cookie).</p>
</li>
<li>
<p><strong>Client Requests with JWT</strong>: Subsequent requests carry the JWT in the <code>Authorization</code> header in the <code>Bearer</code> format:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Authorization: Bearer &lt;JWT&gt;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>Server JWT Verification</strong></p>
<ul>
<li>Decodes the Header and Payload, and checks if the signature is valid (to prevent tampering).</li>
<li>Verifies the claims (e.g., whether <code>exp</code> has expired or if <code>iss</code> is valid).</li>
<li>If verification passes, returns the requested resource.</li>
</ul>
</li>
</ol>
<hr>
<p><strong>3. JWT Security</strong></p>
<ul>
<li><strong>Information Exposure</strong>: The Header and Payload are only Base64 encoded and are <strong>not encrypted</strong>, so sensitive information (e.g., passwords) should not be included.</li>
<li><strong>Transmission Security</strong>: Must be transmitted via HTTPS to prevent man-in-the-middle attacks.</li>
<li><strong>Key Management</strong>:
<ul>
<li>For symmetric algorithms (e.g., HS256): The key must be strictly protected.</li>
<li>For asymmetric algorithms (e.g., RS256): The private key signs, and the public key verifies, which is more secure.</li>
</ul>
</li>
<li><strong>Tamper Resistance</strong>: The signature ensures data integrity, but care must be taken to prevent key leakage.</li>
</ul>
<hr>
<p><strong>4. Advantages and Disadvantages of JWT</strong></p>
<p><strong>Advantages</strong></p>
<ul>
<li><strong>Stateless</strong>: The server does not need to store session information, making it suitable for distributed systems.</li>
<li><strong>Cross-Domain Support</strong>: Easily used in cross-domain scenarios (e.g., microservices, single sign-on).</li>
<li><strong>Flexibility</strong>: The Payload can be customized to include additional data.</li>
</ul>
<p><strong>Disadvantages</strong></p>
<ul>
<li><strong>Revocation Challenge</strong>: Once issued, a JWT cannot be forcibly invalidated before its expiration (requires token blacklisting or short expiration times).</li>
<li><strong>Storage Risk</strong>: Client-side storage may be susceptible to XSS attacks (using HttpOnly Cookie is recommended).</li>
</ul>
<hr>
<p><strong>5. Typical Use Cases</strong></p>
<ol>
<li>User authentication (e.g., OAuth 2.0 Bearer Token).</li>
<li>API authentication between services (microservices architecture).</li>
<li>Single sign-on (SSO).</li>
</ol>
<hr>
<p>Through the principles above, JWT achieves secure information transmission in a compact and self-contained manner, becoming a widely used authentication solution in modern web development.</p>
<h1 id="Q2-Which-Parts-Are-Plaintext">Q2. Which Parts Are Plaintext?</h1>
<p>Q:</p>
<p>Which parts among the three are effectively plaintext to the user?</p>
<p>A:</p>
<p>In the three parts of a JWT (Header, Payload, Signature), the <strong>Header and Payload are plaintext</strong> for the user, while the Signature is an encrypted signature that cannot be directly interpreted. Here is a detailed explanation:</p>
<hr>
<p><strong>1. Header and Payload are Plaintext</strong></p>
<ul>
<li>
<p><strong>Reason</strong>: The Header and Payload are only <strong>Base64Url encoded</strong> (a URL-safe encoding method) and are <strong>not encrypted</strong>.</p>
</li>
<li>
<p><strong>Characteristics</strong>:</p>
<ul>
<li><strong>Reversible</strong>: Anyone can decode them using a Base64Url decoding tool (such as <a href="https://jwt.io">jwt.io</a>) to obtain the original JSON data.</li>
<li><strong>Transparency</strong>: The decoded content can be directly viewed, for example:<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Decoded Header:</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Decoded Payload:</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user123&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Alice&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exp&quot;</span><span class="punctuation">:</span> <span class="number">1620000000</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p><strong>Risks</strong>:</p>
<ul>
<li><strong>Sensitive Information Leakage</strong>: If sensitive data (such as user ID, email, permissions) are stored in the Payload, an attacker can easily read them.</li>
<li><strong>Tampering Risk</strong>: Although they can be decoded and modified, it is not possible to forge a valid signature without the key.</li>
</ul>
</li>
</ul>
<hr>
<p><strong>2. Signature is Ciphertext</strong></p>
<ul>
<li><strong>Reason</strong>: The Signature is the <strong>encrypted signature</strong> of the Header and Payload, generated using a secret key and a specified algorithm (e.g., HS256, RS256).</li>
<li><strong>Characteristics</strong>:
<ul>
<li><strong>Non-reversible</strong>: It cannot be decoded directly to retrieve the original information; it is essentially a hash or an encrypted binary data.</li>
<li><strong>Tamper-Proof</strong>: The server verifies the Signature to ensure that the Header and Payload have not been altered.</li>
</ul>
</li>
</ul>
<hr>
<p><strong>3. Example from a User’s Perspective</strong></p>
<p>Assume a JWT as follows:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyMTIzIiwibmFtZSI6IkFsaWNlIiwiZXhwIjoxNjIwMDAwMDAwfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><strong>Header</strong>：<code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</code> . Decoded:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>Payload</strong>：<code>eyJzdWIiOiJ1c2VyMTIzIiwibmFtZSI6IkFsaWNlIiwiZXhwIjoxNjIwMDAwMDAwfQ</code> . Decoded:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user123&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Alice&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;exp&quot;</span><span class="punctuation">:</span> <span class="number">1620000000</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>Signature</strong>：<code>SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</code> .This cannot be directly decoded and requires a key to verify.</p>
</li>
</ul>
<hr>
<p><strong>4. Security Recommendations</strong></p>
<ol>
<li><strong>Avoid Sensitive Data</strong>: Do not store passwords, keys, or other sensitive information in the Header or Payload.</li>
<li><strong>Use HTTPS</strong>: Prevent JWT theft during transmission.</li>
<li><strong>Short Expiration</strong>: Set a reasonable expiration time using the <code>exp</code> field to reduce the risk if compromised.</li>
<li><strong>Encrypt Sensitive Fields</strong>: If sensitive data must be stored, consider additional encryption for the Payload (e.g., using JWE).</li>
</ol>
<hr>
<p><strong>Summary</strong></p>
<ul>
<li><strong>Plaintext Parts</strong>: Header and Payload (Base64Url encoded and reversible).</li>
<li><strong>Ciphertext Part</strong>: Signature (encrypted signature, irreversible).</li>
<li><strong>Core Security Mechanism</strong>: Relies on the Signature to prevent tampering, not on hiding the data itself.</li>
</ul>
<h1 id="Q3-Hashing-vs-Encryption">Q3. Hashing vs. Encryption</h1>
<p>Q:</p>
<p>So does the Signature first hash the Header + Payload and then encrypt the hash? When the server receives the Signature, does it first decrypt it and then verify whether the hash is correct?</p>
<p>A:</p>
<p>Your question touches on the core mechanism behind JWT signature generation and verification, but it is important to distinguish between <strong>hashing</strong> and <strong>encryption</strong>. Different signature algorithms (such as <code>HS256</code> and <code>RS256</code>) implement this process in distinct ways. The specific procedures are as follows:</p>
<hr>
<p><strong>1. JWT Signature Generation Process</strong></p>
<p><strong>(1) HMAC Algorithm (e.g., HS256)</strong></p>
<ul>
<li><strong>Core Mechanism</strong>: Based on a keyed hash (no encryption involved).</li>
<li><strong>Steps</strong>:
<ol>
<li>Encode the Header and Payload in Base64Url and concatenate them with a dot (resulting in <code>header_b64.payload_b64</code>).</li>
<li><strong>Compute the hash</strong>: Use HMAC combined with a hash function (such as SHA256) and a secret key to generate a Message Authentication Code (MAC).</li>
<li><strong>Generate the Signature</strong>: Base64Url encode the hash result to obtain the Signature.</li>
</ol>
</li>
<li><strong>Formula</strong>:<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Signature = Base64UrlEncode(HMAC_SHA256(header_b64.payload_b64, secret_key))</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>(2) RSA Algorithm (e.g., RS256)</strong></p>
<ul>
<li><strong>Core Mechanism</strong>: Based on asymmetric encryption signatures (involving encryption).</li>
<li><strong>Steps</strong>:
<ol>
<li>Encode and concatenate the Header and Payload in Base64Url (forming <code>header_b64.payload_b64</code>).</li>
<li><strong>Compute the hash</strong>: Use a hash function (e.g., SHA256) to generate a hash of the concatenated string.</li>
<li><strong>Encrypt the hash</strong>: Encrypt the hash using the private key (i.e., create a digital signature).</li>
<li><strong>Generate the Signature</strong>: Base64Url encode the encrypted result to obtain the Signature.</li>
</ol>
</li>
<li><strong>Formula</strong>:<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Signature = Base64UrlEncode(RSA_Encrypt(SHA256(header_b64.payload_b64), private_key))</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p><strong>2. Server Verification Process</strong></p>
<p>When the server receives a JWT, it verifies the signature as follows:</p>
<p><strong>(1) HMAC Algorithm (HS256)</strong></p>
<ul>
<li><strong>No Decryption Needed</strong>: Since HMAC is a keyed hash, not encryption.</li>
<li><strong>Verification Steps</strong>:
<ol>
<li>Recompute the HMAC hash of <code>header_b64.payload_b64</code> using the same secret key.</li>
<li>Compare the computed result with the decoded Signature from the JWT.</li>
<li>If they match, the data has not been tampered with.</li>
</ol>
</li>
</ul>
<p><strong>(2) RSA Algorithm (RS256)</strong></p>
<ul>
<li><strong>“Decryption” Required</strong>: Here, the “decryption” is actually the signature verification process.</li>
<li><strong>Verification Steps</strong>:
<ol>
<li>Use the public key to decrypt the decoded Signature, obtaining the original hash.</li>
<li>Recompute the hash of <code>header_b64.payload_b64</code> (e.g., using SHA256).</li>
<li>Compare the decrypted hash with the recomputed hash.</li>
<li>If they match, the data has not been tampered with.</li>
</ol>
</li>
</ul>
<hr>
<p><strong>3. Key Differences Summary</strong></p>
<table>
<thead>
<tr>
<th><strong>Algorithm Type</strong></th>
<th>Keyed Hash (HMAC)</th>
<th>Asymmetric Encryption (RSA)</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Signature Generation</strong></td>
<td>Based on a keyed hash, no encryption</td>
<td>Private key encrypts the hash value</td>
</tr>
<tr>
<td><strong>Signature Verification</strong></td>
<td>Recompute and compare hash</td>
<td>Public key decrypts signature, then compare hash</td>
</tr>
<tr>
<td><strong>Key Management</strong></td>
<td>Symmetric key (kept on the server)</td>
<td>Asymmetric keys (private key for signing, public key for verification)</td>
</tr>
<tr>
<td><strong>Security</strong></td>
<td>Relies on the secrecy of the key</td>
<td>Relies on the security of the private key</td>
</tr>
</tbody>
</table>
<hr>
<p><strong>4. Answering Your Questions</strong></p>
<ul>
<li>
<p><strong>Question 1</strong>: “Does the Signature first hash the Header + Payload and then encrypt the hash?”</p>
<ul>
<li><strong>Answer</strong>:
<ul>
<li>For <strong>HMAC (e.g., HS256)</strong>: It only hashes (using a secret key), without encryption.</li>
<li>For <strong>RSA (e.g., RS256)</strong>: It first hashes, then encrypts the hash value using the private key.</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>Question 2</strong>: “When the server receives the Signature, does it first decrypt it and then verify whether the hash is correct?”</p>
<ul>
<li><strong>Answer</strong>:
<ul>
<li>For <strong>HMAC</strong>: There is no decryption; it simply recomputes the hash and compares.</li>
<li>For <strong>RSA</strong>: It needs to “decrypt” (verify the signature using the public key) to retrieve the hash, then compare it with the recomputed hash.</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<p><strong>5. Clearing Up Misconceptions</strong></p>
<ul>
<li><strong>Hashing ≠ Encryption</strong>:
<ul>
<li>Hashing is a one-way, irreversible process (e.g., SHA256) used to ensure data integrity.</li>
<li>Encryption is a reversible process (e.g., RSA) used to protect data confidentiality.</li>
</ul>
</li>
<li><strong>The Essence of JWT Signatures</strong>:
<ul>
<li>HMAC is a <strong>keyed hash</strong> (providing integrity and authentication).</li>
<li>RSA encrypts the hash value (providing integrity and non-repudiation).</li>
</ul>
</li>
</ul>
<hr>
<p><strong>6. Practical Code Examples (Pseudocode)</strong></p>
<p><strong>HS256 Signature Verification</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">verify_hmac</span>(<span class="params">jwt, secret_key</span>):</span><br><span class="line">    header_b64, payload_b64, signature_b64 = jwt.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    data = header_b64 + <span class="string">&quot;.&quot;</span> + payload_b64</span><br><span class="line">    expected_signature = HMAC_SHA256(data, secret_key)</span><br><span class="line">    <span class="keyword">return</span> expected_signature == base64url_decode(signature_b64)</span><br></pre></td></tr></table></figure>
<p><strong>RS256 Signature Verification</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">verify_rsa</span>(<span class="params">jwt, public_key</span>):</span><br><span class="line">    header_b64, payload_b64, signature_b64 = jwt.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    data = header_b64 + <span class="string">&quot;.&quot;</span> + payload_b64</span><br><span class="line">    decoded_signature = base64url_decode(signature_b64)</span><br><span class="line">    decrypted_hash = RSA_Decrypt(decoded_signature, public_key)  <span class="comment"># 用公钥“解密”</span></span><br><span class="line">    actual_hash = SHA256(data)</span><br><span class="line">    <span class="keyword">return</span> decrypted_hash == actual_hash</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>Summary</strong></p>
<ul>
<li>The signature mechanism of JWT varies depending on the algorithm:
<ul>
<li><strong>HMAC</strong>: Relies on key-based hashing, verifies by directly comparing hash values.</li>
<li><strong>RSA</strong>: Encrypts the hash value with a private key, verifies by decrypting with the public key and comparing.</li>
</ul>
</li>
<li><strong>Core Objective</strong>: Ensures that the Header and Payload have not been tampered with, rather than encrypting the data itself.</li>
<li><strong>Security Recommendation</strong>: Choose the algorithm based on the scenario (HS256 is simple and efficient, RS256 is more suitable for distributed systems).</li>
</ul>
<h1 id="Q4-Forward-Secrecy">Q4. Forward Secrecy</h1>
<p>Q:</p>
<p>According to what you said, regardless of HMAC or RSA, JWT does not support forward secrecy.</p>
<p>A:</p>
<p>Yes, your understanding is correct. <strong>JWT (whether using HMAC or RSA signature algorithms) does not support Forward Secrecy (FS)</strong>. Here is a detailed explanation:</p>
<hr>
<p><strong>1. Core Concept of Forward Secrecy</strong></p>
<p>Forward secrecy is a security feature that ensures that even if a long-term key (such as the server’s private key or the shared key for HMAC) is compromised in the future, an attacker cannot decrypt past communications or forge historical sessions.</p>
<p><strong>Key to achieving forward secrecy</strong>: Each session uses a temporarily generated key (as in TLS with ECDHE key exchange), and the key is destroyed after the session ends, rather than relying on a long-term key.</p>
<hr>
<p><strong>2. Why JWT’s Signature Mechanism Does Not Support Forward Secrecy</strong></p>
<p><strong>(1) HMAC (Symmetric Signature Algorithms like HS256)</strong></p>
<ul>
<li><strong>Relies on a Long-Term Key</strong>: HMAC uses the same shared secret key (<code>secret_key</code>) for both signing and verification, and this key is usually long-lived.</li>
<li><strong>Risk</strong>: Once the <code>secret_key</code> is compromised, an attacker can forge any historical or future JWT.</li>
<li><strong>No Temporary Key Mechanism</strong>: The HMAC key does not change per session, so forward secrecy cannot be achieved.</li>
</ul>
<p><strong>(2) RSA (Asymmetric Signature Algorithms like RS256)</strong></p>
<ul>
<li><strong>Relies on a Long-Term Private Key</strong>: The signing is done using a fixed private key, while the public key is used for verification.</li>
<li><strong>Risk</strong>: If the private key is compromised, an attacker can forge historical or future JWTs.</li>
<li><strong>Fixed Key Nature</strong>: The RSA private key is generally static, and the signature process does not involve temporary keys.</li>
</ul>
<hr>
<p><strong>3. Why JWT Does Not Natively Support Forward Secrecy</strong></p>
<ul>
<li><strong>Different Design Goals</strong>: JWT is designed to be a stateless, self-contained token mechanism, rather than managing dynamic sessions.</li>
<li><strong>Static Token Characteristics</strong>: Once a JWT is issued, its validity is solely based on its signature and claims (such as <code>exp</code>), and the key cannot be dynamically updated.</li>
<li><strong>Limited Use Case</strong>: JWT is typically used for authentication and authorization rather than end-to-end encrypted communications, so it does not incorporate complex key negotiation mechanisms.</li>
</ul>
<hr>
<p><strong>4. Mitigation Strategies for the Lack of Forward Secrecy in JWT</strong></p>
<p>Although JWT itself does not support forward secrecy, the following strategies can help mitigate the risk:</p>
<p><strong>(1) Short-Lived Tokens</strong></p>
<ul>
<li>Set a short <code>exp</code> (expiration) time, such as 15 minutes to 1 hour, to reduce the attack window if the key is compromised.</li>
<li>Combine with a refresh token mechanism to dynamically update access tokens.</li>
</ul>
<p><strong>(2) Key Rotation</strong></p>
<ul>
<li>Regularly change the shared secret for HMAC or the private key for RSA.</li>
<li>Invalidate issued JWTs after key rotation (e.g., using a blacklist or short expiration).</li>
</ul>
<p><strong>(3) Leverage TLS Forward Secrecy</strong></p>
<ul>
<li>Use TLS 1.3 and enable cipher suites that support forward secrecy (e.g., <code>ECDHE-ECDSA-AES128-GCM-SHA256</code>).</li>
<li>Ensure that JWTs are transmitted over secure channels (HTTPS) to prevent eavesdropping and man-in-the-middle attacks.</li>
</ul>
<p><strong>(4) Use Stateless Short-Lived Tokens</strong></p>
<ul>
<li>For example, OAuth 2.0 access tokens (often JWTs) are designed to be short-lived and can be combined with server-side state management (e.g., database record of token status).</li>
</ul>
<p><strong>(5) Encrypt Sensitive Data</strong></p>
<ul>
<li>Encrypt sensitive fields in the JWT Payload (e.g., using JWE).</li>
<li>Use a hybrid approach: the JWT signature ensures integrity while encryption ensures confidentiality.</li>
</ul>
<hr>
<p><strong>5. Alternative Token Mechanisms That Support Forward Secrecy</strong></p>
<p>If forward secrecy is a strict requirement for your application, consider other approaches:</p>
<ul>
<li><strong>Dynamic Session Keys</strong>: Generate temporary keys on the server for each session, then sign and transmit them to the client (though this contradicts the stateless nature of JWT).</li>
<li><strong>Stateful Session Tokens</strong>: Use session cookies with server-side stored temporary keys (sacrificing statelessness for forward secrecy).</li>
<li><strong>End-to-End Encryption Protocols</strong>: Implement application-layer protocols (such as the Signal Protocol) that provide forward secrecy, though with increased complexity.</li>
</ul>
<hr>
<p><strong>6. Summary</strong></p>
<ul>
<li><strong>JWT Does Not Support Forward Secrecy</strong>: It relies on long-term keys (either the HMAC shared secret or the RSA private key).</li>
<li><strong>Mitigation Measures</strong>: Use short-lived tokens, key rotation, TLS with forward secrecy, and additional encryption where necessary.</li>
<li><strong>Design Trade-off</strong>: JWT’s simplicity and statelessness are balanced against security needs based on your specific use case.</li>
</ul>
<hr>
<p>If your application demands strong forward secrecy, it is recommended to implement it at the transport layer (via TLS) or within the application protocol (such as using short-lived OAuth 2.0 tokens), rather than relying solely on JWT’s mechanism.</p>
<h1 id="Q5-Another-Perspective-on-JWT">Q5. Another Perspective on JWT</h1>
<p>Q:</p>
<p>In a login scenario, can I understand JWT technology as follows: the server does not use sessions at all, and only stores some user-related information in a cookie, and at the same time, the cookie cannot be tampered with by the user.</p>
<p>A:</p>
<p>In a login scenario, your understanding is basically correct.</p>
<h1 id="Q6-The-Purpose-of-JWT-Header">Q6. The Purpose of JWT Header</h1>
<p>Q:</p>
<p>Why do we need to declare the token type (JWT) and the signature algorithm (e.g., HMAC SHA256 or RSA) in the Header?</p>
<p>Verifying whether the payload has been tampered with is entirely the server’s job, right? If so, why transmit this information between the client and the server?</p>
<p>Is this to allow the server to be compatible with multiple verification methods?</p>
<p>A:</p>
<p><strong>1. Reasons for Declaring the Token Type and Algorithm in the Header</strong></p>
<p>The Header of a JWT must include the <code>alg</code> (signature algorithm) and <code>typ</code> (token type) fields, as explicitly required by the <strong>JWT standard (RFC 7519)</strong>. Their necessity is reflected in the following points:</p>
<hr>
<p><strong>(1) The Server May Need to Dynamically Choose the Verification Method</strong></p>
<ul>
<li><strong>Scenario</strong>: The server might support multiple signature algorithms (e.g., both <code>HS256</code> and <code>RS256</code>).</li>
<li><strong>Problem</strong>: Without declaring the algorithm in the Header, the server would not know which algorithm and key to use to verify the signature.</li>
<li><strong>Example</strong>:<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Header</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;RS256&quot;</span><span class="punctuation">,</span>  <span class="comment">// The server, upon seeing this, selects public key verification for RSA signature.</span></span><br><span class="line">  <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p><strong>(2) Preventing Algorithm Confusion Attacks</strong></p>
<ul>
<li><strong>Background</strong>: An attacker might tamper with the <code>alg</code> field in the Header to trick the server into using the wrong algorithm for signature verification (for example, changing <code>RS256</code> to <code>HS256</code>).</li>
<li><strong>Mitigation</strong>:
<ul>
<li>The server should strictly validate that the <code>alg</code> field is an expected value (e.g., only allowing <code>RS256</code>).</li>
<li><strong>Never rely solely on the algorithm declared by the client</strong>, but rather enforce the server’s pre-configured allowed algorithms.</li>
</ul>
</li>
</ul>
<hr>
<p><strong>(3) Clearly Identifying the Token Type</strong></p>
<ul>
<li><strong>Purpose</strong>: The <code>typ: &quot;JWT&quot;</code> indicates that this is a standard JWT token, avoiding confusion with other types of tokens (such as encrypted JWE).</li>
<li><strong>Extensibility</strong>: If new token types (e.g., <code>JWT+XML</code>) are introduced in the future, this field helps distinguish between them.</li>
</ul>
<hr>
<p><strong>2. Why Transmit the Header to the Client?</strong></p>
<ul>
<li><strong>Core Logic</strong>: JWT is a <strong>self-contained token</strong>; the server does not need to store additional information to verify it.
<ul>
<li><strong>For Signature Verification</strong>: The server needs the <code>alg</code> field from the Header to know how to verify the signature.</li>
<li><strong>For Decoding the Payload</strong>: The Header might include declarations (such as <code>cty</code> for custom content types) necessary for correctly parsing the Payload.</li>
</ul>
</li>
<li><strong>Stateless Design</strong>: If the Header did not include algorithm information, the server would have to store metadata for every token, defeating the stateless nature of JWT.</li>
</ul>
<hr>
<p><strong>3. Is Verifying Tampering Solely the Server’s Job?</strong></p>
<ul>
<li><strong>Correct</strong>: Yes, the client cannot verify the legitimacy of a JWT. It is the server’s responsibility.</li>
<li><strong>Client’s Role</strong>:
<ul>
<li>Simply store and transmit the JWT (e.g., via a Cookie).</li>
<li>Even if the client decodes the Header and Payload, it cannot ensure the signature’s validity.</li>
</ul>
</li>
</ul>
<hr>
<p><strong>4. Why Must the Header Information be Transmitted?</strong></p>
<p><strong>(1) Technical Necessity</strong></p>
<ul>
<li><strong>Signature Verification Depends on the Header</strong>: The signature is generated based on the entire Header and Payload, so the server must have access to the original Header and Payload to recompute the signature.</li>
</ul>
<p><strong>(2) Addressing Security Concerns and Misconceptions</strong></p>
<ul>
<li><strong>Misconception</strong>: “Transmitting the algorithm information in the Header poses a security risk.”
<ul>
<li><strong>Fact</strong>: An attacker cannot bypass verification by tampering with the <code>alg</code> field as long as the server strictly checks that the signature matches the expected algorithm.</li>
<li><strong>Security Practice</strong>: The server should configure a whitelist of allowed algorithms (e.g., only <code>RS256</code>), ignoring any unauthorized algorithm declarations from the client.</li>
</ul>
</li>
</ul>
<hr>
<p><strong>5. Is It to Support Multiple Verification Methods?</strong></p>
<ul>
<li><strong>Partially Correct</strong>: The <code>alg</code> field in the Header allows the server to support multiple algorithms, but this is not the main purpose.</li>
<li><strong>Core Purposes</strong>:
<ol>
<li><strong>Stateless Verification</strong>: The server does not need prior knowledge of the token’s signing method.</li>
<li><strong>Algorithm Declaration</strong>: Ensures consistency in the signature generation and verification process.</li>
<li><strong>Prevention of Algorithm Confusion</strong>: Clearly defines the signature mechanism to prevent ambiguity.</li>
</ol>
</li>
</ul>
<hr>
<p><strong>6. Practical Scenarios</strong></p>
<p><strong>(1) Multi-Tenant Systems</strong></p>
<ul>
<li>Different tenants may use different signature algorithms (e.g., Tenant A uses <code>HS256</code>, Tenant B uses <code>RS256</code>).</li>
<li>The server dynamically selects the appropriate verification method based on the <code>alg</code> field in the Header.</li>
</ul>
<p><strong>(2) Algorithm Upgrades</strong></p>
<ul>
<li>A legacy system might use <code>HS256</code> while a new system upgrades to <code>RS256</code>.</li>
<li>The server can handle both old and new tokens via the <code>alg</code> field in the Header, gradually phasing out the old algorithm.</li>
</ul>
<hr>
<p><strong>Summary</strong></p>
<ul>
<li><strong>The <code>alg</code> and <code>typ</code> in the Header are essential</strong>: The server requires this information to correctly verify the signature and parse the token.</li>
<li><strong>Security Responsibility Lies with the Server</strong>: It must strictly validate the algorithm, signature, and claims rather than relying solely on the client-provided information.</li>
<li><strong>Transmitting the Header Poses No Extra Risk</strong>: As long as the server implements proper verification, an attacker cannot bypass security by tampering with the Header.</li>
</ul>
<h1 id="Q7-Can-the-JWT-Header-be-Removed">Q7. Can the JWT Header be Removed?</h1>
<p>Q:</p>
<p>If the server only supports JWT with a single encryption algorithm, can we omit the header (disregarding the JWT specification)?</p>
<p>A:</p>
<p><strong>Step-by-Step Analysis and Recommendation</strong></p>
<p><strong>1. Technical Feasibility Analysis</strong></p>
<p>If the server <strong>only supports one fixed algorithm</strong> (e.g., <code>HS256</code>) and <strong>does not adhere to the JWT specification</strong>, it is theoretically possible to remove the Header field. However, you would need to redesign the token structure. Below is a comparison of two approaches:</p>
<table>
<thead>
<tr>
<th><strong>Approach</strong></th>
<th>Standard JWT (with Header)</th>
<th>Custom Token without Header</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Structure</strong></td>
<td><code>Header.Payload.Signature</code></td>
<td><code>Payload.Signature</code></td>
</tr>
<tr>
<td><strong>Signature Generation Method</strong></td>
<td><code>HMAC(Header_b64.Payload_b64)</code></td>
<td><code>HMAC(Payload_b64)</code></td>
</tr>
<tr>
<td><strong>Server Verification</strong></td>
<td>Reads algorithm from the Header for dynamic verification</td>
<td>Fixed algorithm (e.g., HS256) for direct verification</td>
</tr>
<tr>
<td><strong>Compatibility</strong></td>
<td>Compatible with JWT ecosystem tools (libraries, debuggers)</td>
<td>Requires a fully custom implementation</td>
</tr>
</tbody>
</table>
<hr>
<p><strong>2. Potential Risks and Limitations</strong></p>
<table>
<thead>
<tr>
<th><strong>Risk/ Limitation</strong></th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Inconsistent Signing Scope</strong></td>
<td>Without the Header, if additional metadata (e.g., token version) needs to be extended in the future, the signing logic must be redesigned, which may lead to compatibility issues.</td>
</tr>
<tr>
<td><strong>Difficulty in Algorithm Upgrades</strong></td>
<td>Hardcoding the algorithm means that if you need to switch algorithms (e.g., migrating to <code>RS256</code>), all clients must be forced to upgrade, preventing a smooth transition.</td>
</tr>
<tr>
<td><strong>Ecosystem Incompatibility</strong></td>
<td>Standard JWT libraries (e.g., <code>jsonwebtoken</code>) cannot be used, so you must implement encoding, decoding, and signature verification yourself, increasing development effort.</td>
</tr>
<tr>
<td><strong>Complexity in Security Auditing</strong></td>
<td>A custom solution requires an independent security assessment, whereas the security of standard JWT has been widely verified.</td>
</tr>
</tbody>
</table>
<hr>
<p><strong>Summary</strong></p>
<ul>
<li><strong>Omitting the Header is Technically Feasible</strong>: In a scenario where the server strictly uses a fixed algorithm, it is possible.</li>
<li><strong>Trade-offs</strong>: This sacrifices standardization, flexibility, and compatibility with existing tools, and you must bear the additional security risks.</li>
<li><strong>Recommended Scenario</strong>: Only consider this for closed, small-scale systems where you are committed to maintaining a custom implementation over the long term.</li>
</ul>
<h1 id="Other">Other</h1>
<p>Two common solutions to the session-sharing problem when deploying web servers in a cluster:</p>
<ul>
<li>One solution is to persist session data by writing it into a database or other persistent storage. Various services would then request the data from the persistent layer upon receiving a request. The advantage of this approach is a clear architecture, but the downside is increased engineering effort. Moreover, if the persistent layer fails, it becomes a single point of failure.</li>
<li>Another solution is for the server not to save session data at all, with all data stored on the client and sent back to the server with every request. JWT is a representative of this approach.</li>
</ul>
<h1 id="References">References</h1>
<ul>
<li><a href="https://xiaolincoding.com/interview/network.html#%E5%89%8D%E7%AB%AF%E6%98%AF%E5%A6%82%E4%BD%95%E5%AD%98%E5%82%A8jwt%E7%9A%84">Xiaolin Coding: How is JWT stored on the frontend?</a></li>
</ul>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>Chat with LLM</tag>
        <tag>JWT</tag>
      </tags>
  </entry>
  <entry>
    <title>Display Original Filenames in Jellyfin</title>
    <url>/en/2024/02/17/jellyfin-original-filename/</url>
    <content><![CDATA[<h1 id="Preface">Preface</h1>
<p>The recommended usage of Jellyfin is that users create folders according to the media rules and place media files in them. After that, the media titles are automatically generated based on the metadata obtained from the scraper. However, this rule is so compulsory that this simple functionality of <strong>using the original file name as the title</strong> is not even available. While manual updating media titles is possible, it can be cumbersome.</p>
<p>To fit this demand, I have created a script using <a href="https://github.com/jellyfin/jellyfin-apiclient-python">jellyfin-apiclient-python</a> to batch rename all media in a specific media library. Additionally, this article explores some previous solutions, none of which were satisfactory in my opinion.</p>
<span id="more"></span>
<h1 id="Existing-Solution-1">Existing Solution 1</h1>
<p>When creating a media library, choose ‘Music Videos’ as its content type and select ‘Prefer embedded titles over filenames’.</p>
<p>What is this “embedded title”? Open the ‘Properties’ of a video and go to ‘Details’.</p>
<p><img src="./MDImgs/jellyfin-original-filename/image-20240217135326419.png" alt="image-20240217135326419"></p>
<p>Any content in the ‘Title’ field will be displayed as the media title in Jellyfin without any modifications. However, this approach has two issues:</p>
<p>1️⃣ For most anime published, the values of their ‘Title’ are their series names, as shown in the image, lacking episode numbers, making it hard for me to distinguish.</p>
<p>This issue can be easily solved by copying the file name to ‘Title’ or clearing the ‘Title’ field. In either case, the original filename will be displayed eventually. For automation in Python, the <a href="https://github.com/quodlibet/mutagen">mutagen</a> module is handy to use.</p>
<p>2️⃣ Media libraries of type ‘Music Videos’ cannot display folder structures, which I find unacceptable. In fact, only ‘Mixed Movies and Shows’ will be presented in a pure folder format.</p>
<h1 id="Existing-Solution-2">Existing Solution 2</h1>
<p>Directly modify the database, as referenced in <a href="https://www.cnblogs.com/toumingbai/p/15514526.html">‘Manually Correcting Titles to File (Folder) Names’</a>。</p>
<p>Bypassing the Service Tier to directly manipulate the database is too risky. I will never use this approach.</p>
<h1 id="My-Solution">My Solution</h1>
<p>Since directly manipulating the database in Solution 2 is bad, why not use the Jellyfin API?</p>
<p>The first step is to find which API corresponds to the required functionality. Instead of referring to the official documentation first, inspect the browser’s network traffic in Developer tools and then refer to the documentation. However, in most cases, the documentation is still useless, because there is no description. Under such circumstances, we need perform experiments to guess the usage of an API.</p>
<p>Fortunately, <a href="https://github.com/jellyfin/jellyfin-apiclient-python">jellyfin-apiclient-python</a> provides a ready-made API, eliminating the need to start from <code>requests</code>. I quickly completed the script:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> jellyfin_apiclient_python <span class="keyword">import</span> JellyfinClient</span><br><span class="line"><span class="keyword">from</span> jellyfin_apiclient_python.api <span class="keyword">import</span> API</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rename_to_filename</span>(<span class="params">jellyfin: API, item_id: <span class="built_in">str</span></span>):</span><br><span class="line">    metadata: <span class="built_in">dict</span> = jellyfin.get_item(item_id)</span><br><span class="line">    <span class="keyword">assert</span> metadata[<span class="string">&#x27;Id&#x27;</span>] == item_id</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(metadata[<span class="string">&#x27;MediaSources&#x27;</span>]) == <span class="number">1</span></span><br><span class="line">    path: <span class="built_in">str</span> = metadata[<span class="string">&#x27;MediaSources&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;Path&#x27;</span>]</span><br><span class="line">    filename = path.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Only modify Name, keep other info unchanged</span></span><br><span class="line">    metadata.update(&#123;<span class="string">&#x27;Name&#x27;</span>: filename&#125;)</span><br><span class="line">    <span class="keyword">return</span> jellyfin.items(<span class="string">&#x27;/&#x27;</span> + item_id, action=<span class="string">&#x27;POST&#x27;</span>, params=<span class="literal">None</span>, json=metadata)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rename_items_in_library</span>(<span class="params">jellyfin: API, library_id: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="comment"># get_items_by_letter recursively retrieves elements in all subfolders</span></span><br><span class="line">    res = jellyfin.get_items_by_letter(parent_id=library_id)</span><br><span class="line">    res = res[<span class="string">&#x27;Items&#x27;</span>]</span><br><span class="line">    item_count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> res:</span><br><span class="line">        <span class="keyword">if</span> r[<span class="string">&#x27;Type&#x27;</span>] == <span class="string">&#x27;Folder&#x27;</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        rename_to_filename(jellyfin, r[<span class="string">&#x27;Id&#x27;</span>])</span><br><span class="line">        item_count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;total renamed item count: <span class="subst">&#123;item_count&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">client = JellyfinClient()</span><br><span class="line"><span class="comment"># Modify these client infos as needed; it doesn&#x27;t affect the result</span></span><br><span class="line">client.config.app(<span class="string">&#x27;pycharm&#x27;</span>, <span class="string">&#x27;0.0.1&#x27;</span>, <span class="string">&#x27;pycharm&#x27;</span>, <span class="string">&#x27;kufhskdf&#x27;</span>)</span><br><span class="line">client.config.data[<span class="string">&quot;auth.ssl&quot;</span>] = <span class="literal">True</span></span><br><span class="line">client.authenticate(&#123;<span class="string">&quot;Servers&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;AccessToken&quot;</span>: <span class="string">&quot;xxx&quot;</span>,  <span class="comment"># Create one in &#x27;Dashboard | API Keys&#x27;</span></span><br><span class="line">        <span class="string">&quot;address&quot;</span>: <span class="string">&quot;zzz&quot;</span>, <span class="comment"># Jellyfin server address</span></span><br><span class="line">        <span class="string">&quot;DateLastAccessed&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;UserId&quot;</span>: <span class="string">&quot;yyy&quot;</span>  <span class="comment"># This user should have the privilege to manage media library</span></span><br><span class="line">    &#125;</span><br><span class="line">]&#125;, discover=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(client.logged_in)</span><br><span class="line"></span><br><span class="line">rename_items_in_library(client.jellyfin, <span class="string">&#x27;uuu&#x27;</span>)  <span class="comment"># Fill in the media library ID</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>By the way, the documentation for this module is also poor; I only figured out how to connect to the server through Issues.</p>
</blockquote>
<p>My Jellyfin server’s certificate is self-signed, and it seems Python’s SSL cannot use the certificates installed on OS. We can resolve this by setting the environment variable <code>REQUESTS_CA_BUNDLE=&lt;certificate_path&gt;</code>.</p>
<p>My solution perfectly addresses the drawbacks of the two aforementioned solutions.</p>
<h1 id="References">References</h1>
<ul>
<li><a href="https://www.reddit.com/r/jellyfin/comments/pcptfz/possible_to_use_original_filenames_only/?utm_source=share&amp;utm_medium=web2x&amp;context=3">Possible to use original filenames only?</a></li>
<li><a href="https://www.cnblogs.com/toumingbai/p/15514526.html">jellyfin手动修正标题为文件（夹）名</a></li>
<li><a href="https://github.com/jellyfin/jellyfin-apiclient-python">jellyfin-apiclient-python</a></li>
</ul>
]]></content>
      <categories>
        <category>tech</category>
        <category>NAS</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>NAS</tag>
        <tag>Jellyfin</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode Weekly Contest 369 Summary</title>
    <url>/en/2023/10/29/leetcode-369-weekly-contest-summary/</url>
    <content><![CDATA[<h1 id="Overview">Overview</h1>
<blockquote>
<p><a href="https://leetcode.cn/contest/weekly-contest-369/">LeetCode Weekly Contest 369</a></p>
</blockquote>
<blockquote>
<p>This article is a summary of the contest. I don’t plan to discuss each problem in detail, but will provide general ideas. The point of this article is self-reflection and improvement.</p>
</blockquote>
<p>After reviewing the contest, it is not so difficult. Here is a brief description of my performance on each problem:</p>
<ul>
<li>Problem 1: Simple simulation problem, an easy one.</li>
<li>Problem 2: Not difficult, but requires consideration of multiple cases. Unfortunately, I didn’t think thoroughly, resulting in 3 WA 😒.</li>
<li>Problem 3: a Medium-level DP problem. Initially struggled to come up with a solution, wasted time on the unsolved problem 4, but eventually solved it quickly 😋.</li>
<li>Problem 4: Despite being a hard-level problem and not solved during the contest, the code only exceeded time limits. After the contest, I figured out an optimization method by myself. Note that the messy logic during coding led to 2 WA 😒.</li>
</ul>
<span id="more"></span>
<h1 id="I-Find-the-K-or-of-an-Array">I. <a href="https://leetcode.cn/problems/find-the-k-or-of-an-array/">Find the K-or of an Array</a></h1>
<blockquote>
<p><strong>Problem Description:</strong></p>
<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code>, and an integer <code>k</code>.</p>
<p>The <strong>K-or</strong> of <code>nums</code> is a non-negative integer that satisfies the following:</p>
<ul>
<li>The <code>ith</code> bit is set in the K-or <strong>if and only if</strong> there are at least <code>k</code> elements of <code>nums</code> in which bit <code>i</code> is set.</li>
</ul>
<p>Return <em>the <strong>K-or</strong> of</em> <code>nums</code>.</p>
<p><strong>Note</strong> that a bit <code>i</code> is set in <code>x</code> if <code>(2i AND x) == 2i</code>, where <code>AND</code> is the bitwise <code>AND</code> operator.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [7,12,9,8,9,15], k = 4</span><br><span class="line">Output: 9</span><br><span class="line">Explanation: Bit 0 is set at nums[0], nums[2], nums[4], and nums[5].</span><br><span class="line">Bit 1 is set at nums[0], and nums[5].</span><br><span class="line">Bit 2 is set at nums[0], nums[1], and nums[5].</span><br><span class="line">Bit 3 is set at nums[1], nums[2], nums[3], nums[4], and nums[5].</span><br><span class="line">Only bits 0 and 3 are set in at least k elements of the array, and bits i &gt;= 4 are not set in any of the array&#x27;s elements. Hence, the answer is 2^0 + 2^3 = 9.</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [2,12,1,11,4,5], k = 6</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: Since k == 6 == nums.length, the 6-or of the array is equal to the bitwise AND of all its elements. Hence, the answer is 2 AND 12 AND 1 AND 11 AND 4 AND 5 = 0.</span><br></pre></td></tr></table></figure>
<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [10,8,5,9,11,6,8], k = 1</span><br><span class="line">Output: 15</span><br><span class="line">Explanation: Since k == 1, the 1-or of the array is equal to the bitwise OR of all its elements. Hence, the answer is 10 OR 8 OR 5 OR 9 OR 11 OR 6 OR 8 = 15.</span><br></pre></td></tr></table></figure>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 50</code></li>
<li><code>0 &lt;= nums[i] &lt; 231</code></li>
<li><code>1 &lt;= k &lt;= nums.length</code></li>
</ul>
</blockquote>
<p>The problem description is a bit hard to understand. Combining it with examples during the contest was necessary for quick understanding.</p>
<p>Bitwise simulation:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findKOr</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((num &amp; val) &gt; <span class="number">0</span>) count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (count &gt;= k)  &#123;</span><br><span class="line">                ans |= val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Time complexity: $O(n)$</p>
<h1 id="II-Minimum-Equal-Sum-of-Two-Arrays-After-Replacing-Zeros">II. <a href="https://leetcode.cn/problems/minimum-equal-sum-of-two-arrays-after-replacing-zeros/">Minimum Equal Sum of Two Arrays After Replacing Zeros</a></h1>
<blockquote>
<p><strong>Problem Description:</strong></p>
<p>You are given two arrays <code>nums1</code> and <code>nums2</code> consisting of positive integers.</p>
<p>You have to replace <strong>all</strong> the <code>0</code>’s in both arrays with <strong>strictly</strong> positive integers such that the sum of elements of both arrays becomes <strong>equal</strong>.</p>
<p>Return <em>the <strong>minimum</strong> equal sum you can obtain, or</em> <code>-1</code> <em>if it is impossible</em>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums1 = [3,2,0,1,0], nums2 = [6,5,0]</span><br><span class="line">Output: 12</span><br><span class="line">Explanation: We can replace 0&#x27;s in the following way:</span><br><span class="line">- Replace the two 0&#x27;s in nums1 with the values 2 and 4. The resulting array is nums1 = [3,2,2,1,4].</span><br><span class="line">- Replace the 0 in nums2 with the value 1. The resulting array is nums2 = [6,5,1].</span><br><span class="line">Both arrays have an equal sum of 12. It can be shown that it is the minimum sum we can obtain.</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums1 = [2,0,2,0], nums2 = [1,4]</span><br><span class="line">Output: -1</span><br><span class="line">Explanation: It is impossible to make the sum of both arrays equal.</span><br></pre></td></tr></table></figure>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums1.length, nums2.length &lt;= 105</code></li>
<li><code>0 &lt;= nums1[i], nums2[i] &lt;= 106</code></li>
</ul>
</blockquote>
<ul>
<li>If there are <code>k</code> zeros in <code>nums1</code>, its sum must increase by at least <code>k</code> after replacement.</li>
<li>If <code>nums1</code> has at least one zero, its sum after replacement can be any value greater than <code>sum(nums1)</code>.</li>
<li>Similar for <code>nums2</code>.</li>
</ul>
<p>Return type of the function is <code>long</code>. Array length is at most $10^5$, elements are at most $10^6$, and the sum is at most $10^{11}$, exceeding the limit of a 32-bit integer, which reminds us that all the intermediate results should be stored in <code>long</code> type. In fact, it is a common practice to replace <code>int</code> with <code>long</code> in coding contests to avoid integer overflow.</p>
<p>The key is to identify conditions where equality does not hold. A mistake in this aspect led to three WA:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">minSum</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">sum1</span> <span class="operator">=</span> Arrays.stream(nums1).mapToLong(i -&gt; i).sum();</span><br><span class="line">        <span class="type">long</span> <span class="variable">sum2</span> <span class="operator">=</span> Arrays.stream(nums2).mapToLong(i -&gt; i).sum();</span><br><span class="line">        <span class="type">long</span> <span class="variable">c1</span> <span class="operator">=</span> Arrays.stream(nums1).filter(i -&gt; i == <span class="number">0</span>).count();</span><br><span class="line">        <span class="type">long</span> <span class="variable">c2</span> <span class="operator">=</span> Arrays.stream(nums2).filter(i -&gt; i == <span class="number">0</span>).count();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sum1 &gt; sum2) &#123;</span><br><span class="line">            <span class="comment">// sum2 can not increase</span></span><br><span class="line">            <span class="keyword">if</span> (c2 == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="comment">// sum1 can not increase, sum2 has c2 zeros, so sum2 will increase by at least c2</span></span><br><span class="line">            <span class="keyword">if</span> (c1 == <span class="number">0</span> &amp;&amp; c2 + sum2 &gt; sum1) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum1 == sum2) &#123;</span><br><span class="line">            <span class="comment">// one of sum1 or sum2 must increase, while the other one will not change</span></span><br><span class="line">            <span class="keyword">if</span> (c1 == <span class="number">0</span> &amp;&amp; c2 != <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (c1 != <span class="number">0</span> &amp;&amp; c2 == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// same logic to the case where sum1 &gt; sum2</span></span><br><span class="line">            <span class="keyword">if</span> (c1 == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (c2 == <span class="number">0</span> &amp;&amp; c1 + sum1 &gt; sum2) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(sum1 + c1, sum2 + c2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="III-Minimum-Increment-Operations-to-Make-Array-Beautiful">III. <a href="https://leetcode.cn/problems/minimum-increment-operations-to-make-array-beautiful/">Minimum Increment Operations to Make Array Beautiful</a></h1>
<blockquote>
<p><strong>Problem Description:</strong></p>
<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> having length <code>n</code>, and an integer <code>k</code>.</p>
<p>You can perform the following <strong>increment</strong> operation <strong>any</strong> number of times (<strong>including zero</strong>):</p>
<ul>
<li>Choose an index <code>i</code> in the range <code>[0, n - 1]</code>, and increase <code>nums[i]</code> by <code>1</code>.</li>
</ul>
<p>An array is considered <strong>beautiful</strong> if, for any <strong>subarray</strong> with a size of <code>3</code> or <strong>more</strong>, its <strong>maximum</strong> element is <strong>greater than or equal</strong> to <code>k</code>.</p>
<p>Return <em>an integer denoting the <strong>minimum</strong> number of increment operations needed to make</em> <code>nums</code> <em><strong>beautiful</strong>.</em></p>
<p>A subarray is a contiguous <strong>non-empty</strong> sequence of elements within an array.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [2,3,0,0,2], k = 4</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: We can perform the following increment operations to make nums beautiful:</span><br><span class="line">Choose index i = 1 and increase nums[1] by 1 -&gt; [2,4,0,0,2].</span><br><span class="line">Choose index i = 4 and increase nums[4] by 1 -&gt; [2,4,0,0,3].</span><br><span class="line">Choose index i = 4 and increase nums[4] by 1 -&gt; [2,4,0,0,4].</span><br><span class="line">The subarrays with a size of 3 or more are: [2,4,0], [4,0,0], [0,0,4], [2,4,0,0], [4,0,0,4], [2,4,0,0,4].</span><br><span class="line">In all the subarrays, the maximum element is equal to k = 4, so nums is now beautiful.</span><br><span class="line">It can be shown that nums cannot be made beautiful with fewer than 3 increment operations.</span><br><span class="line">Hence, the answer is 3.</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [0,1,3,3], k = 5</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: We can perform the following increment operations to make nums beautiful:</span><br><span class="line">Choose index i = 2 and increase nums[2] by 1 -&gt; [0,1,4,3].</span><br><span class="line">Choose index i = 2 and increase nums[2] by 1 -&gt; [0,1,5,3].</span><br><span class="line">The subarrays with a size of 3 or more are: [0,1,5], [1,5,3], [0,1,5,3].</span><br><span class="line">In all the subarrays, the maximum element is equal to k = 5, so nums is now beautiful.</span><br><span class="line">It can be shown that nums cannot be made beautiful with fewer than 2 increment operations.</span><br><span class="line">Hence, the answer is 2.</span><br></pre></td></tr></table></figure>
<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,1,2], k = 1</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: The only subarray with a size of 3 or more in this example is [1,1,2].</span><br><span class="line">The maximum element, 2, is already greater than k = 1, so we don&#x27;t need any increment operation.</span><br><span class="line">Hence, the answer is 0.</span><br></pre></td></tr></table></figure>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>3 &lt;= n == nums.length &lt;= 105</code></li>
<li><code>0 &lt;= nums[i] &lt;= 109</code></li>
<li><code>0 &lt;= k &lt;= 109</code></li>
</ul>
</blockquote>
<blockquote>
<p>An array is considered <strong>beautiful</strong> if, for any subarray with a size of <strong><code>3</code> or more</strong>, its <strong>maximum</strong> element is greater than or equal to <code>k</code>.</p>
</blockquote>
<p>This condition is equivalent to having <strong>every subarray of length 3</strong> with a maximum element $\ge k$.</p>
<p>Obviously, we should try to ensure that in every three consecutive elements, at least one element is $\ge k$. However, it is unclear which elements should be increased to $k$. To address this, let’s use DP.</p>
<p>1️⃣DP definition: <code>dp[i]</code>: the <strong>minimum</strong> increment operations to make <strong><code>nums[0:i]</code></strong> a beautiful array and <strong><code>nums[i]</code></strong> $\ge k$. — Here are three bold points.</p>
<p>If <code>nums[i]</code> $\ge k$, then <code>nums[i - 2 : i]</code> forms a subarray of length 3 that can be covered, satisfying the condition for being a beautiful array. This coverage simultaneously indicates that we need to ensure <code>nums[0:(i-3)]</code> is also a beautiful array to make <code>nums[0:i]</code> a beautiful array. Results from <code>dp[i - 3]</code>, <code>dp[i - 2]</code>, and <code>dp[i - 1]</code> all satisfy this requirement; thus, we take the minimum value in them:</p>
<p>2️⃣Recurrence relation: $dp[i] = \max\set{0,k-nums[i]} + \min\set{dp[i - 1], dp[i - 2], dp[i - 3]}$</p>
<p>3️⃣Answer: Choose the minimum value among <code>dp[n - 3]</code>, <code>dp[n - 2]</code>, and <code>dp[n - 1]</code>, all of which can guarantee <code>nums</code> being a beautiful array by DP definition.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">minIncrementOperations</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">long</span>[] dp = <span class="keyword">new</span> <span class="title class_">long</span>[n];</span><br><span class="line">        <span class="comment">// base case</span></span><br><span class="line">        Arrays.fill(dp, Long.MAX_VALUE);</span><br><span class="line">        <span class="comment">// n &gt;= 3 guarantees that we do not need to check whether dp[0], dp[1] or dp[2] exists</span></span><br><span class="line">        dp[<span class="number">0</span>] = Math.max(<span class="number">0</span>, k - nums[<span class="number">0</span>]);</span><br><span class="line">        dp[<span class="number">1</span>] = Math.max(<span class="number">0</span>, k - nums[<span class="number">1</span>]);</span><br><span class="line">        dp[<span class="number">2</span>] = Math.max(<span class="number">0</span>, k - nums[<span class="number">2</span>]);</span><br><span class="line">        <span class="comment">// recursively</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">v</span> <span class="operator">=</span> Math.max(<span class="number">0</span>, k - nums[i]);</span><br><span class="line">            dp[i] = Math.min(dp[i], dp[i - <span class="number">1</span>] + v);</span><br><span class="line">            dp[i] = Math.min(dp[i], dp[i - <span class="number">2</span>] + v);</span><br><span class="line">            dp[i] = Math.min(dp[i], dp[i - <span class="number">3</span>] + v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// answer</span></span><br><span class="line">        <span class="keyword">return</span> Math.min(dp[n - <span class="number">1</span>], Math.min(dp[n - <span class="number">2</span>], dp[n - <span class="number">3</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="IV-Maximum-Points-After-Collecting-Coins-From-All-Nodes">IV. <a href="https://leetcode.cn/problems/maximum-points-after-collecting-coins-from-all-nodes/">Maximum Points After Collecting Coins From All Nodes</a></h1>
<blockquote>
<p><strong>Problem Description:</strong></p>
<p>There exists an undirected tree rooted at node <code>0</code> with <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>. You are given a 2D <strong>integer</strong> array <code>edges</code> of length <code>n - 1</code>, where <code>edges[i] = [ai, bi]</code> indicates that there is an edge between nodes <code>ai</code> and <code>bi</code> in the tree. You are also given a <strong>0-indexed</strong> array <code>coins</code> of size <code>n</code> where <code>coins[i]</code> indicates the number of coins in the vertex <code>i</code>, and an integer <code>k</code>.</p>
<p>Starting from the root, you have to collect all the coins such that the coins at a node can only be collected if the coins of its ancestors have been already collected.</p>
<p>Coins at <code>nodei</code> can be collected in one of the following ways:</p>
<ul>
<li>Collect all the coins, but you will get <code>coins[i] - k</code> points. If <code>coins[i] - k</code> is negative then you will lose <code>abs(coins[i] - k)</code> points.</li>
<li>Collect all the coins, but you will get <code>floor(coins[i] / 2)</code> points. If this way is used, then for all the <code>nodej</code> present in the subtree of <code>nodei</code>, <code>coins[j]</code> will get reduced to <code>floor(coins[j] / 2)</code>.</li>
</ul>
<p>Return <em>the <strong>maximum points</strong> you can get after collecting the coins from <strong>all</strong> the tree nodes.</em></p>
<p><strong>Example 1:</strong></p>
<p><img src="./MDImgs/leetcode-369-weekly-contest-summary/ex1-copy.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: edges = [[0,1],[1,2],[2,3]], coins = [10,10,3,3], k = 5</span><br><span class="line">Output: 11                        </span><br><span class="line">Explanation: </span><br><span class="line">Collect all the coins from node 0 using the first way. Total points = 10 - 5 = 5.</span><br><span class="line">Collect all the coins from node 1 using the first way. Total points = 5 + (10 - 5) = 10.</span><br><span class="line">Collect all the coins from node 2 using the second way so coins left at node 3 will be floor(3 / 2) = 1. Total points = 10 + floor(3 / 2) = 11.</span><br><span class="line">Collect all the coins from node 3 using the second way. Total points = 11 + floor(1 / 2) = 11.</span><br><span class="line">It can be shown that the maximum points we can get after collecting coins from all the nodes is 11. </span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<p><strong><img src="./MDImgs/leetcode-369-weekly-contest-summary/ex2.png" alt="img"></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: edges = [[0,1],[0,2]], coins = [8,4,4], k = 0</span><br><span class="line">Output: 16</span><br><span class="line">Explanation: </span><br><span class="line">Coins will be collected from all the nodes using the first way. Therefore, total points = (8 - 0) + (4 - 0) + (4 - 0) = 16.</span><br></pre></td></tr></table></figure>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>n == coins.length</code></li>
<li><code>2 &lt;= n &lt;= 105</code></li>
<li><code>0 &lt;= coins[i] &lt;= 104</code></li>
<li><code>edges.length == n - 1</code></li>
<li><code>0 &lt;= edges[i][0], edges[i][1] &lt; n</code></li>
<li><code>0 &lt;= k &lt;= 104</code></li>
</ul>
</blockquote>
<p>1️⃣Build the tree. It’s essentially building a graph, and we need to perform DFS starting from node 0 to simulate tree traversal.</p>
<p>2️⃣There are two ways to collect coins (the problem is intentionally written in complicated words, requiring simplification):</p>
<ul>
<li>Option 1: Currently-collected coins plus <code>coins[i] - k</code> (regardless of sign).</li>
<li>Option 2: <code>floor(coins[i] / 2)</code> is essentially integer division, we should optimize the division using bitwise operation i.e., <code>coins[i] &gt;&gt; 1</code>. Bitwise operation also has the advantage that if the current node has $k$ ancestors choosing Option 2, then the coin count for that node is <code>coins[i] &gt;&gt; k</code>, avoiding the time cost of computing $2^k$ and division by $2^k$.</li>
</ul>
<p>Based on these two options, we can write a recursive function for pre-order traversal:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Pre-order traversal, collecting coins</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> root Root node of the subtree</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> half Number of times ancestors of the subtree chose Option 2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Maximum coins that can be collected in the subtree</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">long</span> <span class="title function_">recur</span><span class="params">(Node root, <span class="type">long</span> half)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// Node is a graph node, visited is used for traversal</span></span><br><span class="line">    <span class="comment">// Pre-order traversal is essentially DFS</span></span><br><span class="line">    visited[root.index] = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// Option 1</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">res1</span> <span class="operator">=</span> (root.val &gt;&gt; half) - k;</span><br><span class="line">    <span class="keyword">for</span> (Node child : root.children) &#123;</span><br><span class="line">        <span class="keyword">if</span> (visited[child.index]) <span class="keyword">continue</span>;</span><br><span class="line">        res1 += recur(child, half);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Option 2</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">res2</span> <span class="operator">=</span> (root.val &gt;&gt; (<span class="number">1</span> + half));</span><br><span class="line">    <span class="keyword">for</span> (Node child : root.children) &#123;</span><br><span class="line">        <span class="keyword">if</span> (visited[child.index]) <span class="keyword">continue</span>;</span><br><span class="line">        res2 += recur(child, half + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    visited[root.index] = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> Math.max(res1, res2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Up to this point, I had written the code during the contest but still encountered a timeout. Later, I came up with the following optimization ideas:</p>
<p>3️⃣ $\forall i, coins[i] \le 10^4$, and $\log_2(10^4) \approx 13.8$. Thus, as long as the ancestors of the current subtree have chosen Option 2 at least 14 times, the coin count for all nodes in this subtree will continuously halve to 0.</p>
<p>This is basically a pruning technique, and we check it at the beginning of the <code>recur</code> function:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (half &gt;= <span class="number">14</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p>4️⃣Speaking of recursion, we think about divide and conquer paradigms, which then lead to thoughts about DP paradigms. What is the difference between the two? — DP reuses results of subproblems, making it more efficient.</p>
<p>Although the process of traversing the tree cannot be written as an iteration, we can use a map to cache results of subproblems: the key is <code>(nodes[i], half)</code>, and the value is the number of collected coins.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;Node, HashMap&lt;Long, Long&gt;&gt; dpMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">long</span> <span class="title function_">recur</span><span class="params">(Node root, <span class="type">long</span> half)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// Check cache, return directly if found</span></span><br><span class="line">    HashMap&lt;Long, Long&gt; mp = dpMap.get(root);</span><br><span class="line">    <span class="keyword">if</span> (mp != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">ans</span> <span class="operator">=</span> mp.get(half);</span><br><span class="line">        <span class="keyword">if</span> (ans != <span class="literal">null</span>) <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Option 1 and Option 2 code...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Insert into cache</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">ans</span> <span class="operator">=</span> Math.max(res1, res2);</span><br><span class="line">    dpMap.putIfAbsent(root, <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;());</span><br><span class="line">    dpMap.get(root).put(half, ans);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>With these two optimization steps, the code successfully passed:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        List&lt;Node&gt; children = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        <span class="type">int</span> index;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> val, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.val = val;</span><br><span class="line">            <span class="built_in">this</span>.index = index;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> k;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span>[] visited;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumPoints</span><span class="params">(<span class="type">int</span>[][] edges, <span class="type">int</span>[] coins, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.k = k;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> coins.length;</span><br><span class="line">        visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line">        Node[] nodes = IntStream.range(<span class="number">0</span>, n).mapToObj(i -&gt; <span class="keyword">new</span> <span class="title class_">Node</span>(coins[i], i)).toArray(Node[]::<span class="keyword">new</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] e : edges) &#123;</span><br><span class="line">            nodes[e[<span class="number">0</span>]].children.add(nodes[e[<span class="number">1</span>]]);</span><br><span class="line">            nodes[e[<span class="number">1</span>]].children.add(nodes[e[<span class="number">0</span>]]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) recur(nodes[<span class="number">0</span>], <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Recursive result cache, elevates divide and conquer algorithm to DP algorithm for efficiency</span></span><br><span class="line"><span class="comment">     * &lt;node, &lt;half, result&gt;&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;Node, HashMap&lt;Long, Long&gt;&gt; dpMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Pre-order traversal, collecting coins</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root Root node of the subtree</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> half Number of times ancestors of the subtree chose Option 2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Maximum coins that can be collected in the subtree</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="title function_">recur</span><span class="params">(Node root, <span class="type">long</span> half)</span> &#123;</span><br><span class="line">        <span class="comment">// coins[i] &lt;= 10^4 -&gt; log_2 (10^4) &lt; 14</span></span><br><span class="line">        <span class="keyword">if</span> (half &gt;= <span class="number">14</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// Check cache, return directly if found</span></span><br><span class="line">        HashMap&lt;Long, Long&gt; mp = dpMap.get(root);</span><br><span class="line">        <span class="keyword">if</span> (mp != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">ans</span> <span class="operator">=</span> mp.get(half);</span><br><span class="line">            <span class="keyword">if</span> (ans != <span class="literal">null</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Node is a graph node, visited is used for traversal</span></span><br><span class="line">        <span class="comment">// Pre-order traversal is essentially DFS</span></span><br><span class="line">        visited[root.index] = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// Option 1</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">res1</span> <span class="operator">=</span> (root.val &gt;&gt; half) - k;</span><br><span class="line">        <span class="keyword">for</span> (Node child : root.children) &#123;</span><br><span class="line">            <span class="keyword">if</span> (visited[child.index]) <span class="keyword">continue</span>;</span><br><span class="line">            res1 += recur(child, half);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Option 2</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">res2</span> <span class="operator">=</span> (root.val &gt;&gt; (<span class="number">1</span> + half));</span><br><span class="line">        <span class="keyword">for</span> (Node child : root.children) &#123;</span><br><span class="line">            <span class="keyword">if</span> (visited[child.index]) <span class="keyword">continue</span>;</span><br><span class="line">            res2 += recur(child, half + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        visited[root.index] = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// Insert into cache</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">ans</span> <span class="operator">=</span> Math.max(res1, res2);</span><br><span class="line">        dpMap.putIfAbsent(root, <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;());</span><br><span class="line">        dpMap.get(root).put(half, ans);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm Problems</category>
        <category>Algorithm Contest</category>
      </categories>
      <tags>
        <tag>Simulation</tag>
        <tag>DP</tag>
        <tag>Tree</tag>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode Weekly Contest 370 Summary</title>
    <url>/en/2023/11/05/leetcode-370-weekly-contest-summary/</url>
    <content><![CDATA[<h1 id="Overview">Overview</h1>
<blockquote>
<p><a href="https://leetcode.cn/contest/weekly-contest-370/">LeetCode Weekly Contest 370</a></p>
</blockquote>
<blockquote>
<p>This article is a summary of the weekly contest. I do not plan to discuss each problem in detail; for some problems, I will only provide a rough outline. The point of this article is self-reflection and improvement.</p>
</blockquote>
<p>Achieved AC in the first three problems within 23 minutes, resulting in a ranking around 300 - more like a typing contest emphasizing speed rather than a coding contest. Brief description of problem-solving:</p>
<ul>
<li>Problem 1: Easy problem but got stuck for 5 minutes 😒;</li>
<li>Problem 2: Similar to the first one in terms of background, also easy problem, but solved faster 😋;</li>
<li>Problem 3: A real medium-level problem that required a bit more thought, solved in 15 minutes, not bad 😋;</li>
<li>Problem 4: Couldn’t solve. If the data range is small, it’s a simple DP problem, but couldn’t find an optimization 😒;</li>
</ul>
<span id="more"></span>
<h1 id="I-Find-Champion-I">I. <a href="https://leetcode.cn/problems/find-champion-i/">Find Champion I</a></h1>
<blockquote>
<p><strong>Problem Description:</strong></p>
<p>There are <code>n</code> teams numbered from <code>0</code> to <code>n - 1</code> in a tournament.</p>
<p>Given a <strong>0-indexed</strong> 2D boolean matrix <code>grid</code> of size <code>n * n</code>. For all <code>i, j</code> that <code>0 &lt;= i, j &lt;= n - 1</code> and <code>i != j</code> team <code>i</code> is <strong>stronger</strong> than team <code>j</code> if <code>grid[i][j] == 1</code>, otherwise, team <code>j</code> is <strong>stronger</strong> than team <code>i</code>.</p>
<p>Team <code>a</code> will be the <strong>champion</strong> of the tournament if there is no team <code>b</code> that is stronger than team <code>a</code>.</p>
<p>Return <em>the team that will be the champion of the tournament.</em></p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: grid = [[0,1],[0,0]]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: There are two teams in this tournament.</span><br><span class="line">grid[0][1] == 1 means that team 0 is stronger than team 1. So team 0 will be the champion.</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: grid = [[0,0,1],[1,0,1],[0,0,0]]</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: There are three teams in this tournament.</span><br><span class="line">grid[1][0] == 1 means that team 1 is stronger than team 0.</span><br><span class="line">grid[1][2] == 1 means that team 1 is stronger than team 2.</span><br><span class="line">So team 1 will be the champion.</span><br></pre></td></tr></table></figure>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>n == grid.length</code></li>
<li><code>n == grid[i].length</code></li>
<li><code>2 &lt;= n &lt;= 100</code></li>
<li><code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.</li>
<li>For all <code>i grid[i][i]</code> is <code>0.</code></li>
<li>For all <code>i, j</code> that <code>i != j</code>, <code>grid[i][j] != grid[j][i]</code>.</li>
<li>The input is generated such that if team <code>a</code> is stronger than team <code>b</code> and team <code>b</code> is stronger than team <code>c</code>, then team <code>a</code> is stronger than team <code>c</code>.</li>
</ul>
</blockquote>
<p>‘Team <code>a</code> will be the <strong>champion</strong> of the tournament if there is no team <code>b</code> that is stronger than team <code>a</code>.’ Use <code>count[i]</code> to represent the number of teams stronger than <code>i</code>. The answer is the <code>i</code> with $count[i] = 0$.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findChampion</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid.length;</span><br><span class="line">        <span class="type">int</span>[] count = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == j) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">1</span>) count[j]++;</span><br><span class="line">                <span class="keyword">else</span> count[i]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (count[i] == <span class="number">0</span>) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="II-Find-Champion-II">II. <a href="https://leetcode.cn/problems/find-champion-ii/">Find Champion II</a></h1>
<blockquote>
<p><strong>Problem Description:</strong></p>
<p>There are <code>n</code> teams numbered from <code>0</code> to <code>n - 1</code> in a tournament; each team is also a node in a <strong>DAG</strong>.</p>
<p>You are given the integer <code>n</code> and a <strong>0-indexed</strong> 2D integer array <code>edges</code> of length <code>m</code> representing the <strong>DAG</strong>, where <code>edges[i] = [ui, vi]</code> indicates that there is a directed edge from team <code>ui</code> to team <code>vi</code> in the graph.</p>
<p>A directed edge from <code>a</code> to <code>b</code> in the graph means that team <code>a</code> is <strong>stronger</strong> than team <code>b</code> and team <code>b</code> is <strong>weaker</strong> than team <code>a</code>.</p>
<p>Team <code>a</code> will be the <strong>champion</strong> of the tournament if there is no team <code>b</code> that is <strong>stronger</strong> than team <code>a</code>.</p>
<p>Return <em>the team that will be the <strong>champion</strong> of the tournament if there is a <strong>unique</strong> champion, otherwise, return</em> <code>-1</code><em>.</em></p>
<p><strong>Notes</strong></p>
<ul>
<li>A <strong>cycle</strong> is a series of nodes <code>a1, a2, ..., an, an+1</code> such that node <code>a1</code> is the same node as node <code>an+1</code>, the nodes <code>a1, a2, ..., an</code> are distinct, and there is a directed edge from the node <code>ai</code> to node <code>ai+1</code> for every <code>i</code> in the range <code>[1, n]</code>.</li>
<li>A <strong>DAG</strong> is a directed graph that does not have any <strong>cycle</strong>.</li>
</ul>
<p><strong>Example 1:</strong></p>
<p><img src="./MDImgs/leetcode-370-weekly-contest-summary/graph-3.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 3, edges = [[0,1],[1,2]]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: Team 1 is weaker than team 0. Team 2 is weaker than team 1. So the champion is team 0.</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<p><img src="./MDImgs/leetcode-370-weekly-contest-summary/graph-4.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 4, edges = [[0,2],[1,3],[1,2]]</span><br><span class="line">Output: -1</span><br><span class="line">Explanation: Team 2 is weaker than team 0 and team 1. Team 3 is weaker than team 1. But team 1 and team 0 are not weaker than any other teams. So the answer is -1.</span><br></pre></td></tr></table></figure>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 100</code></li>
<li><code>m == edges.length</code></li>
<li><code>0 &lt;= m &lt;= n * (n - 1) / 2</code></li>
<li><code>edges[i].length == 2</code></li>
<li><code>0 &lt;= edge[i][j] &lt;= n - 1</code></li>
<li><code>edges[i][0] != edges[i][1]</code></li>
<li>The input is generated such that if team <code>a</code> is stronger than team <code>b</code>, team <code>b</code> is not stronger than team <code>a</code>.</li>
<li>The input is generated such that if team <code>a</code> is stronger than team <code>b</code> and team <code>b</code> is stronger than team <code>c</code>, then team <code>a</code> is stronger than team <code>c</code>.</li>
</ul>
</blockquote>
<p>Use directed edges to represent who is stronger, making it easier to understand than the first problem. Edge $(a,b)$ means <code>a</code> is stronger than <code>b</code>, so the teams with the strongest members have an in-degree of 0. Count the in-degrees.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findChampion</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] edges)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] inDeg = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="comment">// Count in-degrees</span></span><br><span class="line">        Arrays.stream(edges).forEach(e -&gt; inDeg[e[<span class="number">1</span>]]++);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> Arrays.stream(inDeg).filter(i -&gt; i == <span class="number">0</span>).count();</span><br><span class="line">        <span class="comment">// Not unique</span></span><br><span class="line">        <span class="keyword">if</span> (count != <span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (inDeg[i] == <span class="number">0</span>) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="III-Maximum-Score-After-Applying-Operations-on-a-Tree">III. <a href="https://leetcode.cn/problems/maximum-score-after-applying-operations-on-a-tree/">Maximum Score After Applying Operations on a Tree</a></h1>
<blockquote>
<p><strong>Problem Description:</strong></p>
<p>There is an undirected tree with <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>, and rooted at node <code>0</code>. You are given a 2D integer array <code>edges</code> of length <code>n - 1</code>, where <code>edges[i] = [ai, bi]</code> indicates that there is an edge between nodes <code>ai</code> and <code>bi</code> in the tree.</p>
<p>You are also given a <strong>0-indexed</strong> integer array <code>values</code> of length <code>n</code>, where <code>values[i]</code> is the <strong>value</strong> associated with the <code>ith</code> node.</p>
<p>You start with a score of <code>0</code>. In one operation, you can:</p>
<ul>
<li>Pick any node <code>i</code>.</li>
<li>Add <code>values[i]</code> to your score.</li>
<li>Set <code>values[i]</code> to <code>0</code>.</li>
</ul>
<p>A tree is <strong>healthy</strong> if the sum of values on the path from the root to any leaf node is different than zero.</p>
<p>Return <em>the <strong>maximum score</strong> you can obtain after performing these operations on the tree any number of times so that it remains <strong>healthy</strong>.</em></p>
<p><strong>Example 1:</strong></p>
<p><img src="./MDImgs/leetcode-370-weekly-contest-summary/graph-13-1.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: edges = [[0,1],[0,2],[0,3],[2,4],[4,5]], values = [5,2,5,2,1,1]</span><br><span class="line">Output: 11</span><br><span class="line">Explanation: We can choose nodes 1, 2, 3, 4, and 5. The value of the root is non-zero. Hence, the sum of values on the path from the root to any leaf is different than zero. Therefore, the tree is healthy and the score is values[1] + values[2] + values[3] + values[4] + values[5] = 11.</span><br><span class="line">It can be shown that 11 is the maximum score obtainable after any number of operations on the tree.</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<p><img src="./MDImgs/leetcode-370-weekly-contest-summary/graph-14-2.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]], values = [20,10,9,7,4,3,5]</span><br><span class="line">Output: 40</span><br><span class="line">Explanation: We can choose nodes 0, 2, 3, and 4.</span><br><span class="line">- The sum of values on the path from 0 to 4 is equal to 10.</span><br><span class="line">- The sum of values on the path from 0 to 3 is equal to 10.</span><br><span class="line">- The sum of values on the path from 0 to 5 is equal to 3.</span><br><span class="line">- The sum of values on the path from 0 to 6 is equal to 5.</span><br><span class="line">Therefore, the tree is healthy and the score is values[0] + values[2] + values[3] + values[4] = 40.</span><br><span class="line">It can be shown that 40 is the maximum score obtainable after any number of operations on the tree.</span><br></pre></td></tr></table></figure>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>2 &lt;= n &lt;= 2 * 104</code></li>
<li><code>edges.length == n - 1</code></li>
<li><code>edges[i].length == 2</code></li>
<li><code>0 &lt;= ai, bi &lt; n</code></li>
<li><code>values.length == n</code></li>
<li><code>1 &lt;= values[i] &lt;= 109</code></li>
<li>The input is generated such that <code>edges</code> represents a valid tree.</li>
</ul>
</blockquote>
<p>$\forall i, values[i] \ge 1$, and ‘the sum of values on the path from the root to any leaf node is different than zero’. Hence, when performing operations, we must <strong>leave one node untouched on each path from the root to a leaf</strong> (Multiple paths may share one untouched node).</p>
<p>Let the set of all nodes in the graph be $V$, and the set of nodes <strong>left untouched</strong> be $U$. The goal is to maximize the score, which is given by $\sum\limits_{v\in V} v - \sum\limits_{u\in U}u$. $\sum\limits_{v\in V} v$ is simply <code>sum(values)</code>, so to maximize the score, we want to minimize $\sum\limits_{u\in U}u$. Which nodes should we leave untouched?</p>
<p>For any subtree of the tree, such as the one shown below:</p>
<p><img src="./MDImgs/leetcode-370-weekly-contest-summary/image-20231105135510005.png" alt="image-20231105135510005"></p>
<p>Assume we do not operate on the root node 0, then all the remaining nodes can be modified; assume we operate on the root node 0, then there exist nodes in the remaining nodes that cannot be modified. Whatever the remaining nodes are, i.e. leaf nodes or multiple subtrees, it doesn’t affect this conclusion.</p>
<p>So when should we operate on the root node? Define <strong>the minimum sum</strong> of <strong>unoperated</strong> nodes in a <strong>healthy</strong> subtree rooted at $u$ as $res(u)$. Then, $\forall x, x$ is a child node of $u$, $res(u) = \min\set{values[u], \sum\limits_x res(x)}$</p>
<p>The meaning of this recursive formula is:</p>
<ul>
<li>Either do not operate on the root node $u$, in which case the subtree is healthy, and all descendants can be operated on;</li>
<li>Or operate on the root node $u$, but all subtrees of $u$ must ensure they are healthy;</li>
<li>By the definition, we need to obtain <strong>the minimum sum</strong>, so we take the smaller value of the two situations;</li>
</ul>
<p>For the example above, $res(1) = 2,res(2) = 2,res(3) = 5$</p>
<p>$values[0] = 5 &lt; \sum\limits_{x\in\set{1,2,3}}res(x) = 9$, so we do not operate on the root node 0 but operate on all nodes in its subtrees.</p>
<p>With the recurrence relation for $res(u)$, the value of $\sum\limits_{u\in U}u$ mentioned earlier is $res(0)$, hence the maximum score is <code>sum(values) - res(0)</code>.</p>
<p>Code:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> val, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.val = val;</span><br><span class="line">            <span class="built_in">this</span>.index = index;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Node&gt; children = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        <span class="type">int</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">maximumScoreAfterOperations</span><span class="params">(<span class="type">int</span>[][] edges, <span class="type">int</span>[] values)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> values.length;</span><br><span class="line">        <span class="comment">// Build the tree, essentially building a graph</span></span><br><span class="line">        Node[] nodes = IntStream.range(<span class="number">0</span>, n).mapToObj(i -&gt; <span class="keyword">new</span> <span class="title class_">Node</span>(values[i], i)).toArray(Node[]::<span class="keyword">new</span>);</span><br><span class="line">        Arrays.stream(edges).forEach(e -&gt; &#123;</span><br><span class="line">            nodes[e[<span class="number">0</span>]].children.add(nodes[e[<span class="number">1</span>]]);</span><br><span class="line">            nodes[e[<span class="number">1</span>]].children.add(nodes[e[<span class="number">0</span>]]);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span>[] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line">        visited[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// values[i] &lt;= 10^9，pay attention to mapToLong</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> Arrays.stream(values).mapToLong(i -&gt; i).sum();</span><br><span class="line">        <span class="type">long</span> <span class="variable">min</span> <span class="operator">=</span> dfs(nodes[<span class="number">0</span>], visited);</span><br><span class="line">        <span class="keyword">return</span> sum - min;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root Root node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> res(root)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="title function_">dfs</span><span class="params">(Node root, <span class="type">boolean</span>[] visited)</span> &#123;</span><br><span class="line">        <span class="comment">// count # visited neighbors</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// min = sum(res(children))</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">min</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Node child : root.children) &#123;</span><br><span class="line">            <span class="keyword">if</span> (visited[child.index]) &#123;</span><br><span class="line">                count++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            visited[child.index] = <span class="literal">true</span>;</span><br><span class="line">            min += dfs(child, visited);</span><br><span class="line">            visited[child.index] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// this node is a leaf, return its val directly</span></span><br><span class="line">        <span class="keyword">if</span> (count == root.children.size()) &#123;</span><br><span class="line">            <span class="keyword">return</span> root.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.min(root.val, min);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="IV-Maximum-Balanced-Subsequence-Sum">IV. <a href="https://leetcode.cn/problems/maximum-balanced-subsequence-sum/">Maximum Balanced Subsequence Sum</a></h1>
<blockquote>
<p><strong>Problem Description:</strong></p>
<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code>.</p>
<p>A <strong>subsequence</strong> of <code>nums</code> having length <code>k</code> and consisting of <strong>indices</strong> <code>i0 &lt; i1 &lt; ... &lt; ik-1</code> is <strong>balanced</strong> if the following holds:</p>
<ul>
<li><code>nums[ij] - nums[ij-1] &gt;= ij - ij-1</code>, for every <code>j</code> in the range <code>[1, k - 1]</code>.</li>
</ul>
<p>A <strong>subsequence</strong> of <code>nums</code> having length <code>1</code> is considered balanced.</p>
<p>Return <em>an integer denoting the <strong>maximum</strong> possible <strong>sum of elements</strong> in a <strong>balanced</strong> subsequence of</em> <code>nums</code>.</p>
<p>A <strong>subsequence</strong> of an array is a new <strong>non-empty</strong> array that is formed from the original array by deleting some (<strong>possibly none</strong>) of the elements without disturbing the relative positions of the remaining elements.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [3,3,5,6]</span><br><span class="line">Output: 14</span><br><span class="line">Explanation: In this example, the subsequence [3,5,6] consisting of indices 0, 2, and 3 can be selected.</span><br><span class="line">nums[2] - nums[0] &gt;= 2 - 0.</span><br><span class="line">nums[3] - nums[2] &gt;= 3 - 2.</span><br><span class="line">Hence, it is a balanced subsequence, and its sum is the maximum among the balanced subsequences of nums.</span><br><span class="line">The subsequence consisting of indices 1, 2, and 3 is also valid.</span><br><span class="line">It can be shown that it is not possible to get a balanced subsequence with a sum greater than 14.</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [5,-1,-3,8]</span><br><span class="line">Output: 13</span><br><span class="line">Explanation: In this example, the subsequence [5,8] consisting of indices 0 and 3 can be selected.</span><br><span class="line">nums[3] - nums[0] &gt;= 3 - 0.</span><br><span class="line">Hence, it is a balanced subsequence, and its sum is the maximum among the balanced subsequences of nums.</span><br><span class="line">It can be shown that it is not possible to get a balanced subsequence with a sum greater than 13.</span><br></pre></td></tr></table></figure>
<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [-2,-1]</span><br><span class="line">Output: -1</span><br><span class="line">Explanation: In this example, the subsequence [-1] can be selected.</span><br><span class="line">It is a balanced subsequence, and its sum is the maximum among the balanced subsequences of nums.</span><br></pre></td></tr></table></figure>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 105</code></li>
<li><code>-109 &lt;= nums[i] &lt;= 109</code></li>
</ul>
</blockquote>
<p>Let’s change the formulation of the problem: consecutive elements <code>nums[i]</code> and <code>nums[j]</code> in a balanced subsequence must satisfy $i &lt; j$ and $nums[j] - nums[i] \ge j - i$.</p>
<p>By rearranging the inequality above, we get $nums[j] - j \ge nums[i] - i$, which means the requirement for each element in a balanced subsequence only depends on its own value and index, not those of other elements.</p>
<p>Therefore, this problem is similar to the Longest Increasing Subsequence, and we can solve it using DP:</p>
<p>DP Definition: <code>dp[j]</code> represents <strong>the maximum sum</strong> of elements in a <strong>balanced</strong> subsequence <strong>ending at</strong> <code>nums[j]</code>.</p>
<p>Recurrence relation: $dp[j] = nums[j] + \max\set{dp[i] | (i &lt; j) ∧ (nums[j] - j \ge nums[i] - i)}$</p>
<p>Code:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">maxBalancedSubsequenceSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">long</span> <span class="variable">ans</span> <span class="operator">=</span> Long.MIN_VALUE;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// dp[i]: maximum sum of elements in a subsequence ending at nums[i]</span></span><br><span class="line">        <span class="type">long</span>[] dp = <span class="keyword">new</span> <span class="title class_">long</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            dp[j] = nums[j];</span><br><span class="line">            <span class="type">long</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; j; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[j] - j &gt;= nums[i] - i) &#123;</span><br><span class="line">                    max = Math.max(max, dp[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[j] += max;</span><br><span class="line"></span><br><span class="line">            ans = Math.max(ans, dp[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Obviously, this solution has a time complexity of $O(n^2)$, which is bad. Until end of the contest, I couldn’t figure out an optimization strategy.</p>
<p>I plan to describe in detail how to solve this problem in the next post, based on insights from an expert’s solution. For now, I’ll focus on studying the relevant knowledge.</p>
]]></content>
      <categories>
        <category>Algorithm Problems</category>
        <category>Algorithm Contest</category>
      </categories>
      <tags>
        <tag>Simulation</tag>
        <tag>DP</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Install and Use ntfy</title>
    <url>/en/2024/10/10/ntfy-install-and-usage/</url>
    <content><![CDATA[<h1 id="Introduction">Introduction</h1>
<p>In <a href="/en/2024/10/02/ChangeDetection-install-and-usage/">my previous post</a>, I used QQ Mail as the notification service for ChangeDetection. That was just for quickly getting started with ChangeDetection, but it wasn’t necessary since there are several open-source notification systems available, such as <a href="https://github.com/binwiederhier/ntfy">ntfy</a>. This article will walk through the installation and usage of ntfy, which is quite straightforward. However, I encountered some issues when integrating it with ChangeDetection, and this post will cover the solutions to those problems as well.</p>
<span id="more"></span>
<h1 id="Installation-and-Configuration">Installation and Configuration</h1>
<h2 id="Docker-compose">Docker compose</h2>
<p>The ntfy Web UI uses the Notifications API, which requires HTTPS, so we need to launch an Nginx container.</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.24</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx-ntfy</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker/nginx_conf/nginx-ntfy.conf:/etc/nginx/nginx.conf:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker/nginx_ssl:/etc/nginx/ssl/:ro</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">40043</span><span class="string">:443</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ntfy</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">ntfy:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">binwiederhier/ntfy:v2.11.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">ntfy</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">serve</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ntfy_data:/var/cache/ntfy</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ntfy_config:/etc/ntfy</span></span><br><span class="line">    <span class="comment"># ports:</span></span><br><span class="line">    <span class="comment">#   - 50080:80</span></span><br><span class="line">    <span class="attr">healthcheck:</span> <span class="comment"># optional: remember to adapt the host:port to your environment</span></span><br><span class="line">        <span class="attr">test:</span> [<span class="string">&quot;CMD-SHELL&quot;</span>, <span class="string">&quot;wget -q --tries=1 http://localhost:80/v1/health -O - | grep -Eo &#x27;\&quot;healthy\&quot;\\s*:\\s*true&#x27; || exit 1&quot;</span>]</span><br><span class="line">        <span class="attr">interval:</span> <span class="string">60s</span></span><br><span class="line">        <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">        <span class="attr">retries:</span> <span class="number">3</span></span><br><span class="line">        <span class="attr">start_period:</span> <span class="string">40s</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">ntfy_data:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">ntfy_config:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h2 id="ntfy-Configuration">ntfy Configuration</h2>
<p>Manually create the configuration file: <code>/etc/ntfy/server.yml</code>. For specific configuration options, refer to <a href="https://github.com/binwiederhier/ntfy/blob/main/server/server.yml">the template provided by the official site</a>. My configuration includes the following options:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">base-url:</span> <span class="string">&quot;https://&lt;host_IP&gt;:40043&quot;</span></span><br><span class="line"><span class="attr">cache-file:</span> <span class="string">&quot;/var/cache/ntfy/cache.db&quot;</span></span><br><span class="line"><span class="attr">cache-duration:</span> <span class="string">&quot;24h&quot;</span></span><br><span class="line"><span class="attr">auth-file:</span> <span class="string">&quot;/var/cache/ntfy/user.db&quot;</span></span><br><span class="line"><span class="attr">auth-default-access:</span> <span class="string">&quot;deny-all&quot;</span></span><br><span class="line"><span class="attr">behind-proxy:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>By default, ntfy doesn’t persist messages, only forwarding them in real-time. This can lead to message loss in two scenarios:</p>
<ul>
<li>ntfy is online, but the client experiences a network issue. Upon reconnection, the client won’t receive messages sent during the outage.</li>
<li>The client is online, but ntfy goes offline before forwarding a message. Upon restarting, the message is lost.</li>
</ul>
<p>Using the <code>cache-file</code> essentially turns ntfy into a message queue, mitigating these issues. The duration for which messages are cached is set by <code>cache-duration</code>.</p>
<hr>
<p>ntfy also supports sending images and attachments, but since I don’t need those features, I didn’t configure them.</p>
<h2 id="Nginx-Configuration">Nginx Configuration</h2>
<blockquote>
<p>For Nginx and SSL certificate setup, refer to <a href="/en/2024/01/31/Docker-Nginx-SSL-Local-Network/">my previous post</a>.</p>
</blockquote>
<p>The official document provides an <a href="https://docs.ntfy.sh/config/#nginxapache2caddy">Nginx template</a>. Here’s my configuration:</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">user</span> nginx;</span><br><span class="line"><span class="attribute">worker_processes</span> auto;</span><br><span class="line"></span><br><span class="line"><span class="attribute">error_log</span> /var/log/nginx/<span class="literal">error</span>.log <span class="literal">notice</span>;</span><br><span class="line"><span class="attribute">pid</span> /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">	<span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">	<span class="attribute">include</span> /etc/nginx/mime.types;</span><br><span class="line">	<span class="attribute">default_type</span> application/octet-stream;</span><br><span class="line"></span><br><span class="line">	<span class="attribute">log_format</span> main <span class="string">&#x27;<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] &quot;<span class="variable">$request</span>&quot; &#x27;</span></span><br><span class="line">	<span class="string">&#x27;<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> &quot;<span class="variable">$http_referer</span>&quot; &#x27;</span></span><br><span class="line">	<span class="string">&#x27;&quot;<span class="variable">$http_user_agent</span>&quot; &quot;<span class="variable">$http_x_forwarded_for</span>&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="attribute">access_log</span> /var/log/nginx/access.log main;</span><br><span class="line"></span><br><span class="line">	<span class="attribute">sendfile</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">	<span class="attribute">keepalive_timeout</span> <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">	<span class="section">server</span> &#123;</span><br><span class="line"></span><br><span class="line">		<span class="attribute">listen</span> <span class="number">443</span> default_server ssl http2;</span><br><span class="line">		<span class="attribute">listen</span> [::]:<span class="number">443</span> ssl http2;</span><br><span class="line"></span><br><span class="line">		<span class="attribute">ssl_certificate</span> /etc/nginx/ssl/nginx_server.crt;</span><br><span class="line">		<span class="attribute">ssl_certificate_key</span> /etc/nginx/ssl/nginx_server.key;</span><br><span class="line"></span><br><span class="line">		<span class="section">location</span> / &#123;</span><br><span class="line"></span><br><span class="line">			<span class="attribute">proxy_pass</span> http://ntfy:80;</span><br><span class="line">			<span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">			<span class="attribute">proxy_buffering</span> <span class="literal">off</span>;</span><br><span class="line">			<span class="attribute">proxy_request_buffering</span> <span class="literal">off</span>;</span><br><span class="line">			<span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line">			<span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">			<span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">			<span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">			<span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line">			<span class="attribute">proxy_connect_timeout</span> <span class="number">3m</span>;</span><br><span class="line">			<span class="attribute">proxy_send_timeout</span> <span class="number">3m</span>;</span><br><span class="line">			<span class="attribute">proxy_read_timeout</span> <span class="number">3m</span>;</span><br><span class="line"></span><br><span class="line">			<span class="attribute">client_max_body_size</span> <span class="number">0</span>; <span class="comment"># Stream request body to backend</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="VM-NAT-and-Host-Firewall">VM NAT and Host Firewall</h2>
<p>My host machine is running Win10, with a Linux VM running Docker via VMware. Therefore, I have to configure VM NAT and open up the host’s firewall. You can refer to <a href="/en/2024/01/25/LANraragi-manga-server/#Sharing-With-Other-Devices">this post</a> for more details.</p>
<p>I opened port 40043 on the host to enable local network sharing.</p>
<h1 id="Usage">Usage</h1>
<p>For a basic Hello World example, see the <a href="https://docs.ntfy.sh/">official site</a>. I won’t go into it here.</p>
<h2 id="Access-Control">Access Control</h2>
<p>You might have noticed that my configuration file includes:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">auth-default-access:</span> <span class="string">&quot;deny-all&quot;</span></span><br></pre></td></tr></table></figure>
<p>By default, clients connected to ntfy have no read or write permissions for any topics. This is the most secure setup, but it’s also the most cumbersome to manage.</p>
<p>To add a <code>test</code> topic and allow everyone to read/write:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/ <span class="comment"># ntfy access everyone test rw</span></span><br><span class="line">granted read-write access to topic <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">user * (role: anonymous, tier: none)</span><br><span class="line">- read-write access to topic <span class="built_in">test</span></span><br><span class="line">- no access to any (other) topics (server config</span><br></pre></td></tr></table></figure>
<h1 id="Integration-with-ChangeDetection">Integration with ChangeDetection</h1>
<h2 id="Access-Control-2">Access Control</h2>
<p>For the <code>ChangeDetection</code> topic, I created a writer and a reader:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/ <span class="comment"># ntfy access</span></span><br><span class="line">user ChangeDetectionPublisher (role: user, tier: none)</span><br><span class="line">- write-only access to topic ChangeDetection</span><br><span class="line">user homeDevice (role: user, tier: none)</span><br><span class="line">- read-only access to topic ChangeDetection</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Remembering these users’ passwords can be tricky. I use a randomly generated long password for the writer, making this user essentially one-time use for a single topic. If I forget the password, I’ll just create a new user. For the reader, I use a short, easy-to-remember password (with some risk of being cracked).</p>
</blockquote>
<h2 id="Notification-URL">Notification URL</h2>
<p>According to the <a href="https://docs.ntfy.sh/examples/#changedetectionio">official documentation</a>, the notification URL for ChangeDetection is:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ntfys://ChangeDetectionPublisher:&lt;password&gt;@&lt;VM_IP&gt;:40043/ChangeDetection</span><br></pre></td></tr></table></figure>
<ul>
<li>Since I’m using HTTPS, the prefix is <code>ntfys</code>; if using HTTP, it would be <code>ntfy</code>.</li>
<li>Regardless of which Docker network the container is in, it will correctly resolve the host’s IP (which in this case is the VM’s IP), no matter which network the IP belongs to (e.g., Docker network, VMware adapter network).</li>
</ul>
<h2 id="Container-CA-Certificate-Configuration">Container CA Certificate Configuration</h2>
<p>After configuring the ChangeDetection notification URL and clicking test, the following error appeared:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(Caused by SSLError(SSLCertVerificationError(1, &#x27;[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1006)&#x27;)))</span><br></pre></td></tr></table></figure>
<p>This error is expected because Nginx is using a self-signed SSL certificate, and the ChangeDetection container doesn’t trust my self-created CA certificate.</p>
<h3 id="Solution-1-Trust-the-Certificate-in-the-Container">Solution 1: Trust the Certificate in the Container</h3>
<p>First, copy the self-signed certificate into the container:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> /path/to/your/certificate.crt &lt;container_name&gt;:/usr/local/share/ca-certificates/</span><br></pre></td></tr></table></figure>
<p>Then, inside the container, update the CA certificates:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">update-ca-certificates</span><br></pre></td></tr></table></figure>
<p>Finally, restart the container.</p>
<p>This solution works for <code>curl</code>, <code>wget</code>, and similar commands, but it doesn’t work for ChangeDetection because it’s developed in Python. Python doesn’t use the OS’s certificates but instead uses the <code>certifi</code> package’s certificates. So, the focus should be on making Python trust the certificate rather than the container.</p>
<h3 id="Solution-2-Use-the-REQUESTS-CA-BUNDLE-Environment-Variable">Solution 2: Use the <code>REQUESTS_CA_BUNDLE</code> Environment Variable</h3>
<p>Modify the ChangeDetection Docker Compose file:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">changedetection:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">dgtlmoon/changedetection.io</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REQUESTS_CA_BUNDLE=/path/in/container/your_certificate.crt</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/path/to/certificate.crt:/path/in/container/your_certificate.crt</span></span><br></pre></td></tr></table></figure>
<p>This method is also not correct for ChangeDetection, as setting this environment variable overrides the entire set of existing certificates, meaning ChangeDetection will only trust the ntfy certificate and won’t trust any certificates on the internet. Since ChangeDetection needs to access the internet, this creates a conflict.</p>
<p>For some scripts, like the one I previously wrote about <a href="/en/2024/02/17/jellyfin-original-filename/?highlight=requests_ca_bundle#My-Solution">“Display Original Filenames in Jellyfin”</a>, using this environment variable can still be quite handy.</p>
<h3 id="Solution-3-Add-the-Certificate-to-the-certifi-Package">Solution 3: Add the Certificate to the <code>certifi</code> Package</h3>
<p>Enter the container:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; import certifi</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; certifi.where()</span></span><br><span class="line">/path/to/the/certifi/cacert.pem</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="built_in">exit</span>()</span></span><br><span class="line">cat /path/in/container/your_certificate.crt &gt;&gt; /path/to/the/certifi/cacert.pem</span><br></pre></td></tr></table></figure>
<p>Then restart the container.</p>
<p>This is the only viable solution at the moment.</p>
<p>For containers, it’s okay if the <code>certifi</code> package gets messed up, because you can always create a new container. For hosts, consider creating a new <code>venv</code> or <code>conda env</code> for this task, so you don’t damage your existing environment.</p>
<hr>
<p>After testing ChangeDetection again, everything is working fine. The integration is completed 😁.</p>
<h1 id="References">References</h1>
<ul>
<li><a href="https://docs.ntfy.sh/install/#docker">ntfy doc: Installation</a></li>
<li><a href="https://docs.ntfy.sh/config/">ntfy doc: Config</a></li>
<li>ChatGPT</li>
<li><a href="https://stackoverflow.com/a/70988519/23172420">How to get Python requests to trust a self signed SSL certificate?</a></li>
</ul>
]]></content>
      <categories>
        <category>tech</category>
        <category>NAS</category>
        <category>Docker</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>NAS</tag>
        <tag>Docker</tag>
        <tag>ChangeDetection</tag>
        <tag>Python</tag>
        <tag>ntfy</tag>
      </tags>
  </entry>
  <entry>
    <title>Common Commands for pip &amp; conda</title>
    <url>/en/2024/01/14/pip-conda-Common-Commands/</url>
    <content><![CDATA[<h1 id="pip">pip</h1>
<ol>
<li>
<p>Install <code>script-house</code>, version <code>0.0.2</code>.</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install script-house==0.0.2</span><br></pre></td></tr></table></figure>
<p>If you want to install the latest version by default, you can omit <code>==0.0.2</code>.</p>
<p>To install multiple dependencies in one line:</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install script-house==0.0.2 pydantic==2.5.3 pymongo==4.6.1</span><br></pre></td></tr></table></figure>
</li>
</ol>
<span id="more"></span>
<ol start="2">
<li>
<p>List all dependencies.</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip list</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>List current dependencies in <code>requirements.txt</code> format.</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip freeze</span><br></pre></td></tr></table></figure>
<p>The result of <code>pip freeze</code> is a subset of <code>pip list</code>. <code>pip list</code> usually includes fundamental dependencies like <code>pip</code>, <code>setuptools</code>, and <code>wheel</code>.</p>
<p>The purpose of <code>pip freeze</code> is to export project dependencies for others to use, while <code>pip list</code> is just for display.</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Install all dependencies from <code>requirements.txt</code>.</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Uninstall a specific dependency.</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip uninstall script-house</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Uninstall multiple dependencies.</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip uninstall -r req.txt -y</span><br></pre></td></tr></table></figure>
<p><code>-y</code> automatically confirms the deletion.</p>
<p>How to uninstall all dependencies in the current environment?</p>
 <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">pip freeze &gt; req</span><br><span class="line">pip uninstall <span class="literal">-r</span> req <span class="literal">-y</span></span><br><span class="line"><span class="built_in">del</span> req</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="conda">conda</h1>
<ol>
<li>
<p>After conda is installed on Linux, you should run <code>conda init</code> first before using conda commands; On Windows, there is no such need.</p>
</li>
<li>
<p>List all environments.</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">conda <span class="built_in">env</span> list</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Create a new environment.</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">conda create -n &lt;environment-name&gt; python=3.8</span><br></pre></td></tr></table></figure>
<p>The basic command is <code>conda create -n &lt;environment-name&gt;</code>, but specifying the Python version is a common practice. Compared to venv, conda environments also install some basic OS-dependent dependencies.</p>
</li>
<li>
<p>Activate an environment.</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">conda activate &lt;environment-name&gt;</span><br></pre></td></tr></table></figure>
<p>On Windows, you probably need to omit <code>conda</code>.</p>
</li>
<li>
<p>Deactivate the environment.</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">conda deactivate</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Remove an environment.</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">conda remove -n &lt;environment-name&gt; --all</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>View basic information.</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">conda info</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Install dependencies.</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">conda install pytorch==1.12.1 torchvision==0.13.1 torchaudio==0.12.1 -c pytorch -c conda-forge</span><br></pre></td></tr></table></figure>
<p>Similar to pip, it follows the format <code>dependency==version</code>; the <code>-c</code> parameter specifies the download source (channel) as default channels often fail.</p>
</li>
<li>
<p>Create an environment from a configuration file (usually named <code>environment.yml</code>).</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">conda <span class="built_in">env</span> create -f environment.yml</span><br></pre></td></tr></table></figure>
<p>Content of <code>environment.yml</code>:</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">&lt;environment-name&gt;</span></span><br><span class="line"><span class="attr">channels:</span> <span class="comment"># -c parameter, specifying download source</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pytorch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">conda-forge</span></span><br><span class="line"><span class="attr">dependencies:</span> <span class="comment"># dependencies installed by conda</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">python=3.8</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">numpy</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">pandas</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">matplotlib</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">pip:</span> <span class="comment"># dependencies installed by pip</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">imageio</span></span><br></pre></td></tr></table></figure>
<p>It’s not recommended to create a new environment by this method, because channels often fail.</p>
</li>
<li>
<p>Disable auto-activation of the base environment. If enabled, every new shell will automatically activate the base environment.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">conda config --<span class="built_in">set</span> auto_activate_base <span class="literal">false</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>tech</category>
        <category>cheat sheet</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>pip</tag>
        <tag>conda</tag>
      </tags>
  </entry>
  <entry>
    <title>Basic Usage of Python AIOHTTP</title>
    <url>/en/2024/03/29/python-aiohttp-use/</url>
    <content><![CDATA[<h1 id="Preface">Preface</h1>
<p>Recently, I’ve been using Python to write web crawlers for downloading manga (see <a href="/en/tags/LANraragi/">previous posts on LANraragi</a>). A typical page of a manga like this:</p>
<img src="./MDImgs/python-aiohttp-use/image-20240329132644183.png" alt="image-20240329132644183" style="zoom: 33%;" />
<p>All the data on this webpage can be retrieved using BeautifulSoup, and only one communication is needed per page. However, downloading images is different: each image requires a separate communication, and the response body is often quite large. Obviously, images don’t need to be downloaded sequentially, otherwise, it would waste a lot of time.</p>
<p>AIOHTTP is an asynchronous HTTP client/server module, which is very suitable for this scenario. Through asynchronous programming, it can maximize the performance of the network (and the server). This article focuses on introducing the basic usage of AIOHTTP, without going into details about how it works.</p>
<span id="more"></span>
<h1 id="Principles">Principles</h1>
<p>AIOHTTP is an HTTP library based on Python’s coroutine mechanism. HTTP needs no introduction, and Python coroutines are based on the asyncio module, using <code>async</code> and <code>await</code> as keywords, aiming to improve the efficiency of IO-bound tasks.</p>
<p>Using coroutines involves concurrency — synchronizing tasks and mutex of data — which needs to be taken into account when programming.</p>
<h1 id="Example-1-hello-world">Example 1: hello world</h1>
<p>copied from the official doc:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> session.get(<span class="string">&#x27;http://python.org&#x27;</span>) <span class="keyword">as</span> response:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Status:&quot;</span>, response.status)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Content-type:&quot;</span>, response.headers[<span class="string">&#x27;content-type&#x27;</span>])</span><br><span class="line"></span><br><span class="line">            html = <span class="keyword">await</span> response.text()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Body:&quot;</span>, html[:<span class="number">15</span>], <span class="string">&quot;...&quot;</span>)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure>
<ul>
<li><code>aiohttp.ClientSession</code> object is responsible for sending all requests;</li>
<li>If the function body contains <code>async</code> or <code>await</code> keywords, the function must be asynchronous, i.e. defined with <code>async def</code>;</li>
<li>For an async function:
<ul>
<li>If called in a sync context, <code>asyncio.run(async_function(arguments))</code> should be used;</li>
<li>If called in an async context, <code>await async_function(arguments)</code> should be used, as in <code>html = await response.text()</code> above.</li>
</ul>
</li>
</ul>
<h1 id="Example-2-ClientSession">Example 2: <code>ClientSession</code></h1>
<p><code>aiohttp.ClientSession</code> has its own connection pool. Therefore we usually create only one instance during the lifecycle of the program to reuse connections.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">url, session, headers=&#123;&#125;, cookies=&#123;&#125;</span>):</span><br><span class="line">    <span class="comment"># Setting headers and cookies works the same as requests.get()</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> session.get(url, headers=headers, cookies=cookies) <span class="keyword">as</span> response:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> response.text()</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        text = <span class="keyword">await</span> get(<span class="string">&quot;http://python.org&quot;</span>, session)</span><br><span class="line">        <span class="built_in">print</span>(text[:<span class="number">50</span>])</span><br><span class="line">        text = <span class="keyword">await</span> get(<span class="string">&quot;https://docs.aiohttp.org/en/stable/&quot;</span>, session)</span><br><span class="line">        <span class="built_in">print</span>(text[:<span class="number">50</span>])</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure>
<h1 id="Example-3-Downloading-Files">Example 3: Downloading Files</h1>
<p>If we want to download large files like photos or videos, we should use the following way:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">download_image</span>(<span class="params">session: aiohttp.ClientSession, uri: <span class="built_in">str</span>, file_path: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> session.get(uri) <span class="keyword">as</span> response:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                chunk = <span class="keyword">await</span> response.content.read(<span class="number">8192</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> chunk:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                file.write(chunk)</span><br></pre></td></tr></table></figure>
<h1 id="Example-4-Concurrent-Execution">Example 4: Concurrent Execution</h1>
<blockquote>
<p>This is a feature of asyncio, not AIOHTTP</p>
</blockquote>
<p>Suppose we want to download multiple images, we can do it like this:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    site = <span class="string">&#x27;https://gustaavv.github.io/en/MarkDownImages/&#x27;</span></span><br><span class="line">    images = [<span class="string">&#x27;image-20230722142231405.png&#x27;</span>, <span class="string">&#x27;image-20230722142307844.png&#x27;</span>]</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">for</span> im <span class="keyword">in</span> images:</span><br><span class="line">            <span class="keyword">await</span> download_image(session, site + im, im)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure>
<p>However, the downloads are still sequential, not concurrent.</p>
<p>The correct way is to use <code>asyncio.gather</code>, which can execute a series of tasks concurrently.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    site = <span class="string">&#x27;https://gustaavv.github.io/en/MarkDownImages/&#x27;</span></span><br><span class="line">    images = [<span class="string">&#x27;image-20230722142231405.png&#x27;</span>, <span class="string">&#x27;image-20230722142307844.png&#x27;</span>]</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        tasks = [download_image(session, site + im, im) <span class="keyword">for</span> im <span class="keyword">in</span> images]</span><br><span class="line">        result_list = <span class="keyword">await</span> asyncio.gather(*tasks)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure>
<p>The parameter of <code>gather()</code> is a call to async functions, that is <code>gather(f1(), f2())</code>. Here <code>gather(*[f1(), f2()])</code> is equivalent to <code> gather(f1(), f2())</code></p>
<p><code>await</code> ensures that all download tasks are completed before the the next statement is executed.</p>
<h1 id="Summary">Summary</h1>
<p>In my web crawler project, the use of AIOHTTP is relatively simple. I only implemented concurrent image downloading. The main work focuses on parsing HTML.</p>
<p>In the project, I used the template method design pattern: in the parent class, I implemented concurrent downloads using AIOHTTP, while the subclass only needs to implement the <code>parse_html()</code> abstract function. AIOHTTP is only used when setting up the framework, and will not be involved later. Considering the possibility of future use, I wrote this post to document the basic usage of AIOHTTP and asyncio.</p>
<h1 id="References">References</h1>
<ul>
<li>ChatGPT</li>
<li><a href="https://docs.python.org/3/library/asyncio.html">Python doc: asyncio</a></li>
<li><a href="https://docs.aiohttp.org/en/stable/">AIOHTTP</a></li>
</ul>
]]></content>
      <categories>
        <category>tech</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>AIOHTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>Messages for reader</title>
    <url>/en/3000/01/01/%E7%BD%AE%E9%A1%B6%E9%80%9A%E7%9F%A5/</url>
    <content><![CDATA[<ul>
<li>Visit the Chinese site <a href="/" onclick="jump()">here</a>, or click ‘Switch to Chinese’ at the left sidebar.</li>
</ul>
<script>
    function jump() {
        window.location.href = "https://gustaavv.github.io?timestamp=" + (new Date()).getTime();
    }
</script>]]></content>
  </entry>
</search>
